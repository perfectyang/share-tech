[{'link': 'https://www.w3cplus.com/preprocessor/sass-to-postcss.html', 'title': '从Sass过渡到PostCSS', 'description': '\nSass多年来一直是我的首选。最近我有一段时间，想尝试使用PostCSS的cssnext插件来处理CSS样式。我一直想使用工具尝试写一些CSS的新特性。同时自己的个人网站也是一个最佳测试这些新特性的实验地。\n '}, {'link': 'https://www.w3cplus.com/css3/taking-css-shapes-to-the-next-level.html', 'title': '聊聊CSS Shapes规范的下一个版本', 'description': '\n在前面的教程中，看到了怎么创建CSS Shapes,即在元素定认一个规则图形。里面都是些基础的知识，比如说创建一个圆，然后多行文本围绕这个圆。在这篇文章中，我们将探索一些更复杂的图形，让你的布局不在局限于四四方方的图形中。\n '}, {'link': 'https://www.w3cplus.com/html5/10-new-features-of-html-5-1.html', 'title': '10个HTML 5.1的新功能', 'description': '\n在几个星期前,W3C在2016年11月发布了新的 HTML 5.1 recommendation,HTML规范得到了重大改进，在最近的博客中,W3C将新的主版本称为黄金标准，因为HTML 5.1为我们提供了新的方法，我们可以使用HTML来创建更灵活的网络体验。\n '}, {'link': 'https://www.w3cplus.com/css4/color-mod.html', 'title': '使用color-mod()函数修改颜色', 'description': '\n去年@Erik Jung写了一篇文章来介绍CSS4 Color特性，那时并没有花时间去探讨其具体的使用方式，只是略知他能让你基于某个颜色，添加调节参数，得到新的颜色。由于其还是Color的新特性，所以目前如果不依赖于其他的手段，你在浏览器里是看不到效果的。当然也有非常出色的工程师，比如@Ahmad Shadeed写的一篇文章中，使用rgba()模拟出color-mod()函数的特性。\n '}, {'link': 'https://www.w3cplus.com/css/understanding-the-css-property-value-syntax.html', 'title': '【转载】理解 CSS 属性值语法', 'description': '\n万维网联盟（W3C） 使用了一套特别的语法来定义 CSS 的属性值，能让所有的 CSS 属性都用。如果你曾看过 CSS 规范，你可能已经见过这套语法了。如果你不知道这些符号以及它们如何工作的话，这套语法可能非常难理解。然而，这值得花时间来学。如果你理解 W3C 是如何定义这些属性值的，你就可以理解 W3C CSS 规范 中任意一个了。\n '}, {'link': 'https://www.w3cplus.com/css3/initial-letter.html', 'title': 'CSS制作首字下沉', 'description': '\n在杂志排版中，常常能看到首字下沉的效果。在Web的排版中，也常常能看到上图这样的效果。并且常常看到的是首段首字下沉。那么今天这篇文章咱们来聊聊如何使用CSS实现首字下沉效果。早期中，实现首字下沉都是能过伪元素::first-letter来实现。不过值得庆幸的是，在CSS Inline Layout Module Level 3提供了一个新的思路和方案：采用initial-letter。\n '}, {'link': 'https://www.w3cplus.com/css3/css-animation-fill-mode-property.html', 'title': '你所不知道的animation-fill-mode细节', 'description': '\n这两天一直在探究CSS Animation中animation-fill-mode属性中的细节，那是有原因的，具体原因是什么就不多说了。虽然在《理解animation-fill-mode属性》一文让我稍加对该属性有一定的了解。但还有一些潜在的细节和因素还是不为人知。所以我决定花一定的时间彻底的来剖析animation-fill-mode。如果你感兴趣，请继续往下阅读。\n '}, {'link': 'https://www.w3cplus.com/javascript/DOM-manipulation-tutorial-series.html', 'title': 'DOM系列：DOM操作小结', 'description': '\nDOM是JavaScript的基础之一，自己学习DOM的操作也有一段时间了，到今天为止DOM系列的教程刚好有十篇了，这部分都主要是围绕DOM操作的笔记。主要围绕DOM元素的增、删、改、查，DOM节点的操作以及元素尺寸、位置获取和设置等知识。今天这篇文章主要是小结一下。希望对一些像我这样的初学者有所帮助。\n '}, {'link': 'https://www.w3cplus.com/css/css-grid.html', 'title': '【转载】CSS Grid!', 'description': '\nGrid布局来了，Grid布局来了。千真万确，各大浏览器将发布对Grid布局的支持。唔哈哈哈哈~2017年3月，Chrome和Firefox将开始默认支持Grid布局。其中，Mozilla将在3月7日发布的Firefox 52版本上开始支持。由于要先在Chrome Canary中支持Grid，所以，谷歌将在3月14号的Chrome 57版本上开始默认支持Grid.一旦在公开版本中默认得到了支持，那么当前在开发版本中的所有Grid功能都将在公开版本中出现。Grid时代就此开始。\n '}, {'link': 'https://www.w3cplus.com/react/stateful-vs-stateless-components.html', 'title': 'React中的无状态和有状态组件', 'description': '\n组件的概念在Web中应用的场景已经相当广泛了。而React是专注于View层的，组件也是React核心理念之一，一个完整的应用将由一个个独立的组件拼装而成。组件也是React最基础的一部分，欲想征服React，那么了解和编写组件就显得尤为重要。在上一篇文章，咱们就写了一个最简单的React组件，而且在文章末尾，咱们留了一个问题，怎么创建无状态和有状态的React组件？接下来，就一起来了解React中的无状态和有状态的组件。\n '}, {'link': 'https://www.w3cplus.com/css/css-custom-properties-strategy-guide.html', 'title': 'CSS自定义属性使用指南', 'description': '\nCSS自定义属性有很大的潜力可以改变我们编写和组织 CSS 的方式，并且在一定程度上改变 JavaScript 与 UI 组件的调用方式。我并不关心语法和它们的工作方式（为此，我建议你阅读“《是时候开始使用自定义属性》这篇文章。同时我想更深入地研究如何充分使用 CSS 自定义属性。\n '}, {'link': 'https://www.w3cplus.com/react/react-learn-2-1.html', 'title': '从零学习React技术栈:JSX 入门', 'description': '\nJSX 其是一个语法扩展，它既不是单纯的字符串，也不是 HTML，虽然长得和 HTML 很像甚至基本上看起来一样。但事实上它是 React 内部实现的一种，允许我们直接在 JS 里书写 UI 的方式。有些同学来看 JSX 可能也会觉得它像一种模板语言之类的。事实上也不是，它就是基于 JavaScript，在 React 当中的一种语法扩展的实现。JSX 被用来创建 React 当中的 Elements，React 当中的元素。然后 React 再通过一些方法，把 JSX 创建的元素，渲染成我们在浏览器当中看到的 DOM元素。\n '}, {'link': 'https://www.w3cplus.com/css/another-collection-of-interesting-facts-about-css-grid.html', 'title': 'CSS Grid Layout一些有趣的事情(2)', 'description': '\n去年，我做了一个研讨会之后收集了一些关于CSS Grid布局有趣的东西。今天年，我在另一个工作室工作，我学到了一些更令人兴奋的事情，那就是我们都喜欢布局规范。当然，我不会把这些有趣的东西独享。我很高兴能和大家一起分享这些有趣的东西。\n '}, {'link': 'https://www.w3cplus.com/css3/understanding-css-animation-fill-mode-property.html', 'title': '理解animation-fill-mode属性', 'description': '\n我相信很多前端开发人员都有基于CSS @keyframes创建动画的经历。甚至其中有很多人创建了一些很复杂的动效和去实验这个特性。如果你想要全面了解这篇文章将要介绍的内容，建议你花点时间阅读我2011年在Smashing Magazine介绍的一个主题，这篇文章也是非常不错的。不过，在今天这篇文章中，我并不想介绍有关于CSS动画中所有的属性，我只想专注于CSS动画中的一个属性：animation-fill-mode属性。这个动画属性对动画影响并不很明显。例如没有人会对CSS动画中animation-name、animation-duration等属性感到困惑。但对于animation-fill-mode呢？我们接下来通过一些简单的示例来阐述。\n '}, {'link': 'https://www.w3cplus.com/vue/component-data-and-props-part1.html', 'title': 'Vue 2.0学习笔记：组件数据传递', 'description': '\n通过上一节中的学习，咱们了解了在Vue中怎么创建组件和使用组件。在项目中使用组件，目的一般就是提高代码复用率，增强模块化，从而降低开发成本。在文章结尾处，我们提到了Vue中组合组件，就是A组件中包含了B组件。而组件与组件之间的相互使用避免不了数据之间的传递。那么Vue中组件的数据是如何传递的呢？这就是这一节将要了解和学习的内容。\n '}, {'link': 'https://www.w3cplus.com/css/where-lines-break-is-complicated-heres-all-the-related-css-and-html.html', 'title': 'CSS中最全的换行处理方式', 'description': '\n在Web页面上常常可以看到某个元素内部有一个很长的单词，元素的宽度不足以容纳它。一个常见的现象就是有一个很长的URL。这会发生什么呢？这取决于CSS，那么CSS如何控制布局，以及CSS如何让文本更合理的方式展示。\n '}, {'link': 'https://www.w3cplus.com/canvas/create-3d-ball-with-canvas.html', 'title': '如何用Canvas做一个3D球', 'description': '\n这篇文章是根据博客园@Waxes同学在做的3D球体的Demo提供的思路，使用案例中的提供的一些数学公式制作的3D球。\n '}, {'link': 'https://www.w3cplus.com/css/smooth-corners-with-css-houdini.html', 'title': '使用CSS Houdini制作平滑的圆角', 'description': '\n最近，我在Twitter分享了一篇关于用户界面的文章。我喜欢Illusions，但这对我来说是一个新的东西：一个修正的圆比几何图形看起来更圆！圆角矩形也是这样。令人惊讶的是，我还发现，自iOS7以来，苹果一直在使用这个技巧。在数学上，它被称为Lamé Curve or Superellipse。\n '}, {'link': 'https://www.w3cplus.com/vue/create-video-player-component.html', 'title': '使用Vue构建视频播放列表', 'description': '\n这周有关于CSSConf Australia大会的视频已经放出来了。花了一天的时间看了一下视频，有些话题还是很有意思的。不过咱们今天要聊的不是这个大会中的事情。这不是在学Vue吗？总想给自己找点活干，练习练习Vue。我就在想，是不是可以把该大会的在YouTube上的视频列表效果给模拟出来。\n '}, {'link': 'https://www.w3cplus.com/vue/create-notched-boxes-component-with-vue.html', 'title': '使用Vue制作切口盒子组件', 'description': '\n今天看到@Chris Coyier刚发的一篇帖子，使用CSS怎么写一个切口盒子（Notched Boxes）？其实这个效果早在@Lea Verou的CSS Secrets一书中有一个专门的小节介绍CSS怎么实现这个斜切口的效果。所以说这不是什么新东西。不过接下来的内容和前面还是略有不同。\n '}, {'link': 'https://www.w3cplus.com/css/atomic-design.html', 'title': 'Atomic Design原子设计 ┃ 构建科学规范的设计系统', 'description': '\n最近在Medium上看到一个设计理念正在兴起，这个设计方法逐渐被国外一些大公司运用于创建有层次和成熟规范的设计系统中。笔者很兴奋地读了相关的外文文章，准备把这个非常棒的独角兽设计流程分享给大家。\n '}, {'link': 'https://www.w3cplus.com/css/drawing-images-with-css-gradients.html', 'title': '使用CSS渐变绘图', 'description': '\n这里所说的绘制是指CSS图像，即使用HTML元素和CSS属性绘制的图像。它们看起来像是Adobe Illustrator绘制的svg，但它们是在浏览器中渲染出来的。我所见过的一些技巧是使用border、box-shadow和clip-path来绘制图像。如果你在Codepen搜索“daily css images”，你会发现有很多优秀的案例。我自己也画了一些，也做过一些极限挑战，就是在一个元素上使用background和尽量使用其他属性来绘制图像。\n '}, {'link': 'https://www.w3cplus.com/react/create-the-first-react-component.html', 'title': '写第一个React组件', 'description': '\n什么是React？咱们在这不阐述，有关于这方面的介绍可以查阅官网或者互联网上相关的教程。咱们今天来学如何写一个React组件。对于像我这样初次接触React的人而言，总感觉React非常的神秘，也无法入手。最近也看了一些相关的教程，开始自己尝试写一个简单的React组件。\n '}, {'link': 'https://www.w3cplus.com/javascript/javascript-inheritance.html', 'title': ' JavaScript 继承总结', 'description': '\n原型几乎贯穿了各种 JavaScript 继承方式。理解以及灵活利用原型是写出优秀代码的关键。无论是继承还是创建对象，最终理想的方案都是将几种不同方式的优点结合在一起，这正是 JavaScript 灵活的魅力。\n '}, {'link': 'https://www.w3cplus.com/javascript/so-you-want-to-be-a-functional-programmer-part-6.html', 'title': '如何成为一位函数式编程爱好者(Part 6)', 'description': '\n既然你已经学会了所以的新东西，可能就会想了，“现在该做什么？如何将它用在我每天的编程中使用它？”这要视情况而定。如果你能使用像 Elm 或 Haskell 这样的纯函数语言，你就可以尝试全部想法。而且在这些语言中实现起来很方便。如果你只能使用像 JavaScript 这样的指令式语言，而且大多数肯定都是，仍然可以使用很多前面学到的知识，但将需要大量的规则。\n '}, {'link': 'https://www.w3cplus.com/css/css-grid-gotchas-stumbling-blocks.html', 'title': 'CSS Grid中的陷阱和绊脚石', 'description': '\n2017年3月，CSS Grid在几个星期内就被发送到Chrome、Firefox和Safari的生产版本中。很高兴，大家可以使用它来解决实际问题。CSS Grid是一种不同的布局方式，在大家开始使用规范的时候，有很多常见的问题。这篇文章的目的是回答其中的一些问题，并且将会是Smashing Magazine中有关于CSS Grid一系列文章中的一篇。\n '}, {'link': 'https://www.w3cplus.com/vue/create-bootstrap-v4-button-component.html', 'title': 'Vue 2.0学习笔记：创建Button组件', 'description': '\n在上一节中，咱们学习了Vue中怎么创建组件。在这篇文章中我们以按钮组件为例，了解了怎么注册全局组件和局部组件。并且通过这些基础知识，可以轻易的创建类似于HTML中button元素效果的按钮组件。但这个组件非常的简陋，和我们想像的组件相差甚远。那么今天我们来看看，怎么在Vue中创建一个按钮组件。\n '}, {'link': 'https://www.w3cplus.com/react/react-learn-1-2.html', 'title': '从零学习React技术栈: npm的安装配置和React开发环境配置', 'description': '\n工欲善其事，必先利其器。在正式学习 React 技术栈之前，我们先来介绍一下之后经常要使用到的 npm。npm 是一个基于 Nodejs 的 JavaScript 包管理工具，全称叫做 Node Package Manager，所谓的包呢，其实就是可复用的代码，每个人都可以把自己编写的代码库发布到 npm 的源（英文叫做 registry）上面进行管理，你也可以下载别人开发好的包，在你自己的应用当中使用。\n '}, {'link': 'https://www.w3cplus.com/javascript/ES6-Objects.html', 'title': 'ES6学习笔记：对象', 'description': '\n在JavaScript中，几乎每一个值都是某种特定类型的对象，于是ES6也着重提升了对象的功能性。上周花了一周的时间了解了JavaScript中的对象相关的知识，对于ES6中有关于对象的扩展功能并不太了解。今天开始就来简单的了解和学习有关于ES6中对象的扩展功能。ES6通过多种方式来加强对象的使用，通过简单的语法扩展，提供了更多操作对象及对象交互的方法。接下来的内容就是有关于这些知识的整理。\n '}, {'link': 'https://www.w3cplus.com/svg/building-progress-ring-quickly.html', 'title': '快速构建一个圆形的进度条', 'description': '\n在一些特别生的网站上，用户需要一个可视化的是示，以表明网站资源仍然在加载。从Spinner到Skeleton屏幕有不同的方法来解决这类的用户体验效果。如果我们使用的是开箱即用的解决方案，它为我们提供了当前的进度，比如Jam3所提供的预加载程序包，那么构建一个加载指示器就变得更容易了。为此，我们将制作一个带有动画的环形（圆形）的进度条，然后将其包装成一个组件，再提供给用户使用。\n '}, {'link': 'https://www.w3cplus.com/vue/component-registered.html', 'title': 'Vue 2.0学习笔记：组件的使用', 'description': '\n从这一节开始正式进入对Vue 2.0组件的系统学习。在Vue中，组件是最强大的功能之一。而且Vue组件涉及到的知识点也非常的多，比如组件的使用，prop、事件、slots以及动态动组等等。在一节的内容中无法全部涵盖这些知识点。所以将会分几节内容来整理Vue组件中的学习笔记。\n '}, {'link': 'https://www.w3cplus.com/react/basic-environmental-installation.html', 'title': 'React.js小书：基本环境安装', 'description': '\nReact.js 单独使用基本上是不可能的事情。不要指望着类似于 jQuery 下载放到 <head /> 标签就开始使用。使用 React.js 不管在开发阶段生产阶段都需要一堆工具和库辅助，编译阶段你需要借助 Babel；需要 Redux 等第三方的状态管理工具来组织代码；如果你要写单页面应用那么你需要 React-router。这就是所谓的“React.js全家桶”。\n '}, {'link': 'https://www.w3cplus.com/javascript/understanding-javascript-constructors.html', 'title': '详解JavaScript构造器', 'description': '\n对构造函数有很好的理解是你掌握JavaScript这门语言的重点。我们都知道JavaScript不像其他语言，它没有class关键字，但是它有跟function非常相似的构造函数。这篇文章我们一起来详细地了解JavaScript构造函数如何构造对象。构造函数跟普通函数非常相似，但是我们通过new关键字来使用它们。主要有两种类型的构造函数，native构造函数（Array,Object）它们可以在执行环境中自动生成，还有自定义的构造函数，你可以定义自己的方法和属性。\n '}, {'link': 'https://www.w3cplus.com/javascript/viewport-device-scroll-document-size.html', 'title': 'DOM系列：视窗、设备、滚动条和文档尺寸', 'description': '\n在上一节中，学习了JavaScript如何获取和设置元素位置和尺寸相关的方法，另外在JavaScript的学习笔记当中也学习了视窗宽度、位置与滚动高度相关的JavaScript方法与属性。今天继续来学习DOM中相关的知识，这篇文章将学习视窗、设备、滚动条和文档等相关的尺寸。其实在前两篇文章中都有涉及这些知识，为了让DOM系列相关的知识更完善，所以再花点时间整理一些这方面的技术点，加强印象。\n '}, {'link': 'https://www.w3cplus.com/vue/understanding-vue-js-reactivity-depth-object-defineproperty.html', 'title': '深入理解Vue.js响应式原理', 'description': '\n本人是Java背景，许多年前刚接触JavaScript时有点怪怪的，因为它没有 getters 和 setters。随着时间的推移，我开始喜欢上这个缺失的特性，因为相比Java大量的 getter 和 setter，它让代码更简洁。\n '}, {'link': 'https://www.w3cplus.com/svg/svg-animation.html', 'title': 'SVG 让 UI 工程师早点回家陪媳妇', 'description': '\n本文主要是讲解关于 SVG 的一些高级动画特效，比如 SVG 动画标签，图形渐变，路径动画，线条动画，SVG 裁剪等。以及，相关的动画的矩阵知识，这个也是现在 CSS 动画里面最重要，同时也是最为欠缺的知识点。文章会先从基本语法入手，然后，慢慢深入。介绍一些动画基本原理和对应的数学原理知识点。并且文章后面，还附有相关语法的介绍，当你在遇到不熟悉语法的时候可以参考参考。\n '}, {'link': 'https://www.w3cplus.com/animation/how-you-can-use-simple-trigonometry-to-create-better-loaders.html', 'title': '如何使用简单的三角函数创建Loading效果', 'description': '\n在这篇文章中，将使用三角函数的基本概念，重新创建一个更平滑的Loading效果。我知道这听起来很奇怪，但请相信我，这里一定会很有趣。你会惊讶地发现，要编写的代码很少。当然，你可能会担心三角函数相关的知识，事实上是你不需要知道三角学或数学你能理解这篇文章。我将会解释这里的每个圆相关的事情。\n '}, {'link': 'https://www.w3cplus.com/css/animate-a-container-on-mouse-over-using-perspective-and-transform.html', 'title': '使用perspective和transform实现容器上的悬浮效果', 'description': '\n我一直在做一个网站，这个网站主要用来向用户展示大型图片。我没有创建一个典型的Lightbox效果，而是尝试让一些交互效果更有意思。最后的效果是我在一个容器上添加了一个效果，当用户把鼠标悬浮在图片（用户鼠标移动图片上）时，它会倾斜（鼠标移动到不同的角度时，向不同的方向倾斜）。\n '}, {'link': 'https://www.w3cplus.com/css/css-paint-api.html', 'title': 'CSS Paint API', 'description': "\nCSS Paint API是W3C规范中之一，目前的版本是Level1。它也被称为CSS Custom Paint或者Houdini's Paint Worklet。对于开发者而言，有一个值得高兴的是，Chrome65将会支持该API。也就是说，可以使用CSS Paint API提供的registerPaint(name, paintCtor)做一些事情。那么CSS Paint API是什么？你能用它做什么？它又是如何工作的呢？带着一系列的为什么，我们开启对CSS Paint API的初探。\n "}, {'link': 'https://www.w3cplus.com/react/tips-to-learn-react-redux.html', 'title': '2017 年学习 React + Redux 的一些建议', 'description': '\n使用 React + Redux 这个技术栈开发应用已经有很长一段时间了，我的一些使用经验也许会有些主观，但我觉得写出来也许对你开始学习或是进阶使用 React + Redux 会有些帮助。Redux 并不是只和 React 结合使用的，它也可以和其他的很多类库结合起来一起使用，即使你还未开始深入使用，你也可以阅读文中的部分内容。同时，如果你有一些建议或是疑惑，可以在 Github 给我提交 Issue，很乐意与你一起交流。\n '}, {'link': 'https://www.w3cplus.com/vue/list-rendering-and-vues-v-for-directive.html', 'title': '列表渲染和Vue的v-for指令', 'description': '\nWeb渲染是Web开发中最常用的实战之一。动态列表渲染通常用于简洁友好的格式向用户渲染一系列相似的分组信息。在我们使用的每个Web应用程序中，都可以看到很多内容列表被用于Web应用程序当中。在这篇文章中，我们将收集有关于Vue中的v-for指令生生动态列表的理解，并通过一些示例来说明为什么在这样做的时候应该使用key属性。由于我们将在开始编写代码时全面地解释一些事情，本文假设你对Vue或其他JavaScript框架有一定的了解。\n '}, {'link': 'https://www.w3cplus.com/javascript/get-element-position-and-size-using-javascript.html', 'title': 'DOM系列：获取元素位置和尺寸', 'description': '\n对于每一位Web开发的同学而言，在CSS的世界当中，每一个元素都是一个盒子，都有描述盒子大小和位置的相关属性。比如CSS的盒模型相关的属性和position相关属性。不过今天我们学习和聊的不是CSS的世界，而是来学习和聊JavaScript中怎么获取元素尺寸和位置。\n '}, {'link': 'https://www.w3cplus.com/css/say-hello-to-houdini-and-the-css-paint-api.html', 'title': 'CSS Houdini和CSS Paint API', 'description': '\n很长时间以来，我都没有对浏览器新的技术感到兴奋。Houdini是一个强大的项目，它给开发者提供了比以往任何时候都还要更强大的CSS能力。这个项目的第一部分是CSS Paint API。这篇文章将解释为什么Houdini会如此令人兴奋，然后再告诉你如何开始使用CSS Paint API。\n '}, {'link': 'https://www.w3cplus.com/javascript/working-with-Objects.html', 'title': 'JavaScript中的对象', 'description': '\nJavaScript中的一个对象就是一系列属性的集合，一个属性包含一个属性名和一个属性值（key/value）。一个属性的值可以是函数（这个时候也被称为方法）。除了内置的对象之外，还可以自定义对象。接下来学习在JavaScript中怎么使用对象、属性、函数和方法以及怎么自定义创建对象。\n '}, {'link': 'https://www.w3cplus.com/vue/how-to-create-data-driven-user-interfaces-in-vue.html', 'title': '在Vue中如何用数据来驱动用户界面', 'description': '\n虽然我们通常知道在应用程序中构建大多数视图（View）时需要哪些组件（Component），但很多时候我们并不知道这些组件在运行时是什么。这意味着我们需要基于应用程序状态、用户首选项或API的响应来构建一个页面。一个常见的情况是构建动态表单，其中需要整清楚的是：组件是由JSON对象配置的，还是基于用户的答案而更改的字段来构建。所有现代JavaScript框架（比如我们熟悉的Vue、React等）都有处理动态组件的方法。这篇文章将向您展示如何在Vue中实现它。JavaScript为上述场景提供了一个非常优雅和简单的解决方案。\n '}, {'link': 'https://www.w3cplus.com/javascript/proxy-reflect.html', 'title': '代理(Proxy)和反射(Reflection)', 'description': '\nES5和ES6致力于为开发者提供JS已有却不可调用的功能。例如在ES5出现以前，JS环境中的对象包含许多不可枚举和不可写的属性，但开发者不能定义自己的不可枚举或不可写属性，于是ES5引入了Object.defineProperty()方法来支持开发者去做JS引擎早就可以实现的事情。ES6添加了一些内建对象，赋予开发者更多访问JS引擎的能力。代理(Proxy)是一种可以拦截并改变底层JS引擎操作的包装器，在新语言中通过它暴露内部运作的对象，从而让开发者可以创建内建的对象。本文将详细介绍代理(Proxy)和反射(Reflection)。\n '}, {'link': 'https://www.w3cplus.com/css/using-css-clip-path-create-interactive-effects.html', 'title': '使用CSS Clip Path创建交互效果', 'description': '\n你是否还记得小时候剪过杂志上的照片，把它们粘在纸上，用来制作自己的拼贴画？这篇文章是关于使用CSS的clip-path属性，用来实现Web上裁剪图片的效果。将讨论如何进行切割，以及如何使用这些镂空部件来制作一些有趣的效果。\n '}, {'link': 'https://www.w3cplus.com/javascript/talk-about-front-end-state-management.html', 'title': '浅谈前端状态管理', 'description': '\n近两年前端技术的发展如火如荼，大量的前端项目都在使用或转向 Vue 和 React 的阵营，由前端渲染页面的单页应用占比也越来越高，这就代表前端工作的复杂度也在直线上升，前端页面上展示的信息越来越多也越来越复杂。我们知道，任何状态都需要进行管理，那么今天我们来聊聊前端状态管理。\n '}, {'link': 'https://www.w3cplus.com/css/everything-you-need-to-know-about-css-variables.html', 'title': '你应该掌握的CSS自定义属性技术点', 'description': '\n大多数编程语言都支持变量。但遗憾的是，CSS从一开始就缺乏对原生变量的支持。如果写CSS的话，那是没有变量的，除非你使用像Sass这样的CSS处理器。变量是Sass这样处理器的一个非常有用的特性之一。这也是你尝试使用的理由之一。Web技术发展是非常快速的。我很高兴地告诉你，CSS现在终于支持原生的变量了。虽然CSS处理器还支持更多的特性，但是CSS添加原生的变量是很好的。这些举措使用Web更接近未来的技术。在这篇文章接下来的内容中，我将向你展示如何在CSS使用变量，以及如何使用它们让你的工作变得更轻松。\n '}, {'link': 'https://www.w3cplus.com/mobile/mobile-design-and-adapter.html', 'title': '移动端上的设计和适配', 'description': '\n面对于不同移动设备，特别是针对于屏幕高度的设计和适配，一直是困扰着视觉和前端。特别是设计师和前端开发人员之间的协调，沟通的成本也随着增加。那么这篇文档，主要是用于移动端设计和适配（针对屏幕高度方面），希望通过文档的形式能减少设计师和开发人员之间的一些沟通成本，同时让前端开发人员用最低的时间成本来完成终端设备的UI适配工作。\n '}, {'link': 'https://www.w3cplus.com/vue/creating-custom-inputs-vue-js.html', 'title': '使用Vue创建自定义表单inputs', 'description': '\n基于组件的库或者框架（例如Vue）让我们在开发可复用的组件带来了极大的方便。这些组件可以非常简单的在独立的应用程序中被使用，并且最终呈现的效果一致。\n '}, {'link': 'https://www.w3cplus.com/javascript/javascript-new-keyword.html', 'title': 'JavaScript中的new关键词', 'description': '\n这两天学习JavaScript的数据类型以及字符转换过程中接触到了new这个关键词。比如new String()、new Boolean()和new Number()之类的。如果我们通过typeof来判断他们的类型的话，得到的结果都是object。那么在JavaScript中，new关键词有哪些知识点需要了解呢？\n '}, {'link': 'https://www.w3cplus.com/javascript/lazy-loading-images-using-intersection-observer.html', 'title': '使用 Intersection Observer 实现图片延迟加载', 'description': '\n如果你还没有机会看过，@Paul Lewis 发布了一个精彩的视频系列，演示了如何构建一个媒体播放器以及渐进式 Web 应用（Progressive Web App）的一些重要功能。在 YouTube 上的这一系列视频 包括了他在建立网站时的各个部分。观看开发者展示他们工作的视频绝对是我最喜欢的学习新事物的方式！\n '}, {'link': 'https://www.w3cplus.com/javascript/object-defineproperty.html', 'title': 'JavaScript学习笔记： Object.defineProperty()', 'description': '\n前段时间在学习Vue的双向绑定原理及实现时，简单的知道Object.defineProperty()有很大的用处。这个方法会直接在一个对象上定义一个新属性，或者修改一个对象现有的属性，并返回这个对象。感觉他非常强大，但并不知道其中原委。回过头来重新补一下这方面的基础知识。\n '}, {'link': 'https://www.w3cplus.com/javascript/add-rules-stylesheets.html', 'title': 'DOM系列：动态添加CSS样式规则', 'description': '\n在上一节中学习了如何通过JavaScript来修改CSS样式。简单地说：查询CSS样式（即计算样式），设置单个样式（设置的是行内样式），设置多个样式（通过类来设置样式）。事实上我们还可以通过脚本化CSS这种技术来控制样式。这种方式，可以让我们的页面更加的快速和高效。那就是直接通过JavaScript动态地添加和删除样式表中的某些样式，用来取代不断地查询DOM元素，并应用各种样式。接下来咱们就来学习脚本化样式表相关的知识。\n '}, {'link': 'https://www.w3cplus.com/react/state-management-of-the-web-front-end.html', 'title': 'Web前端的状态管理', 'description': '\n我相信很多朋友跟我一样，初次听到什么Flux, Redux， Vuex，状态管理的时候是一脸懵逼的。因为在外面之前前端大部分开发的时候，根本没有那么多的概念。自从ReactJS火爆后，什么Flux, Redux，React全家桶是一套一套接踵而来。搞的很多开发者甚是头大。所谓的ReactJS全家桶即ReactJS + Redux + Webpack，当然其中的Redux可以用其他例如Mobx之类的替换。原本可能只是很简单的一些数据展示需求，当想用尝试使用ReactJS时，去Google搜索了一些教程，突然发现怎么用个React需要这么多东西。正如今年比较有名的一篇文章里面描述的那样 — ”在2016年学习前端是怎样一种体验"。\n '}, {'link': 'https://www.w3cplus.com/ui/good-to-great-ui-animation-tips.html', 'title': '设计出色的动效', 'description': '\n这篇文章希望通过7个GIF图例来证明动效设计并不复杂，只需在关键之处增加一点点变化，就能让效果大大提升一个境界。通过这些范例，你会发现状态连续性、元素关联性，以及用户注意力控制的重要性。在做动效设计中，我参考的设计规范有：Material Motion、IBM’s Animation Principles、The UX in Motion Manifesto。\n '}, {'link': 'https://www.w3cplus.com/vue/vue-modal-component.html', 'title': 'Vue 2.0学习笔记：使用Vue创建Modal组件', 'description': '\nModal弹框在Web应用或者Web页面上非常常见，很多时候在不同的项目都会重写这样的一个Modal弹框。为了能偷懒，思考了一下，能不能写一个组件，比如说使用Vue创建一个组件，一个Modal组件，让其能在各个Web页面或者应用上使用。在这篇文章中，学习一下如何使用transition和slots来创建可重用的Modal组件。\n '}, {'link': 'https://www.w3cplus.com/vue/component-data-and-props-part3.html', 'title': 'Vue 2.0学习笔记：不同场景下组件间的数据通讯', 'description': '\n通过前面的学习，对于Vue中组件的数据交流有了一定的了解。实际上在Vue中不同场景之下组件之间的数据通讯是不一样的，在业务中常见的组件通讯的场景主要有父子组件之间的通讯、兄弟组件间的通讯和全局组件的通讯等三种。只不过全局组件的通讯不是我们这章要阐述的范围，他涉及到Vuex。接下来分别看看父子组件和兄弟组件之间的通讯方式和实现方法。\n '}, {'link': 'https://www.w3cplus.com/javascript/toString-vs-String-vs-valueOf.html', 'title': 'JavaScript中toString()和valueOf()', 'description': '\n在《JavaScript中数据类型转换》一文中主要学习了JavaScript中的数据类型、数据类型检测和数据类型转换。从这篇文章中了解到了通过String()和toString()可以将值转换为字符串。那么在JavaScript中还有很多有意思的东西，也是让我这样的生手感到困惑的东西。比如String()和new String()有何不同，又比如这篇文章的标题toString()和valueOf()又有何不同。\n '}, {'link': 'https://www.w3cplus.com/javascript/different-types-of-observers-supported-by-modern-browsers.html', 'title': '现代浏览器支持的不同类型的观察者', 'description': '\n观察者（Observer）是一个观察或注意事物的程序。观察者可以观察浏览器中发生的某些活动并做出相应的响应。观察者类似于狗，观察某些活动，并提醒我们发生了一些不寻常的事情。一旦我们为某些活动获取到狗发出的警告时，我们有责任采取相应的行动。现代浏览器支持的四种不同类型的观察者。\n '}, {'link': 'https://www.w3cplus.com/tools/javascript-debugging-tips.html', 'title': '需要掌握的14个JavaScript的调试技术', 'description': '\n大家都知道熟悉掌握工具的使用能让我们事倍功倍，对完成任务的产生的影响非常大。对于JavaScript的调试，都一直说是难以调试，但事实上如果你掌握一些调试技巧，那么解决一些问题或调试Bug的时间会少很多。这篇文章整理了14个你可能不知道的调试技巧，但是下次你发现自己需要调试的JavaScript代码时，可能会用得上，也会因此记住这些调试技巧。这些调试技巧大部分都是针对Chrome和Firefox的浏览器，尽管也有许多和其他浏览器调试工具一样。接下来，我们开始了解这些调试技巧。\n '}, {'link': 'https://www.w3cplus.com/css/create-patterns-with-css-doodle.html', 'title': '一个制作Web图案的组件：css-doodle', 'description': '\nWeb中使用一些图案做为背景图案是一种时常可见的，早期一般都是通过图片来完成。直至CSS一些新特性更趋成熟和稳定的时候，会通过CSS的相关技术，比如CSS的渐变属性配合background-size之类的来做一些复杂而又美观的Web图案，运用于background-image之中。随着前端技术不断的革新，不久前看到一个生成Web图片的组件：<css-doodle /> —— 使用CSS绘制图案的Web组件！\n '}, {'link': 'https://www.w3cplus.com/react/more-reasonable-setstate.html', 'title': '更合理的 setState', 'description': '\nReact 是我做前端以来接触到的第三个框架（前两个分别是 Angular 和 Vue），无论是从开发体验上和效率上，这都是一门非常优秀的框架，非常值得学习。借助于 Redux，我们可以轻松的对 React 中的状态进行管理和维护，同时，React 也为我们提供了组件内的状态管理的方案，也就是 setState()。本文不会涉及到 Redux，我们将从 Component 的角度来说明你不知道的以及更合理的 setState()。\n '}, {'link': 'https://www.w3cplus.com/vue/file-reader-component.html', 'title': '使用FileReader API创建一个Vue的文件阅读器组件', 'description': '\n有时候我们需要从文件中读取数据。在以前，你需要将其发送到服务器，然后返回所需的数据。问题是，现在我们还可以使用FileReader API直接访问浏览器中的文件。如果我们只是想读取一个文本文件，以便在UI级别上做一些无关紧要的事情，那么就不需要将文件发送到服务器。下面的示例将实现从一个文件中读取相关的数据填充到一个textarea中。\n '}, {'link': 'https://www.w3cplus.com/svg/create-progress-bar-with-svg-and-css.html', 'title': '使用SVG制作进度条之二', 'description': '\n在上一节中，学习了怎么利用SVG的stroke-dasharray和stroke-dashoffset来制作进度条。记得在文章末尾留了一个悬念，说这一节中，要聊聊怎么用Vue来把这个SVG的进度封装成组件。咱们先不聊Vue怎么把这个封装成组件（我搜索了一下，有现在所这方面组件，而且做得蛮好的，接下来先学习一下）。今天接着聊上一节中的进度条怎么来实现。不过略有不同。不同点来自于网上一位朋友向我提的一个问题。\n '}, {'link': 'https://www.w3cplus.com/javascript/es6-proxy-reflect.html', 'title': 'ES6学习笔记： 代理和反射', 'description': '\n前端时间学习Vue的时候，碰到Proxy，当时就一脸蒙逼了。所以返过头来补一下相关的知识。在JavaScript中有Proxy和Reflect的两个概念。最近几天一直在学习这两个概念，今天整整这方面的相关知识点。\n '}, {'link': 'https://www.w3cplus.com/react/react-learn-1-1.html', 'title': '从零学习React技术栈：React 新版本及 ES6 简介', 'description': '\n第一节课呢，我们就来简单介绍一下应用在 React 开发当中，属于 ES6 的新的关键字和语法糖，也好为我们之后的学习打下一个基础，当然我更推荐同学们对 ES6 有一个比较全面的了解之后再开始学习 React，不过你也不需要担心，以后在课程中每当遇到涉及 ES6 新语法的问题时，我都会稍作讲解介绍。这是本教程的第一课，主要内容是 ES6 相关的前置知识介绍，如果你有发现不懂的术语，不需要担心，因为在接下来的教程当中，所有我们提到的术语全部都会涵盖讲解。\n '}, {'link': 'https://www.w3cplus.com/vue/renderless-components-in-vuejs.html', 'title': 'Vue中的无渲染组件', 'description': '\n不知道您是否以前有过在第三方组件库中提取过组件的经历，在提取组件的过程中发现需要做一些小的调整，而且也避不开提取整个包。比如像自定义的下拉框，日历或自完匹配等组件，而这些组件可能非常的复杂，需要处理许多意想不到的边界情况。\n '}, {'link': 'https://www.w3cplus.com/vue/component-data-and-props-part2.html', 'title': 'Vue 2.0学习笔记：实现组件数据的双向绑定', 'description': '\n通过上一节的学习，我们了解到了在Vue的组件中数据传递：prop向下传递，事件向上传递。意思是父组件通过prop给子组件下发数据，子组件通过事件给父组件发送消息。但Vue中，props是单向数据绑定，虽然在Vue 1.0版本中，通过.sync能实现双向数据绑定。但.sync在几个版本中被移除，尽管在2.3版本重新引入.sync修饰符，可这次引入只是作为一个编译时的语法糖存在。如果直接使用.sync修饰符来做双向数据绑定，会报警告信息。那么我们如何在组件中实现双向数据绑定呢？这一节我们就来学习这方面的相关知识。\n '}, {'link': 'https://www.w3cplus.com/javascript/all-type-of-loops-in-javascript-a-brief-explanation.html', 'title': 'JavaScript中的所有循环类型', 'description': '\n在英语中，Loop这个词指的是由弯曲的曲线所产生的形状。类似的概念，Loop这个词已经被用于编程中。如果你看到下图，你就会清楚的知道指令的流动是如何在一个循环的动作中不断重复的。在编程中，循环的概念并不是什么新概念，它们常常在编码时使用。虽然不是的语言其语法不同，但基本概念是相同的，根据需要重复相同的代码块。JavaScript增加了循环类型（包括各种类型的循环），并使其与它们的工作更加舒适和高效。在本文中，我们将学习JavaScript中所有可用的循环。\n '}, {'link': 'https://www.w3cplus.com/animation/loading-animation-component.html', 'title': ' 制作Loading组件', 'description': '\n最近项目中使用到一个Loading效果，其实是一个很简单的效果，主要是因为这个Loading出现在不同的场景之中，而且大小也不一致。对于这样的效果，往往都会想通过组件的方式来处理，其出发点就是更易维护，易扩展。当然，这对于前端的同学而言并没有什么复杂性，也没有多少技术含量。不过我还是希望把这个过程记录下来。\n '}, {'link': 'https://www.w3cplus.com/mobile/vw-layout-in-vue.html', 'title': '如何在Vue项目中使用vw实现移动端适配', 'description': '\n有关于移动端的适配布局一直以来都是众说纷纭，对应的解决方案也是有很多种。在《使用Flexible实现手淘H5页面的终端适配》提出了Flexible的布局方案，随着viewport单位越来越受到众多浏览器的支持，因此在《再聊移动端页面的适配》一文中提出了vw来做移动端的适配问题。到目前为止不管是哪一种方案，都还存在一定的缺陷。言外之意，还没有哪一个方案是完美的。事实上真的不完美？其实不然。最近为了新项目中能更完美的使用vw来做移动端的适配。探讨出一种能解决不兼容viewport单位的方案。今天整理一下，与大家一起分享。如果方案中存在一定的缺陷，欢迎大家一起拍正。\n '}, {'link': 'https://www.w3cplus.com/css/taobao-2018-year.html', 'title': '分享手淘过年项目中采用到的前端技术', 'description': '\n当你陪着家人嗑着瓜子，和家人一起看着春晚，顺便拿着手淘参与春晚抽奖互动的时候，杭州还有两百多程序员还奋战在一线当中。现在年也过完了，奖也抽了，红包也拿了。也该好好回来工作的时候了。这次很荣幸，自己能参与手淘过年项目（红包开光和春晚互动项目）的项目中，虽然仅仅参与其中的部分工作，但事后感觉有些东西还是应该总结总结的，为之后的项目做准备。那么简单的来总结一下，我自己在参与项目中用到的一些前端技术。\n '}, {'link': 'https://www.w3cplus.com/html/the-output-element.html', 'title': ' output元素', 'description': '\n昨天晚上，我在一个特别大的代码库中四处游荡，偶然发现了我们平时使用的normalize.css文件用于重置HTML元素在不同浏览器中的样式。在这个过程中，我发现了一个名为<output>的特殊元素的样式，这是我以前从未见过的，甚至从未听说过的。根据MDN上的相关描述，它代表计算或用户操作的结果，通常用于表单。让我感到尴尬的是，自从Chris在2011年在一篇文章中使用它之后，这并不是一个新的，花哨的附加功能。\n '}, {'link': 'https://www.w3cplus.com/vue/create-pagination-component.html', 'title': '使用Vue构建可重用的分页组件', 'description': '\nWeb应用程序中资源分页不仅对性能很有帮助，而且从用户体验的角度来说也是非常有用的。在这篇文章中，将了解如何使用Vue创建动态和可用的分页组件。分页组件应该允许用户访问第一个和最后一个页面，向前和向后移动，并直接切换到近距离的页面。大多数应用程序在用户每次更改页面时都会发出API请求。我们需要确保组件允许这样做，但是我们不希望在组件内发出这样的请求。这样，我们将确保组件在整个应用程序中是可重用的，并且请求都是在操作或服务层中进行的。我们可以通过使用用户单击的页面的数字触发事件来实现此目的。\n '}, {'link': 'https://www.w3cplus.com/javascript/debouncing-throttling-explained-examples.html', 'title': '实例解析防抖动和节流阀', 'description': '\n防抖（Debounce）和节流（Throttle）都是用来控制某个函数在一定时间内执行多少次的技巧，两者相似而又不同。当我们给 DOM 绑定事件的时候，加了防抖和节流的函数变得特别有用。为什么呢？因为我们在事件和函数执行之间加了一个控制层。记住，我们是无法控制 DOM 事件触发频率的。\n '}, {'link': 'https://www.w3cplus.com/css/gradient-for-every-line-of-a-para.html', 'title': 'CSS Tips：段落每行渐变色文本效果', 'description': '\n今天是回来上班的第一天，在Codepen上看到一个CSS写的效果。一个段落的每行文本是渐变效果。对于单行文本或单个词实现渐变填充效果并不是什么奇怪的事情，不过对于一个段落的每一行实现一个文本渐变填充的效果。估计还是会令很多人感到好奇。如果你是其中好奇的一员，请继续往下阅读，一探其中之究竟！\n '}, {'link': 'https://www.w3cplus.com/vue/bind-inline-style-and-class.html', 'title': 'Vue 2.0的学习笔记：在Vue中使用样式', 'description': '\n到目前为止，学习Vue的时候也写了相当的示例，但老实说，这些示例在视觉上并没有什么吸引人的地方。今天我们将学习如何将样式运用到我们的元素中，让事情变得更加有趣。首先我们将通过将内联样式添加到HTML的元素中，其实也就是我们以前所说的内联样式。其实在学习v-bind的时候，我们已经或多或少的接触了，如何给元素添加内联样式或者绑定类名添加样式。但这可能不够系统，为了更好的学习这方面的知识，这篇文章专门是学习这方面知识而做的笔记。希望对和我一样的初学者有所帮助。\n '}, {'link': 'https://www.w3cplus.com/javascript/data-type-conversion.html', 'title': 'JavaScript中数据类型转换', 'description': '\n最近在项目中使用到字符串转数字。刚开始使用的是Number()，结果可想而知。后来Review代码的时候，应该使用parseInt()。我当时在纳闷，为什么要使用parseInt()呢？结果老板甩过一句话，看规范去。现在项目可算暂告一段落，所以得自己整清楚Number()和parseInt()有什么区别。\n '}, {'link': 'https://www.w3cplus.com/javascript/ResizeObserver-api.html', 'title': 'JavaScript中的ResizeObserver', 'description': '\n这几天看@Anton Kosykh写的使用ResizeObserver实现响应式Vue的组件，让我刷新了对响应式组件的认识，也在这里第一次接触到ResizeObserver这个词。个人有一个习惯，对于任何新东西，我都充满好奇，有一股探知欲，要了解其中的原委。今天这篇文章就是自己对ResizeObserver的探知。\n '}, {'link': 'https://www.w3cplus.com/vue/how-to-create-filters-in-vuejs.html', 'title': 'Vue 2.0的学习笔记：Vue的过滤器', 'description': '\n在这篇文章里，我们将讨论一个叫过滤器的东西。过滤器提供了一种执行文本转换的方法，比如说都转成大写字母或者几乎做任何我们想做的事情。过滤器既可以在文本插值中使用，也可以在v-bind指令的表达式中使用。接下来，来学习Vue中有关于过滤器更多的知识。如何创建和使用它们。感兴趣的同学，接着一起往下看吧。\n '}, {'link': 'https://www.w3cplus.com/svg/creating-a-star-to-heart-animation-with-svg-and-vanilla-javascript.html', 'title': '用SVG和Vanilla JS框架创建一个“星形变心形”的动画效果', 'description': '\n在我写的这篇文章中, 讲述了如何用Vanilla JavaScript使动画顺滑的从一种状态过渡到另一种。最好先看下那篇文章，因为在这篇文章中我们要用到一些那篇文章中讲过的内容。例如例子的演示、各种时间函数的公式、当从结束状态过渡到初始状态时不使时间函数倒转过来。都在那篇文章中做了详细讲解。\n '}, {'link': 'https://www.w3cplus.com/javascript/querySelectorAll-vs-getElementsByTagName.html', 'title': 'JavaScript学习笔记：querySelectorAll 和 getElementsByTagName区别', 'description': '\n在《DOM的操作》一节中知道querySelectorAll()和getElementsByTagName()两个方法都是用来查找DOM元素的。通过上一节的学习，知道querySelectorAll()方法将获取到NodeList对象，getElementsByTagName()方法获取到的是HTMLCollection对象。虽然他们获取的都是DOM动态集合，但两者还是略有差异的。今天我们就来看这两者之间的区别。\n '}, {'link': 'https://www.w3cplus.com/javascript/the-simple-rules-to-this-in-javascript.html', 'title': 'JavaScript中this的使用规则', 'description': '\n在绝大多数情况下，函数的调用方式决定了this的值。this不能在执行期间被赋值，在每次函数被调用时this的值也可能会不同。在函数中this到底取何值，是在函数真正被调用执行的时候确定下来的，函数定义的时候确定不了。这篇文章介绍了JavaScript中this的一些规则，这些规则很简单。最重要的规则是，this决定调用一个函数时的回调是什么。下面简单的罗列一些这方面的规则。\n '}, {'link': 'https://www.w3cplus.com/css/combining-the-powers-of-sem-and-bio-for-improving-css.html', 'title': '结合SEM和BIO来改进CSS', 'description': '\n有人可能会说，CSS很简单，但是“容易”会导致代码混乱。在大家的眼里，使用像Sass或LESS这样的处理器会让事情变得更为简单。但事实上并不一定如此，如果你使用的不小心，你的CSS将变得更难处理，而不是更易处理。Sass？困难吗？Sass的嵌套就展示了这一点，使用不当，Sass的嵌套就是地狱。如果你的Sass代码看起来像这样的，那么你肯定可以使用SEM和BIO来改进你的代码。接下来我就将向你介绍这方面的CSS技术。\n '}, {'link': 'https://www.w3cplus.com/vue/vue-slot.html', 'title': 'Vue 2.0学习笔记：Vue组件内容分发（slot）', 'description': '\n在实际项目开发当中，时常会把父组件的内容与子组件自己的模板混合起来使用。而这样的一个过程在Vue中被称为内容分发。也常常被称为slot（插槽）。其主要参照了当前Web Components规范草案，使用特殊的<slot>元素作为原始内容的插槽。今天主要来学习如何在Vue中使用slot的功能。\n '}, {'link': 'https://www.w3cplus.com/css/sticky-headers.html', 'title': 'Sticky Headers', 'description': '\n在实际业务中经常碰到页头固定在浏览器的顶部，而在移动端上使用position:fixed坑多难搞。记得EFE团队分享过一篇《Web移动端Fixed布局的解决方案》博文，就是介绍如何解决移动端上实现页头固定的技术方案。除了文章中介绍的方案之外，@Brad Frost也推荐了几个JavaScript的解决方案，比如iScroll 4和Scrollability。使用fixed是一种固定页头的，但很多时候是希望实现Sticky Header的效果，说到这里大家可能会想起position新增的属性值sticky。虽然这个能实现我们想要的效果，但这个属性的支持性还是需要等待一段时间。\n '}, {'link': 'https://www.w3cplus.com/javascript/dom-dynamic-collection.html', 'title': 'JavaScript学习笔记：动态集合', 'description': '\nDOM是JavaScript中重要部分之一，在DOM中有一个动态集合。这个动态集合包含节点的集合（NodeList）、元素属性的集合（NamedNodeMap）和HTML元素的集合（HTMLCollection）。这三个对象都是类数组（Array-like），具有像数组一样的特性。更为重要的是，它们都是动态的，是有有生命有呼吸的对象，会实时更新查询DOM结构。今天我们学习的目标就是深究这三个动态集合之间的用法和联系以及区别。\n '}, {'link': 'https://www.w3cplus.com/javascript/operate-dom.html', 'title': 'JavaScript学习笔记：DOM的操作', 'description': '\n通过上一节的学习，对JavaScript中的DOM有了一定的认识。虽然对DOM中相关的知识点有一定的概念，但还是缺乏对DOM的实际操作。如果你仔细阅读过上一篇文章的话，你应该会发现，当时也提到了一些DOM操作相关的东西，比如，DOM的增、删、改和查等。那么今天我们就来看看这些方面的东西。\n '}]