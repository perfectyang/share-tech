{
    "list": [
        {
            "link": "https://www.w3cplus.com/javascript/intro-dom.html",
            "title": "JavaScript学习笔记：初识JavaScript的DOM",
            "description": "\nJavaScript知识一直都是自己的短板，近一年多来一直在致力于增加这方面的能力，也在W3cplus梳理了一些有关于自己学习JavaScript的笔记。加上最近学习Vue相关的技能，越发自己在JavaScript方面的能力还欠缺很多，所以这段时间一直在补习JavaScript中DOM相关的知识。希望对于初学者有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/CSS-Houdini-starry-sky.html",
            "title": "用CSS Houdini画一片星空",
            "description": "\n要问2018最让人兴奋的CSS技术是什么，CSS Houdini当之无愧，甚至可以去掉2018这个限定。其实这个技术在2016年就出来了，但是在今年3月发布的Chrome 65才正式支持。CSS Houdini可以做些什么？谷歌开发者文档列了几个Demo，我们先来看一下这几个Demo。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/methods-computed-and-watchers-in-vue-js.html",
            "title": "Vue中的方法，属性计算和观察者",
            "description": "\n我喜欢使用Vue的原因之一是，Vue中的methods、computed和watchers的使用是多么的有用。如果没有彻底的理解它们之间的区别，就很难充分利用Vue的功能。尽管如此，我看到的大多数人对这个框架感到困惑，他们也会其中的差异感到困惑，所以我们很有必要的去了解一下这方面的知。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/1-html-element-5-css-properties-magic.html",
            "title": "一个HTML元素和五个CSS属性的魔力",
            "description": "\n假设我告诉你，我可以使用一个HTML元素和五个CSS属性实现下图的效果。而且这个效果没有使用任何一行SVG代码，也没有使用图像（只是在html元素上使用了background设置了一个背景图片，只是为了表明这个元素有一些透明的部分），同样也没有使用JavaScript代码。你一定会觉得很神奇，对吧！有好奇之心，对于我们做前端的同学而言，应该一直都有，只有这样才能做出很多我们一直以为实现不了的效果，比如接下来要介绍的内容。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/vue-render-function.html",
            "title": "Vue 2.0学习笔记：Vue的render函数",
            "description": "\n前几天想学学Vue中怎么编写可复用的组件，提到要对Vue的render函数有所了解。可仔细一想，对于Vue的render函数自己只是看了官方的一些介绍，并未深入一点去了解这方面的知识。为了更好的学习后续的知识，又折回来了解Vue中的render函数，这一切主要都是为了后续能更好的学习Vue的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/vue-extend.html",
            "title": "Vue 2.0学习笔记：Vue.extend构造器的延伸",
            "description": "\n前段时间花了不少的时间在学习和了解Vue的组件，虽然中间浅尝了Vue组件的基础，体验了其魅力，但还是有很多深层的东西未掌握，也还不能非常灵活的使用Vue的组件。但这一切并不重要，随着后面的学习，我想会对Vue越来越熟悉。这两天在看Vue中的Vue.extend构造器，今天简单的对这方面的东西做个笔记。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/scooped-corners.html",
            "title": "CSS如何实现内凹角效果",
            "description": "\n记得@Lea Verou的《CSS Secrets》一书和前几天@Chris Coyier刚发的帖子都介绍了CSS怎么实现元素斜切口的效果。我也尝试着借助Vue的能力，把这种效果构建成一个Vue组件。我把这种效果定义为外切口。而今天将要聊的是与其刚好相反的一个效果：CSS如何实现内凹角的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/using-conic-gradients-css-variables-create-doughnut-chart-output-range-input.html",
            "title": "使用圆锥渐变和CSS自定义属性创建一个Range Input控制的环形图",
            "description": "\n最近我在 Codepen 上看到了一个例子，我的第一个想法是这个案例可以只用三个元素完成：一个容器，一个 range 类型的 input 和一个 output 。在 CSS 方面，涉及到使用一个把 CSS 自定义属性作为范围渲染参数的圆锥渐变函数 conic-gradient() 。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/7-tips-to-handle-undefined-in-javascript.html",
            "title": "使用JavaScript中undefined小技巧",
            "description": "\n在8年前，我刚开始学习JavaScript时，让我觉得有点奇怪的是，undefined和null同样代表空值。它们之间是否有明确的不同？它们看起来都定义为“空”，此外，比较null== undefined的结果是true。大多数的现代语言如Ruby, Python 或Java只有一个空值(nil或null)，而这，似乎才是合理的。在JavaScript中，当访问一个尚未初始化的变量或对象属性时，解释器会返回undefined。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/understanding-null-undefined-and-nan.html",
            "title": "理解JavaScript中null、undefined和NaN",
            "description": "\n当您开始学习JavaScript时，首先需要学习的是数据类型。只要我们讨论Number、String、Boolean和Object时，一旦涉及到null和undefined出现时，作为初学者要理解清楚他们就可能会有点混乱。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/trigonometry-you-must-know.html",
            "title": "三角函数在前端动画中的应用",
            "description": "\n我是个很懒的人，开发过程中经常有意无意地刻意避开数学相关的知识，你也知道解数学题非常枯燥无趣。平时写动画也尽量使用 CSS3 来实现，timing-function 随意选用，最多也就调一下 cubic-bezier，找到看着舒服的就行。但是怎样让动画更顺滑，写出更贴近自然的动画，说实话以前我没怎么考虑过。每次当动效设计师提出，能不能这样那样的时候，我会理所当然地予以否决。所以有很长一段时间，我非常羡慕那些能用 canvas 绘制很酷炫的动画的程序员。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/how-to-build-the-simple-camera-component.html",
            "title": "如何构建一个简单的摄像头组件",
            "description": "\n这篇文章主要跟着@David East的《HOW TO BUILD A SIMPLE CAMERA COMPONENT》 学习。学习如何使用MediaDevices API获取摄像头的访问权限，然后将相关的流通过video元素来播放。并且将视频流通过canvas元素转换为blob或base64格式的图片。并且依赖于自定义元素将这些功能封装成一个简单的摄像机组件。感兴趣的同学，请继续往下阅读。\n "
        },
        {
            "link": "https://www.w3cplus.com/javacript/building-your-own-javascript-modal-plugin.html",
            "title": "如何使用JavaScript构建模态框插件",
            "description": "\n作为一位Web开发人员而言，模态框（Modal）并不会陌生。就我个人而言，我更为熟悉的是怎么通过CSS来编写一个模态框以及怎么通过CSS给模态框添加一些动效。正好最近工作中也和Modal框杠上了。另外想更好的设计一个模态框用来满足业务需求的普遍性和实用性，甚至是达到可配置性。所以一直在探究模态框相关的知识，同时正好看到了@Ken Wheeler的教程，对于我这样的菜鸟，能很好的了角如何使用原生的JavaScript来构建一个可用的模态框插件，另外为以后如何使用Vue构建更为灵活的模态框组件打下坚实的基础。如果你对该文章感兴趣，或者你也正在加强JavaScript的学习和实战，欢迎继续往下阅读，或许对你有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/advanced-effects-with-css-background-blend-modes.html",
            "title": "CSS混合模式高级应用",
            "description": "\n首先要声明的是，我们在这篇文章中要了解的不是CSS混合模式如何使用，而是来一起探索CSS混合模式的一些高级运用以及它能做些什么，又会带来什么样的效果。操作过像Photoshop这样的图像处理软件的同学，对于图层混合模式一定不会感到陌生，但对于CSS中的混合模式，估计还是有不少的同学会感到陌生或者好奇。在这篇文章并不会介绍CSS的混合模式相关的属性怎么使用，而会探讨CSS的混合模式的一些高级运用，以及对应的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/in-alibaba-three-years.html",
            "title": "我在阿里的三年",
            "description": "\n时光如梭，转眼一逝，已经在阿里呆了三年了。在阿里有句话 —— 一年香，三年醇，五年陈。另外还有一句话就是说在阿里，要呆完三年才算是阿里人。自己非常的荣幸，有幸在阿里成功的呆了三年，也有幸成人 —— 成为阿里人。借着这次，对自己在阿里过去的三年光阴做一个简单的整理与总结。就算是对过去三年的复盘吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/relearn-the-front-end-techniques.html",
            "title": "聊聊《重学前端》",
            "description": "\n这两天票圈被@Winter大大在极客时间平台推出的《重学前端》刷屏了，而且在微信群和知乎上都有相关讨论。讨论中各种声音都有，可算是热闹了。今天我也凑个热闹，来聊聊我对这个课程的看法。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/DOM-manipulation-tutorial-series.html",
            "title": "DOM系列：DOM操作小结",
            "description": "\nDOM是JavaScript的基础之一，自己学习DOM的操作也有一段时间了，到今天为止DOM系列的教程刚好有十篇了，这部分都主要是围绕DOM操作的笔记。主要围绕DOM元素的增、删、改、查，DOM节点的操作以及元素尺寸、位置获取和设置等知识。今天这篇文章主要是小结一下。希望对一些像我这样的初学者有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/event-capturing-bubbling-javascript.html",
            "title": "DOM系列：DOM事件的传播",
            "description": "\n通过前面的DOM事件模型和事件绑定的姿势两节的学习，我们对JavaScript中的DOM事件有了一定的基础。但忽略了有关事件如何被触发的重要细节。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-values-and-units.html",
            "title": "图说 CSS：CSS 的值和单位",
            "description": "\nCSS 的值和单位是 CSS 另一个独立功能模块，到目前为止，该模块已到了 Level 4 阶段（CSS Values and Units Module Level 4）。今天我们就来聊聊这个模块里的内容。对于 CSSer 来说，对于 CSS 中的值和单位应该不会感到陌生，但大部分同学应该都会把精力集中于单位这一块，事实上也是如此，在这篇文章中，我们所涉及到的大部分内容也是聊单位这一块，对于值这一部分只会花一点点内容略为带过。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/using-event-bus-to-share-props-between-vue-components.html",
            "title": "使用事件总线共享组件之间的Props",
            "description": "\n默认情况下，Vue组件之间的通讯是通过Props来完成的。Props是从父组件向子组件传递属性。Props总是从父组件向子组件传递。随着应用程序复杂度的增加，你会慢慢遇到所谓的Prop Drilling，这里有一篇文章介绍了这方面的东西，虽然是React方面的，但也适用于Vue。Prop Drilling是将props向下、向下、向下传递给子组件的想法 —— 正如你想象的那样，这通常是一个乏味的过程。因此，繁琐的Prop Drilling可能是一个复杂的潜在问题。另一个与不相关的组件之间的通讯有关。我们可以通过使用事件总线来解决这些问题。什么是事件总线？这个名字本身就是一个总结。这是一个组件将props从一个组件传递到另一个组件的一种运输方式，无论这些组件伴于树的哪个位置。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/where-lines-break-is-complicated-heres-all-the-related-css-and-html.html",
            "title": "CSS中最全的换行处理方式",
            "description": "\n在Web页面上常常可以看到某个元素内部有一个很长的单词，元素的宽度不足以容纳它。一个常见的现象就是有一个很长的URL。这会发生什么呢？这取决于CSS，那么CSS如何控制布局，以及CSS如何让文本更合理的方式展示。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/style-and-class.html",
            "title": "DOM系列：样式和类",
            "description": "\n对于任何一位Web开发者而言，处理CSS样式很多时候还是会借助JavaScript。简单的说，我们会碰到一些交互（或UI效果的变化）都会通过JavaScript来处理style或类。那么今天我们将要学习的是如何通过JavaScript来控制样式和类名，在深入讨论JavaScript处理样式和类的方法之前，我们需要知道在Web页面中元素的样式处理通常有两种方式。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/create-calculator-with-css-grid.html",
            "title": "构建一个计算器：UI界面设计",
            "description": "\n从这篇文章开始，将会花几篇文章的篇幅来介绍如何构建一个在线的计算器，将前面学习的一些知识串在一起，通过实战加强对理论知识的理解。实现计算器主要分为两个部分，一个是构建计算器的UI，另一个通过JavaScript实现计算器的功能。在完成这两个部分内容的学习，建议您需要对下面的几个知识点有所了解： 网格布局和 渐变。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-custom-properties-strategy-guide.html",
            "title": "CSS自定义属性使用指南",
            "description": "\nCSS自定义属性有很大的潜力可以改变我们编写和组织 CSS 的方式，并且在一定程度上改变 JavaScript 与 UI 组件的调用方式。我并不关心语法和它们的工作方式（为此，我建议你阅读“《是时候开始使用自定义属性》这篇文章。同时我想更深入地研究如何充分使用 CSS 自定义属性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/fonts-module-level4-color-font.html",
            "title": "CSS 字体新玩法之彩色字体",
            "description": "\nCSS Fonts Module Level 4 工作草案中的一大新特性即为 Color Font 的支持，来了解一下吧!如果你们设计师想在某些特别的专题活动中使用下图的字体作为标题字体进行展现，怎么办呢？做成图片咯。然后你可能会遇到这几个问题：不同屏幕下的适配，要是只做一种尺寸的图，放大或缩小后的效果都不太好。直接做成 SVG？好像不能复制到 Word 里面加粗啊，也就是说，这种做法使得这些“文字”本身失去了真实文字该有的能力。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-border-radius-can-do-that.html",
            "title": "CSS border-radius 能做什么？",
            "description": "\n在CSS中，使用border-radius指定八个半径值时，可以创建不同的形状。先来看一个为该特性制定的工具。@Rachel Andrew今年在苏黎世的前端会议上谈到了CSS Grid布局的优势。在她演讲的最后，她提到了一个在我脑海中挥之不去的CSS 属性:通过border-radius可以使图像有良好的形状效果。听完这个演讲之后，我认为你肯定可以创造出更多的圆圈，并开始深入挖掘使用border-radius可以做什么？\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/vue-transition.html",
            "title": "Vue 2.0学习笔记：Vue的transition",
            "description": "\n动效在Web中一直是一个有争议的问题。动效做得好有助于在你的Web程序上锦上添花，甚至是留住你的用户，也可以具有较好的用户体验；反之，如果动效运用的不好，会给用户带来一种反感，让用户迅速地离开你的应用。怎么提供更友好的动效，并不是今天我们要讨论的重点，我们要讨论的是：在Vue应用程序中如何添加动效？在Vue中，提供了多种方法来给你的运用程序添加动效，比如CSS的transition和animation动效，以及在Vue的生命周期的钩子函数中操作DOM。甚至你还要以使用第三方动画库，比如GSAP或Velocity.js来制作动效。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/how-you-can-use-simple-trigonometry-to-create-better-loaders.html",
            "title": "如何使用简单的三角函数创建Loading效果",
            "description": "\n在这篇文章中，将使用三角函数的基本概念，重新创建一个更平滑的Loading效果。我知道这听起来很奇怪，但请相信我，这里一定会很有趣。你会惊讶地发现，要编写的代码很少。当然，你可能会担心三角函数相关的知识，事实上是你不需要知道三角学或数学你能理解这篇文章。我将会解释这里的每个圆相关的事情。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-selectors-level-4.html",
            "title": "初探CSS 选择器Level 4",
            "description": "\n在开始聊CSS选择器Level 4（Selectors Level 4）之前，先要明确一个简单的概念。时至今日，在CSS的世界之中再不会有大版本的称谓，比如以前大家熟悉的CSS2.1、CSS3。现在的CSS都只会以CSS模块的版本来进行区分，比如我们今天要聊的CSS选择器，其最新版本就是：CSS Selectors Level 4。在CSS Selectors Level 4中为选择器增添了不少的新特性，当然这些新特性有的已得到浏览器的支持，有的只得到部分主流浏览器的支持。所以接下来，花点时间学习一下，以备后用。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/dry-switching-with-css-variables-the-difference-of-one-declaration.html",
            "title": "如何通过CSS自定义属性给CSS属性切换提供开关",
            "description": "\nCSS自定义属性相关的教程在互联网上可以说是铺天盖地，从简单的介绍，到使用指南的整理，以及相关的经验之谈等等。时至今天而言，CSS的自定义属性是一项很成熟的CSS特性，在很多方面都可以给前端开发者带来诸多的益处。而且在现代浏览器中也得到了较好的支持。当然，虽然CSS自定义属性已得到很好的支持，但很多同学还在担心其是否可以运用于生产环境，甚至也有不少的同学还在排斥该特性。虽然如此，我还是想花点时间再和大家聊聊今天的主题。这个主题来自于@Ana tudor大神在去年年底发布的两篇文章，可以说是把CSS自定义属性运用的淋漓尽致。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/practical-css-scroll-snapping.html",
            "title": "实战CSS Scroll Snapping",
            "description": "\n如果考虑周全，滚动捕捉可以是一个有用的设计工具。CSS Scroll Snap Points允许你连接到浏览器的本机滚动交互，因此你的界面感觉无缝且平滑。随着JavaScript API的出现，这些功能将变得更加强大。CSS Scroll Snap（CSS 滚动捕捉）允许你在用户完成滚动后多锁定特定的元素或位置。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/style-button-right-way.html",
            "title": "如何更好的控制按钮样式",
            "description": "\n在Web页面或应用程序中都可能会有按钮的出现，甚至很多时候链接的样式看起来也像个按钮。那么我们应该怎么来美化按钮的样式呢？在这篇文章中，我们一起来聊聊按钮样式应该怎么才能更好的控制。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/how-to-create-data-driven-user-interfaces-in-vue.html",
            "title": "在Vue中如何用数据来驱动用户界面",
            "description": "\n虽然我们通常知道在应用程序中构建大多数视图（View）时需要哪些组件（Component），但很多时候我们并不知道这些组件在运行时是什么。这意味着我们需要基于应用程序状态、用户首选项或API的响应来构建一个页面。一个常见的情况是构建动态表单，其中需要整清楚的是：组件是由JSON对象配置的，还是基于用户的答案而更改的字段来构建。所有现代JavaScript框架（比如我们熟悉的Vue、React等）都有处理动态组件的方法。这篇文章将向您展示如何在Vue中实现它。JavaScript为上述场景提供了一个非常优雅和简单的解决方案。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/talk-attribute-selectors.html",
            "title": "再聊CSS的属性选择器",
            "description": "\n属性选择器是很强大很神奇的。很多时候可以帮助你摆脱一些棘手的问题，可以让你避免类名的添加，甚至还可以指出代码中的一些问题。属性选择器是复杂而又强大的，但不用担心，因为它也是易于学习和使用的。在本文中，将会学习到CSS属性选择器的强大功能以及如何在实际工作中运用它。并提供了一些关于如何使用属性选择器的一些个人想法。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/currentcolor-vs-custom-properties.html",
            "title": "currentColor与CSS自定义属性之间的差异",
            "description": "\n变量对于CSS而言是这两年大家关注的一个话题。对于变量而言，最早是出于CSS的一些处理器语言当中，比如Sass、LESS之类的。随着CSS的发展，变量的概念也被引入到CSS中。时至今日，在CSS中的变量不被称作变量，而被称为CSS自定义属性。该特性让我们维护CSS、编写CSS变得更易。而事实上呢？在CSS最早的变量之一是currentColor。该特性也可以更好的帮助我们编写CSS和扩展CSS。那么今天我们来开另一个话题，currentColor和CSS自定义属性又有何差异呢？接下来的内容，我们就来一起探讨这方面的细节。currentColor和自定义属性之间还是存在一些有趣的区别。这两个都是CSS中动态属性的例子，但是它们的解析方式在一些非常重要的方面还是有所不同的。至于为何不同，接下来的内容将向大家揭开。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/understanding-degrees-on-the-web.html",
            "title": "聊聊Web中的度数单位",
            "description": "\n说到度数，你可能已经从生活中了解了很多关于他们相关的知识。在学校里学习几何课，做基本的木工活，进入外层空间或在图像编辑器中旋转一个元素等，都会有角度相关的身影。在现实世界中，度数几乎是测量角度的单位。它在Web中同样是一个受欢迎的角色，也适用于我们将遇到的各种场景。幸运的是，在现实世界中的度数和虚拟世界中的度数有很多相似之处，所以在这篇文章中将来学习一些有关于度数相关的知识，然后深入了解一些细节。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/drawing-images-with-css-gradients.html",
            "title": "使用CSS渐变绘图",
            "description": "\n这里所说的绘制是指CSS图像，即使用HTML元素和CSS属性绘制的图像。它们看起来像是Adobe Illustrator绘制的svg，但它们是在浏览器中渲染出来的。我所见过的一些技巧是使用border、box-shadow和clip-path来绘制图像。如果你在Codepen搜索“daily css images”，你会发现有很多优秀的案例。我自己也画了一些，也做过一些极限挑战，就是在一个元素上使用background和尽量使用其他属性来绘制图像。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/lazy-loading-images-using-intersection-observer.html",
            "title": "使用 Intersection Observer 实现图片延迟加载",
            "description": "\n如果你还没有机会看过，@Paul Lewis 发布了一个精彩的视频系列，演示了如何构建一个媒体播放器以及渐进式 Web 应用（Progressive Web App）的一些重要功能。在 YouTube 上的这一系列视频 包括了他在建立网站时的各个部分。观看开发者展示他们工作的视频绝对是我最喜欢的学习新事物的方式！\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/scoped-styles-vs-css-modules.html",
            "title": "Vue中的作用域CSS和CSS模块的差异",
            "description": "\n现代Web开发中的CSS离完美还差得远，这并不奇怪。现在，项目通常是相当的复杂的，而CSS样式又是全局性的，所以到最后总是极容易地发生样式冲突：样式相互覆盖或隐式地级联到我们未考虑到的元素。为了减轻CSS存在的主要痛点，我们在项目中普遍采用BEM的方法来。不过这只能解决CSS问题中的一小部分。对我们来说是幸运的，社区已经开发出了可以帮助我们更彻底地解决问题的解决方案。你可能已经听说过CSS Modules、Styled Componetns、Glamorous或JSS。这些只是我们今天可以添加到项目中的一些最流行的工具。如果你对这个话题感兴趣，你可以查看这篇文章：@Indrek Lasn详细介绍了CSS in JS的全部思想。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/modifying-document.html",
            "title": "DOM系列：修改DOM",
            "description": "\n通过前面的学习，我们都知道，DOM并不一定要由存在于HTML中的元素组成。我们仅需要使用几行JavaScript代码就可以将HTML元素添加到你的DOM中。而且你也有能力移动周围的元素，甚至删除它们。除了这一切之外，我们还可以动态地创建和修改DOM中的元素，而且这一DOM操作也是很重要的一个特性，同时也能满足Web网站或应用程序的一些操作。在今天的教程中，我们将继续学习DOM中的一些基础知识。在今天中，我们将研究如何创建元素、删除元素和克隆元素等。简单的说，今天的内容涉及到一些DOM的修改。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/DOM-event-binding.html",
            "title": "DOM系列：事件绑定的姿势",
            "description": "\n在上一节中，学习和了解了DOM事件模型，了解到JavaScript中每种事件模型都有其自己独具的特性。不同的事件模型中，绑定DOM事件的姿势也将略有差异，在这一节中，我们一起来学习JavaScript中DOM事件是如何绑定的。在JavaScript中，给DOM元素绑定事件主要分为两大类：HTML中直接绑定和JavaScript中绑定。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/viewport-device-scroll-document-size.html",
            "title": "DOM系列：视窗、设备、滚动条和文档尺寸",
            "description": "\n在上一节中，学习了JavaScript如何获取和设置元素位置和尺寸相关的方法，另外在JavaScript的学习笔记当中也学习了视窗宽度、位置与滚动高度相关的JavaScript方法与属性。今天继续来学习DOM中相关的知识，这篇文章将学习视窗、设备、滚动条和文档等相关的尺寸。其实在前两篇文章中都有涉及这些知识，为了让DOM系列相关的知识更完善，所以再花点时间整理一些这方面的技术点，加强印象。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/empty-vs-blank.html",
            "title": "CSS伪选择器：:empty vs :blank",
            "description": "\n前段时间@Zell Liew的博客深入的介绍了CSS中伪选择器:empty和:blank相关的知识。那么:empty和:blank究竟有什么作用，又在什么场景下使用呢？今天我们来一起看看，它们怎么使用，更应该应用在哪个场景之下呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/event-bus.html",
            "title": "Vue 2.0学习笔记：事件总线（EventBus）",
            "description": "\n许多现代JavaScript框架和库的核心概念是能够将数据和UI封装在模块化、可重用的组件中。这对于开发人员可以在开发整个应用程序时避免使用编写大量重复的代码。虽然这样做非常有用，但也涉及到组件之间的数据通讯。在Vue中同样有这样的概念存在。通过前面一段时间的学习，Vue组件数据通讯常常会有父子组件，兄弟组件之间的数据通讯。也就是说在Vue中组件通讯有一定的原则。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/dom-attributes-and-properties.html",
            "title": "DOM系列：Attribute和Property",
            "description": "\n这两天一直在看DOM元素的attribute和property，简单让人晕。从直译上，我一开始都理解为“属性”，而且对于我这样的新手，将两者混淆在一起，傻傻的分不清楚。后来经过大大们的指点，知道两者是不同的东西，但两者之间又有紧密的联系。为了能更清晰的整明白两者的关系与不同，所以把自己理解和搜集的资料理了一下，希望对新手有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/different-types-of-observers-supported-by-modern-browsers.html",
            "title": "现代浏览器支持的不同类型的观察者",
            "description": "\n观察者（Observer）是一个观察或注意事物的程序。观察者可以观察浏览器中发生的某些活动并做出相应的响应。观察者类似于狗，观察某些活动，并提醒我们发生了一些不寻常的事情。一旦我们为某些活动获取到狗发出的警告时，我们有责任采取相应的行动。现代浏览器支持的四种不同类型的观察者。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/taobao-bar-design.html",
            "title": "手淘Web页面Bar和纵向适配的设计",
            "description": "\n记得在去年双11的互动页面中，我们折腾了一波iPhone8、iPhone8 plus和iPhone X的适配，特别是iPhone X刘海区域的适配。针对这方面的页面适配，沉淀出相应的适配方案。而今年的双11期间，苹果又推出了iPhone XS、iPhone XR和iPhone XR Max以及众多的安卓刘海设备。言外之意，前端在这方面的适配变得越来越复杂。面对众多场景，我们应该怎么去面对呢？接下来聊聊我在今年双11的主互动玩法中是怎么处理的。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/component-communication.html",
            "title": "Vue组件通讯",
            "description": "\n使用Vue构建组件容易，但对于初学者要掌握Vue组件中的通讯还是有一定的难度。比如说，父组件如何向子组件通讯？子组件又是如何向父组件通讯？兄弟组件又是怎么通讯？这些方面都是有关于组件通讯相关的知识。而且掌握Vue组件之间的通讯方式还是掌握Vue组件的另一种能力。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/node-properties-type-tag-and-contents.html",
            "title": "DOM系列：DOM节点属性",
            "description": "\n经过前几篇文章的学习，对DOM有一定的了解。但这仅仅是DOM一些基础性的知识，如果要对DOM更了解，需要更深入地了解DOM节点。在这一节中，咱们将围绕DOM的节点属性、标签和内容来展开。这样我们就可以更进一步的了解它们是什么？以及它们最常的属性。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/get-element-position-and-size-using-javascript.html",
            "title": "DOM系列：获取元素位置和尺寸",
            "description": "\n对于每一位Web开发的同学而言，在CSS的世界当中，每一个元素都是一个盒子，都有描述盒子大小和位置的相关属性。比如CSS的盒模型相关的属性和position相关属性。不过今天我们学习和聊的不是CSS的世界，而是来学习和聊JavaScript中怎么获取元素尺寸和位置。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/animating-layouts-with-the-flip-technique.html",
            "title": "FLIP技术给Web布局带来的变化",
            "description": "\n用户界面是最直观的呈现给用户，而其中动画在这方面又扮演着重要的角色。正如@Nick Babich所说:动画将用户界面带入生活。而且，UI动画在用户体验方面也是重要的一环。特别是移动端开发的同学更清楚这一点。移动应用中的UI动画是体验的核心部分之一，而不是事后的想法。可是呢？事实上我们经常遇到的Web运用程序或App只是从一个视图跳到另一个视图，并没有给用户足够多的时间来处理当前环境中刚刚发生的事情。同时，很多同学都认为，动画通常在用户体验方面仅仅是锦上添花，并且被认为是不必要的、过渡的或太复杂的，无法实现的，也是因为这些原因，UI动画在很多Web应用中被忽略了。更糟糕的是，缺乏意义的动画会给自己产品体验方面带来损害。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/Illustrated-CSS-details-and-cases-chr2-cascade-and-inherit.html",
            "title": "图解CSS：CSS层叠和继承",
            "description": "\nCSS中有三个概念是学习CSS必须要掌握的：层叠、继承和权重。今天我们主要来了解CSS中的层叠和继承，对于CSS权重这一部分将放到CSS的选择器中来介绍，因为这一部分和CSS的选择器耦合的更为紧密。不管是初学者还是有一定工作经验的同学，花点时间阅读这篇文章都是很有必要的，这样有利于你对CSS更清楚的了解和理解。感兴趣的同学请继续往下阅读。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-state-of-changing-gradients-with-css-transitions-and-animations.html",
            "title": "使用CSS transition和animation改变渐变状态",
            "description": "\n到目前为止，CSS的渐变属性linear-gradient和radial-gradient已经是很成熟的CSS特性了，而且repeating-linear-gradient和conic-gradient也越来越成熟。CSS渐变特性对于我们的帮助已经非常强大了，它们可以帮助我们绘图、创建图片占位符、制作环形进度条等等。另外还可以通过transition和animation让渐变动起来。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/managing-state-in-vue-js.html",
            "title": "Vue中的状态管理",
            "description": "\nVue中管理应用程序的状态有多种不同的方法，了解状态管理也是学习Vue知识的基础部分，也是很重要的一部分。从这篇文章开始，我们来开始学习Vue应用程序中的状态管理。在这篇文章中会先简单的介绍Vue应用程序中状态管理的大多数方法。希望对Vue的学习者有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/searching-elements-dom.html",
            "title": "DOM系列：getElement* 和 querySelector*",
            "description": "\n在上一节中，我们学习了DOM树和遍历DOM相关的知识。可以通过firstChild（或firstElementChild）、lastChild（或lastElementChild）、parentNode(或parentElement)、children、previousSibling（或previousElementSibling）、nextSibling(或nextElementSibling)获取到你想要的DOM元素。如果你够仔细的话，可以看到他们之前都是存在相互关系的，要么是兄弟关系，要么是父子关系。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-design-and-adapter.html",
            "title": "移动端上的设计和适配",
            "description": "\n面对于不同移动设备，特别是针对于屏幕高度的设计和适配，一直是困扰着视觉和前端。特别是设计师和前端开发人员之间的协调，沟通的成本也随着增加。那么这篇文档，主要是用于移动端设计和适配（针对屏幕高度方面），希望通过文档的形式能减少设计师和开发人员之间的一些沟通成本，同时让前端开发人员用最低的时间成本来完成终端设备的UI适配工作。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/cssom-css-typed-om.html",
            "title": " 初探CSS对象模型（CSSOM）",
            "description": "\n今年花了不少的时间在学习DOM相关的知识，经过这段时间的学习，可以通过一些JavaScript的API操作和处理Web页面上的HTML元素。在Web中除了DOM之外还有另外一个对象模型：CSS对象模型（即CSSOM）。或许你已经在项目中已经用过了，只不过没有意识到这一点而以。今天这篇文章中，我们主要来一起探讨有关于CSSOM相关的特性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/understanding-logical-properties-values.html",
            "title": "理解CSS的逻辑属性和值",
            "description": "\n2017年5月18日，W3C的 CSS工作组（CSS Working Group） 发布了 CSS逻辑属性和值（CSS Logical Properties and Values Level 1） 的首份工作草案（First Public Working Draft）。不同的书写模式（writing mode）中，可以抽取出共性的抽象概念（如开始位置，或行），这些逻辑抽象概念需要在不同书写模式下映射到左或右、上或下等物理的概念上。一些CSS布局可能依赖这些共性的逻辑概念。该 CSS 模块给出了用于通过逻辑方式（而不是基于物理坐标、书写方向和维映射等）控制布局的逻辑属性和取值（logical properties and values）。这个模块来源于CSS21中关于逻辑属性和值的特性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/icon-align-to-text.html",
            "title": " Icon和文本对齐方式的探索",
            "description": "\n在Web中很多场景中都会使用到Icon，那么就会面临Icon和文本对齐的处理。而这个对齐效果的处理又不是一件轻易的事情，特别是面又众多不同移动终端的情形之下。那么今天这篇文章就来和大家一起探讨一下这方面的话题。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/debouncing-throttling-explained-examples.html",
            "title": "实例解析防抖动和节流阀",
            "description": "\n防抖（Debounce）和节流（Throttle）都是用来控制某个函数在一定时间内执行多少次的技巧，两者相似而又不同。当我们给 DOM 绑定事件的时候，加了防抖和节流的函数变得特别有用。为什么呢？因为我们在事件和函数执行之间加了一个控制层。记住，我们是无法控制 DOM 事件触发频率的。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/add-rules-stylesheets.html",
            "title": "DOM系列：动态添加CSS样式规则",
            "description": "\n在上一节中学习了如何通过JavaScript来修改CSS样式。简单地说：查询CSS样式（即计算样式），设置单个样式（设置的是行内样式），设置多个样式（通过类来设置样式）。事实上我们还可以通过脚本化CSS这种技术来控制样式。这种方式，可以让我们的页面更加的快速和高效。那就是直接通过JavaScript动态地添加和删除样式表中的某些样式，用来取代不断地查询DOM元素，并应用各种样式。接下来咱们就来学习脚本化样式表相关的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/the-trick-to-viewport-units-on-mobile.html",
            "title": "视窗单位在移动端上的使用技巧",
            "description": "\n视窗单位一直都存在争议，部分原因是因为移动端浏览器对如何实现视窗单位有着自己的看法，这样就让本来简单的事情变得更加复杂化。一个典型的示例是：vw的计算是否要包含浏览器的滚动条？那么网站的导航或页面控件呢？这些应该算在计算中吗？还有一些设备本身的物理属性（比如iPhone X的刘海）是不容忽视的。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/vue-plugins.html",
            "title": "Vue 2.0学习笔记：如何创建Vue插件",
            "description": "\nVue插件是向应用程序添加全局特性的一种强大而又简单的方法。它有多种用途，从分发应用程序范围的组件到向应用程序添加路由和不可变数据存储等附加功能。从概念上讲，Vue插件是非常简单。它实际上只是一个带有install函数的对象，它接受两个参数：全局的Vue对象和一个包含用户定义选项的对象。然而，一个像这样简单的Vue插件仍然可以得到相当大的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/dom-tree-and-traversals.html",
            "title": "DOM系列：DOM树和遍历DOM",
            "description": "\n上一节，咱们整理了DOM系列中的第一篇，主要介绍浏览器与DOM相关的知识。从标题中我们可以看出来，今天所要学的东西包含两个部分，第一部分是DOM树，第二部分是遍历DOM。如果你和我一样对于DOM树和遍历DOM是初次接触，那个人建议您花点时间好好看看这两部分的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/what-s-new-in-css.html",
            "title": "有关于CSS的一些新东西",
            "description": "\n上个月2018年TPAC会议刚结束没多久，@Rachel Andrew在Smashing Magazine上面就发表了一篇文章《The CSS Working Group At TPAC: What’s New In CSS?》介绍了CSS中将会有的一些新东西，同时我们国内@安佳 大大也发了一篇有关于参加该会议的总结。就在这个月，@Rachel Andrew在瑞典.马尔默举办的2018年Øredev 开发者大会上分享了一个话题就是有关于CSS的一些新东西，同时她还分享了另一个话题《2019年布局有哪些工具包》。我阅读了@Rachel Andrew在该会议上分享的两个话题，但今天主要想根据@Rachel Andrew分享的第一个话题做一些总结：CSS有哪些新东西。希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/create-patterns-with-css-doodle.html",
            "title": "一个制作Web图案的组件：css-doodle",
            "description": "\nWeb中使用一些图案做为背景图案是一种时常可见的，早期一般都是通过图片来完成。直至CSS一些新特性更趋成熟和稳定的时候，会通过CSS的相关技术，比如CSS的渐变属性配合background-size之类的来做一些复杂而又美观的Web图案，运用于background-image之中。随着前端技术不断的革新，不久前看到一个生成Web图片的组件：<css-doodle /> —— 使用CSS绘制图案的Web组件！\n "
        },
        {
            "link": "https://www.w3cplus.com/css/new-scroll-features-that-change-the-user-experience.html",
            "title": "改变用户体验的滚动新特性",
            "description": "\n@evilmartians的《滚动的特性》一文介绍了目前有关于滚动相关的特性。今天我想花点时间重新整理一下，时至今日，CSS中为浏览器滚动提供的相关新特性究竟能给用户带来哪些新的体验。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/practical-use-of-components-and-mixins-in-vue-js.html",
            "title": "实战Vue组件和Mixins",
            "description": "\n这篇文章主要帮助我们深入的学习Vue的组件和mixins，它们帮助你扩展基本的HTML元素，用来封装可重用的代码。在较高的层次上，组件是定制的元素，Vue的编译器附加了行为，而mixins为你提供了一个保持代码可重用性的方式，从而使你的代码保持干净和易于维护。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/browser-and-the-dom.html",
            "title": "DOM系列：浏览器与DOM",
            "description": "\n最近回过头来在学习JavaScript中的DOM知识，随着学习进度的向前推移，越发感觉DOM知识点较多。为了能更好的系统了解清楚DOM相关的知识，我打算重新将DOM的学习划入到DOM系列当中。那么今天将是这个系列的第一篇。你将了解到DOM是什么，为什么它有用，以及如何与将来在教程中所做的一切联系起来。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/new-box-model-width-logical-properties.html",
            "title": "CSS的逻辑属性对盒模型带来的变化",
            "description": "\n在《理解CSS的逻辑属性和值》一文中，我们对CSS逻辑属性和值（CSS Logical Properties and Values Level 1）有所了解。事实上对于广大前端开发者而言，自从Web诞生以来，就习惯了使用用物理CSS属性。比如上、右、下和左，映射到CSS的盒模型就是margin、padding和border的top、right、bottom和left设置元素。但随着CSS的书写模式特性的出现，上、右、下和左的概念在某种程度上已经失去了其意义。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/loading-animation-component.html",
            "title": " 制作Loading组件",
            "description": "\n最近项目中使用到一个Loading效果，其实是一个很简单的效果，主要是因为这个Loading出现在不同的场景之中，而且大小也不一致。对于这样的效果，往往都会想通过组件的方式来处理，其出发点就是更易维护，易扩展。当然，这对于前端的同学而言并没有什么复杂性，也没有多少技术含量。不过我还是希望把这个过程记录下来。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/understand-css-stacking-context-order-z-index.html",
            "title": "聊聊CSS中的层叠相关概念",
            "description": "\n最近在纠结程序语言和设计语言中的一些概念，整到层叠上下文和图层相关的事情，然后发现自己对于CSS中的层叠相关的知识并没有自己想象中那样理解的透彻。因此花了一段时间重新梳理了一下相关的知识。如果想要理解清楚CSS中的层叠相关的知识点，我们就很有必要先了解一些重要的概念：文档流（Normal Flow）、格式化上下文（Formatting Context）、层叠上下文（Stacking Context）、层叠水平（Stacking Level） 和 层叠顺序（Stacking Order）。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/vue-mixins.html",
            "title": "Vue2.0学习笔记：Vue中的Mixins",
            "description": "\n在项目开发的时候，常会碰到这样的一种现象：有两个组件非常相似，比如较为熟悉的Modal、Tooltip和Popover，它们都具有同样的基本函数，而且它们之前也有足够的不同。很多时候，就让人很难做出选择：是把它们拆会成多个不同的组件呢？还是只使用一个组件，创建足够的属性来改变不同的情况。在Vue中，对于这样的场景，官方提供了一种叫混入（mixins）的特性。使用mixins允许你封装一块在应用的其他组件中都可以使用的函数。如果被正确的使用，他们不会改变函数作用域外部的任何东西，所以多次执行，只要是同样的输入，总是能得到一样的值。既然Vue的mixins这么优秀，那应该怎么使用呢？今天我们的目的就是学习如何在Vue的项目中使用mixins。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/understanding-the-dom.html",
            "title": "理解DOM",
            "description": "\nDOM是Document Object Model的简称，是网站具有交互性的重要组成部分。它是一个接口，允许编程语言操作网站的内容、结构和样式。JavaScript是浏览器中连接到DOM的客户端脚本语言。欲要更好的操作好Web网站，我们就很有必要的理解DOM。而且这也是学习JavaScript很重要的部分之一。接下来我们将从以下几个部分来展开对DOM的理解和学习。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/how-to-use-web-image.html",
            "title": "探索Web上图片使用方式",
            "description": "\n图片在Web上的使用占比已经非常的高，特别是在手淘互动这样的环境之下，我们每一个项目的图片使用量都非常的大。如果能把图片用好，的确是件不容易的事情，而且面对的挑战也不小。经常会碰到有关于图片如何加载，如何适配，如何优化等等。另外在移动端开发中，很多同学在Web上使用图片的方法一般都是通过<img>标签和CSS的background-image属性来处理。也正因如此，很多同学却忘记了这两者应该如何？怎么使用又是最优的。甚至有很多前端同学都已经忘记了这两者的差异是什么？加上Web的技术不断革新，事实上除了前面提到的加载图片的方式之外，还有其他的方式，比如HTML5的<picture>（虽然这个元素标签曾经一度废弃过，但后来又添加回来了）。就算还是使用img标签，也有了新的优化，比如img的srcset属性。那么面对这么多的变化，以及使用的场景，我们应该怎么来选择，才是最优的选择。今天这篇文章，我们就来一起探讨一下这些东西，希望大家会喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/5-hot-new-css-features-and-how-to-use-them.html",
            "title": "五个最新的CSS特性以及如何使用它们",
            "description": "\n虽然CSS简单，但CSS是一门非常有意思的语言，CSS每年都有变化，而且都有不同的博主都在不同的时间段总结一些CSS的新特性。虽然这些新特性无法立刻得到众多浏览器的支持，但总是随着时间的发展，这些特性都会得到浏览器的支持。哪怕未得到支持，也有一些方法让浏览器支持，比如最为出外的cssnext，就可以让很多未来的CSS特性就立马使用，并且不用花太多时间来考虑浏览器的兼容性。今天这篇文章,@Daniel Crisp就当下的CSS的新特性做了一个简单的总结 —— 五个最新的CSS特性（事实上这些特性，对我而言并不是新特性），并且用示例告诉大家怎么使用这些特性。那么接下来，咱们看看这五个新特性是什么？以及怎么使用。如果您感兴趣，欢迎继续往下阅读。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/ResizeObserver-api.html",
            "title": "JavaScript中的ResizeObserver",
            "description": "\n这几天看@Anton Kosykh写的使用ResizeObserver实现响应式Vue的组件，让我刷新了对响应式组件的认识，也在这里第一次接触到ResizeObserver这个词。个人有一个习惯，对于任何新东西，我都充满好奇，有一股探知欲，要了解其中的原委。今天这篇文章就是自己对ResizeObserver的探知。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/scroll-to-the-future-modern-javascript-css-scrolling-implementations.html",
            "title": "滚动的特性",
            "description": "\n一些（网站）滚动的效果是如此令人着迷但你却不知该如何实现，本文将为你揭开它们的神秘面纱。我们将基于最新的技术与规范为你介绍最新的 JavaScript 与 CSS 特性，将使你的页面滚动更平滑、美观且性能更好。大多数Web页面不适合单屏显示，所以Web页面出现滚动条被所有用户认为是理所当然的。对于前端开发人员和视觉设计来说，跨浏览器提供良好的滚动体验，同时符合设计，无疑是一个挑战。尽管 Web 标准的发展速度远超从前，但代码的实现往往是落后的。下文将为你介绍一些常见的关于滚动的案例，检查一下你所用的解决方案是否被更优雅的方案所代替。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/combining-the-powers-of-sem-and-bio-for-improving-css.html",
            "title": "结合SEM和BIO来改进CSS",
            "description": "\n有人可能会说，CSS很简单，但是“容易”会导致代码混乱。在大家的眼里，使用像Sass或LESS这样的处理器会让事情变得更为简单。但事实上并不一定如此，如果你使用的不小心，你的CSS将变得更难处理，而不是更易处理。Sass？困难吗？Sass的嵌套就展示了这一点，使用不当，Sass的嵌套就是地狱。如果你的Sass代码看起来像这样的，那么你肯定可以使用SEM和BIO来改进你的代码。接下来我就将向你介绍这方面的CSS技术。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/adding-particle-effects-to-dom-elements-with-canvas.html",
            "title": "使用Canvas给DOM元素添加粒子效果",
            "description": "\n让我们来看看如何将<canvas>的自由度与HTML元素结合起来，使Web页面在视觉上有更好的效果。具体地说，我们将创建一个基于HTML-to-particle的效果，但同样的技术也可以用于实现很多类型的效果。在开始之前，可以通过Repo获取源代码。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/flex-item-calculate.html",
            "title": "聊聊Flexbox布局中的flex的演算法",
            "description": "\n到目前为止，Flexbox布局应该是目前最流行的布局方式之一了。而Flexbox布局的最大特性就是让Flex项目可伸缩，也就是让Flex项目的宽度和高度可以自动填充Flex容器剩余的空间或者缩小Flex项目适配Flex容器不足的宽度。而这一切都是依赖于Flexbox属性中的flex属性来完成。一个Flex容器会等比的按照各Flex项目的扩展比率分配Flex容器剩余空间，也会按照收缩比率来缩小各Flex项目，以免Flex项目溢出Flex容器。但其中Flex项目又是如何计算呢？他和扩展比率或收缩比率之间又存在什么关系呢？在这篇文章中我们将一起来探来。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/querySelectorAll-vs-getElementsByTagName.html",
            "title": "JavaScript学习笔记：querySelectorAll 和 getElementsByTagName区别",
            "description": "\n在《DOM的操作》一节中知道querySelectorAll()和getElementsByTagName()两个方法都是用来查找DOM元素的。通过上一节的学习，知道querySelectorAll()方法将获取到NodeList对象，getElementsByTagName()方法获取到的是HTMLCollection对象。虽然他们获取的都是DOM动态集合，但两者还是略有差异的。今天我们就来看这两者之间的区别。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/vue-animation.html",
            "title": "Vue 2.0学习笔记：Vue的animation",
            "description": "\n上一节我们学习了Vue 2.0中的<transition>实现元素从状态A到状态B的过渡效果。对于元素过渡的效果是通过CSS的transition来完成，具体什么时候执行是由Vue来控制的。而transition的效果毕竟有所限制，对于一些复杂的动效，还是需要通过别的方式来完成。在Vue中除了transition之外还可以完成animation的效果。也就是可以将CSS的animation运用到Vue中来，实现一些动画效果。今天这篇文章我们就来学习如何在Vue运用CSS的animation。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/dom-model.html",
            "title": "DOM系列：DOM事件模型",
            "description": "\n通过上一节的学习，对DOM事件有了一个简单的了解。但这只是学习DOM事件相关知识的起步点。在JavaScript中常见的事件模型有：DOM基本事件模型、DOM Level 2事件模型、IE事件模型、DOM Level 3事件模型 和 自定义事件模型。每种事件模型都有其自己独具的特性。只有了解了DOM事件模型之后，才可以为后续的DOM事件打下一个基础。今天来了解一下DOM事件的模型。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/techniques-for-using-CSS-in-the-double-11-project.html",
            "title": "聊聊双11互动主动法中前端技术亮点",
            "description": "\n在上一篇《手淘Web页面Bar和纵向适配的设计》中聊了互动项目中Bar的工业化标准设计以及对刘海设备带来的变化。我把这一点称为标准化Bar设计给适配带来的优势。今天这篇文章中主要想再花点时间聊聊今年手淘“PK赢能量”互动项目中前端有哪些技术亮点和尝鲜。当然文章涉及到的技术点估计有很多同学都有接触或者使用过。毕竟CSS仅仅是一门表现层语言。废话不多说，直接进入主题吧！\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/dom-dynamic-collection.html",
            "title": "JavaScript学习笔记：动态集合",
            "description": "\nDOM是JavaScript中重要部分之一，在DOM中有一个动态集合。这个动态集合包含节点的集合（NodeList）、元素属性的集合（NamedNodeMap）和HTML元素的集合（HTMLCollection）。这三个对象都是类数组（Array-like），具有像数组一样的特性。更为重要的是，它们都是动态的，是有有生命有呼吸的对象，会实时更新查询DOM结构。今天我们学习的目标就是深究这三个动态集合之间的用法和联系以及区别。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/build-an-infinite-scroll-component-using-intersection-observer-api.html",
            "title": "使用Intersection Observer API构建无限滚动组件",
            "description": "\n在开发过程中，经常会遇到要处理大量数据的情况，比如列表、搜索记录等，因此你需要一种方法让用户以块状显示这些数据，以便保持应用程序性能和数据的有序性。你可能会使用分页组件来处理，它可以轻松跳转，甚至一次跳转几个页面。当然，元素滚动是分页组件的另一种替代方案，它可以提供更好的用户体验，特别是在移动端和可触摸设备上。当用记在页面上滚动时，它提供了一个透明的分页，给人一种没有结尾列表的感觉。自从Intersection Observer API出现之后，构建无限滚动组件变得更简单。让我们看看如何通过这个API来构建无限滚动组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/operate-dom.html",
            "title": "JavaScript学习笔记：DOM的操作",
            "description": "\n通过上一节的学习，对JavaScript中的DOM有了一定的认识。虽然对DOM中相关的知识点有一定的概念，但还是缺乏对DOM的实际操作。如果你仔细阅读过上一篇文章的话，你应该会发现，当时也提到了一些DOM操作相关的东西，比如，DOM的增、删、改和查等。那么今天我们就来看看这些方面的东西。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/flexbox-vs-grid-basic-concepts-and-related-attributes.html",
            "title": " Flexbox vs Grid：基本概念",
            "description": "\n整个Web在不断的演进，那么为Web服务的理念与技术等等也在不断的进行演化。那么我们今天要聊的话题，Web布局中最为优秀的两种布局方式：Flexbox布局和CSS Grid布局。有关于这两方面的知识，其实在W3cplus上已经有很多相关的内容。由于这两种布局方式对Web布局带来了很多改变，而且两者都有其自身的优势。正因为如此，很多同学总是会类似的一个问题：应该使用Flexbox还是Grid来进行布局？那么我们从这篇文章开始，将会分几篇文章一起来介绍Flexbox布局和CSS Grid布局两者的差异性？我们又应该如何的选择，才能更适合我们项目的布局？希望接下来的内容对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/async-vuejs-components.html",
            "title": "Vue中的异步组件",
            "description": "\n随着应用程序越来越大，你开始考虑优化应用程序，使其变得更快。在此过程中，你可能使用了拆分代码和延迟加载这两种方法，它们通过将代码块的加截推迟到需要的时候加载，从而使应用程序的初始包变得更小。延迟加载对于应用程序路由有很大的意义，并且有很大的影响，因为每个路由都是应用程序的不同部分。延迟加载有意义的另一种情况是组件延迟渲染。这些组件可以是tooltips、popover、modal等，当然这些组件也可以使用异步组件。让我们来看看如何在Vue中构建延迟加载异步组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-grid-fr-unit.html",
            "title": "CSS Grid带来的新单位：分数单位fr",
            "description": "\nCSS Grid经过这么多年的发展已经越来越受人青眯了，到目前为止支持率得到近88%的比例。经过这么多年的跟踪和学习，对CSS Grid的特性也是略有所知，但还未达到完全的融汇贯通。因为它有很多的特性，而且这些特性对于CSSer来说很多都是新的概念，比如我们今天要说的分数单位fr就是一个新东东。那么这篇文章，咱们就来一起看看这个特性有什么特性，给我们又能带来什么好处。感兴趣的同学，请继续往下阅读。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/9-biggest-mistakes-with-css-grid.html",
            "title": "使用CSS Grid的九大误区",
            "description": "\n如果你和我一样一直在关注CSS Grid布局的话，你应该知道@Rachel Andrew和@Jen Simmons都是CSS Grid 布局的布道师。两位女士一直都在推进Grid的特性和完善相关的特性。这几天看到@Jen Simmons录了一个视频，聊了一下CSS Grid布局相关的误区。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/reusing-logic-in-vue-components.html",
            "title": " 重用Vue组件中的逻辑",
            "description": "\n当你开始使用Vue创建应用程序时，你可以开始先创建组件，来构建应用程序的不同部分。你应该可以感受到Vue和Web组件结构体系的良好开发体验。随着项目的进行，你开始以某种方式构造应用程序组件，可能是按页面和组件。但随着项目的不断发展，你开始要在多个组件之间执行重复的逻辑。我们常常说不要做重复的事情（DRY）和让一切保持它的简单。这两个原则利于我们编写和维护应用程序。也许你已经知道一些有助于遵循这些原则的模式、库和技术。Vuex将帮助你从组件中提取状态逻辑，Vue路由器将对路由逻辑做同样的工作，但是组件呢？我们经常遇到这样的情况，需要重用属于组件的一些UI功能。例如，除了被锚定和定位到元素之外，弹出窗（Popover）和提示框（Tooltip）都可以在某个事件触发时共享打开和关闭的功能。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/img-and-picture-load-correct-image.html",
            "title": " 给Web页面提供正确图像的姿势",
            "description": "\n在《探索Web上图片使用方式》一文中介绍了Web上图片的各种使用方式，从引入图片、图片效果处理、图片适配、图片加载以及图片优化几个方面介绍Web的图片使用方式。其中有一个值得我们去探讨的话题，那就是如何根据用户的设备为其提供正确的图片。那在这篇文章中我们就一起来聊聊这方面的技术。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-functions.html",
            "title": "CSS中的函数",
            "description": "\n大家都知道，CSS只是一个声明式的语言，主要为标记语言服务。很多程序员鄙视它，有一部分原因是CSS并不像其他程序语言一样，具有一些逻辑能力以及函数功能等特性。随着CSS的不断变革，其慢慢地也变得越来越强大。时至今日，CSS中也有具有函数和运算相关的能力。比如我们今天要聊的CSS函数。在CSS Values and Units Module Level 4中把函数标记（Functional Natations）单独提取出来做为该规范的一部分。而这部分主要介绍了一些具有数学计算能力相关的属性值，比如大家熟悉的calc()和不怎么熟悉的min()和max()。而我们今天要聊的是CSS中的函数，其中就包括这些部分。如果大家感兴趣，欢迎继续往下阅读。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/Illustrated-CSS-details-and-cases-chr1.html",
            "title": "图解CSS：揭开CSS的面纱",
            "description": "\n如果您对前端方面有所关注，那么对CSS一定不会陌生，你也肯定听说过一些CSS的新特性。在使用CSS新特性之前，你应该对这个新一代样式表语言的来龙去脉有个基本了解。在本章节中，你将知道一个CSS属性的制定将会经历哪些过程，为什么会有浏览器的私有前缀以及如何更好的处理这些私有前缀，在文章最后简单的介绍了开发人员如何对CSS新特性做一些渐进增强，优雅降级的处理，给你的用户有一个更好的，更佳的体验。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-complete-css-flex-box-tutorial.html",
            "title": "图解CSS Flexbox布局",
            "description": "\n@js_tut的新书《CSS Visual Dictionary》里面的插画非常有意思。他在Medium上把盒模型、Flexbox、Grid三个部分放了一些出来。我觉得他提供的插画非常形象的阐述了这几个部分的知识点。今天把 Flexbox部分的插图直接拿来使用了，通过这些插图再次向大家阐述CSS Flexbox相关的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-css-paint-api.html",
            "title": "CSS Paint API",
            "description": "\nCSS Paint API是一个令人非常兴奋的东西，也是令人激动人心的时刻，它将开启CSS新的旅程。接下来让我们一起来看看它是什么，为什么会有它以及如何开始使用它。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/dom-event-intro.html",
            "title": "DOM系列：DOM事件简介",
            "description": "\n如果你浏览过早期的Web网站，或许你已经发现了这些Web站点除了能提供查阅信息之外，无其他作用可言。这样的Web站点其实是非常无聊的。那是因为Web站点没有提供人与机器的互动行为。激不起用户的兴趣。造成这种现象的原因很简单。Web应用程序或者Web站点存应该是为了响应用户对它们所做的事情。好比，我们每天一大早起床时就想好了一天要做些什么，这样每天都有动力，也变得充实。那么在Web应用或Web网站上其实也是类似的，Web网站之后做的事情很大程度上取决于你告诉他们做什么。这样一来，Web网站会变得有趣的多。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/guide-css-layout.html",
            "title": "CSS布局指南",
            "description": "\n在过去几年中，CSS布局已经发生了巨大的变化，现在我们开发网站的方式也发生了巨大变化。现在我们有需要可选的CSS布局方式来开发我们的网站，这也就要求我们对这些方式能作出正确而双合适的选择。在这篇文章中，将会介绍各种CSS布局的基本使用方式以及使用的目的。\n "
        },
        {
            "link": "https://www.w3cplus.com/design/the-flat-design-aesthetic.html",
            "title": "美学探究之Flat Design",
            "description": "\n最近在网页以及UI设计领域的流行使用“flat design”。在这个时刻，Flat Design以其自身的争议性以及新颖，自然而然地成为了在这个时间段最热门的话题。一直以来，我总是醉心于极简化的东西，因此Flat Design审美概念的提出着实让我眼前一亮，两脚一蹬，兴奋的心情久久不能平静，特别是在我着手准备把在2010年创建的QuoteRobot重新进行改版的时候，“Flat Design”让我有了柳暗花明又一村的感觉。由LL根据Shawn Adrian的《The Flat Design Aesthetic: A Discussion》所译，给大家展示Flat Design是什么，设计师对它有着怎样的看法，最后再教你几招怎样才能把这类设计运用到你的作品当中去。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/using-flexbox.html",
            "title": "使用Flexbox：新旧语法混用实现最佳浏览器兼容",
            "description": "\nFlexbox用于布局真是强大，前面在《使用CSS3 Flexbox布局》和《Flexbox——快速布局》介绍了使用Flexbox制作布局，而且使用Flexbox还可以快速的实现响应式布局：《响应式设计的未来——flexbox》。可是大家看到Flexbox具有多个版本的语法规则，而且还受限于浏览器支持度，都不敢轻意尝试使用。其实早在《跨浏览器的Flexbox》一文中已做过各浏览器兼容处理的介绍。今天通过一个三列网格布局的案例，再一次向大家介绍如何使用Flexbox的旧语法、过渡语法和新语法混合使用，实现Flexbox在各浏览器下的最佳兼容。感兴趣的同学不仿自己动手一试。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/old-flexbox-and-new-flexbox.html",
            "title": "“老”的Flexbox和“新”的Flexbox",
            "description": "\n大家都清楚的知道:“Flexbox”（全称：CSS Flexible Box Layout Module）在过去的三年中经历了许多变化。2009年最早出现在规范中的版本可称得上老版本\"display:box\"，随后在2011年出现的中间过渡版本“display:flexbox”，而在2013年又发布了最新的语法规范“display:flex”。一个Flexbox有这么多个不同语法版本，无疑是给我们的学习带来很大的难度。在使用搜索引擎查找flexbox的时候会出现大量的教程，此时我们都不知道哪个是最新版本，哪个是老版本，哪个又是过渡版本。为了能更好的学习flexbox相关的知识。Chris Coyier在《“Old” Flexbox and “New” Flexbox》一文中告诉我们怎么来分辨Flexbox的语法版本区别，如何通过相关的教程去学习Flexbox属性的使用。如果你和我一样分不清楚Flexbox众多语法版本如何区别？强烈建议你花几分钟阅读一下这篇译文，我想你会有所收获的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-flexbox-layout.html",
            "title": "使用CSS3 Flexbox布局",
            "description": "\nFlexbox是CSS3的一个新模块，主要用于实现弹性布局，这个属性给我们布局带来极大的方便与简易。随着Flexbox新语法的落定，现代主流浏览器也紧跟其后，都在慢慢支持这个属性。而有关于Flexbox的教程，在W3cplus站上已经分享了很多篇，从理论知识到实例，从各个方面阐述了Flexbox的功能与特性以及其使用方法。根据Helen Emerson的《Using the CSS3 flexbox layout》所译，详细向大家介绍了如何使用Flexbox属性创建一个典型的三列布局，希望大家能从这个简单的实例教程中更进一步的了解Flexbox的特性与使用方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/responsive-design-of-the-future-with-flexbox.html",
            "title": "响应式设计的未来——Flexbox",
            "description": "\n响应式设计对于2013年的Web前端人员来说并不是一个新名词，现在国内外有关于响应式设计的教程也是铺天盖地，小站也也分享了一些响应式设计的教程。那么大家有没有思考过响应式设计的未来将会是一个什么样？或者说，特别是CSS3的Flexbox广泛得到支持的情况下会有什么革命性的变化呢？如果您还没有对这个问题进行任何的思考之前，你又想了解一下这方面的变更，不仿花点时间阅读一下这篇文章。本文根据Ben Gremillion的《Responsive Design of the Future with Flexbox》所译,向大家初步的介绍了一下Flexbox与Media Queries结合制作响应式设计带来的变化。简单的了解一下Flexbox哪些属性会给响应式设计带来革命性的变更。整篇文章简单明了，以一个简单案例的形式向大家展开，不过原作者写的有点过早，如果现在我们自己去做的话，可以在这个基础上做一定的修整，将会变得更加简单与强大，你愿意动一试吗？如果愿意的话就看完文章后动手一试。我想你会找到你需要的东东。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/introduction-into-css3-grid-layout.html",
            "title": "CSS3网格布局介绍——网格的运行",
            "description": "\nCSS3网格布局模块的一个任务是帮助我们处理非常简单和清晰的任何布局，很有可能是一个内容块在一个虚拟的网络位置。与旧的表格方法相比，表格是基于一个使用的表，这里的具有清晰的文档语义和内容与结构的分离。在一个模板中使用不同的结构标签，使用多个浮动和手动计算实现一个布局是困难的，这里介绍的方法变得非常简单和清晰。与绝对定位相比，网格更具灵活性。与当今天流行的CSS/JS库相比，这些库使用网格都需要指定相应的类名（作为一个示例，比如bootstrap和yui css grids），而在网格布局模块中是不需要额外增添这些类名。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/a-look-on-whats-coming-up-css3-flexible-boxes.html",
            "title": "看看接下来会发生什么：CSS3 Flexible Boxes",
            "description": "\n设计一个网站，布局可能是最生要的元素之一。当你网站的用户理解你的布局和喜欢上你的网站布局，他们用起来很开心，这样用户会在你的站点呆的时间更长，甚至会定期访问你的网站。我们通过导航能浏览一些高质量的内容，但由于网站混乱的设计和完全乱套的布局，我们第一反应，那就是尽可能快的离开这个网站。特别是如今天显示屏幕的多样化，在使用以前老的布局方案无法实现。虽然响应式布局能改变这种状况，但是需要添加很多样式代码，增加维护难度与开发速度。值得庆幸的是，CSS3给我们带来了一个Flexible Boxes模块，让我们布局变得更加和简易化。根据Shock Family的《A Look at What’s Coming Up: CSS3 Flexible Boxes》一文，给大家介绍了一个使用Flexbox实现的一个响应式网站布局的案例，希望这个案例能帮助大家更好的理解Flexbox，从而更好、更快的实现网站布局。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/729.html",
            "title": "jQuery Mobile教程-高级篇-自动增强主体结构开篇",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来深度认识一下jQuery Mobile中一个大致的自动增强的流程设计\n\t还记得我们前面在《jQuery Mobile教程-基础篇-如何开始？》里面提到的一个最简单的页面结构吗？ "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-framework-tobe.html",
            "title": "TOBE——引领重构变革",
            "description": "\n到现在，我们有了sass的入门教程sassGuide，有了sass的进阶教程sass揭秘系列，也有了sass的一个库sassCore，也许你会猜测这应该结束了，不然还能折腾个什么呢？而真相是其实它们都是为tobe的出现而铺垫，正是因为有了tobe这个目标，所以才产生了一系列前面那些文章，为此我大概奋战了3个月，今天终将给这个疯魔状态画个句号，揭晓答案。\n\n直击官网\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-grid-layout-module.html",
            "title": "使用CSS3 Grid布局实现内容优先",
            "description": "\n浏览器支持许多CSS3的模块，帮助我们解决我们习惯于使用图片的CSS效果。崛起的移动浏览器和响应式网页设计概念给了我们一个全新的方式来来看待Web设计。然而，当它们来临的时候，我们的布局还没有跟上。我们已经讨论了多年的源顺序、内容也结构和内容与样式的分离。然而，为了得到一定的视觉布局，我们大多数不得不决定源秩序。目前，W3C在制作一些一趣的规范，虽然这些规范会不断的变化，但他们总是在一个起跑线上变动。在这篇文章中，我将向大家介绍CSS的一个模块——CSS3网格布局模块，使我们能够定义一下网格和放置元素。本文实示演示基本的网格布局，并讨一个方法，我们可以开始思考的内容是具有一个更多的自适应方法。在我们开始之前，需要特别注意，在撰写本文的时候，这些例子只能在IE10上运行。CSS3网格布局是由微软创建的一个模块，在使用的时候需要添加IE10浏览器的前缀“-ms-”。我的例子都将使用“-ms-”前缀，而不包括其他浏览器的前缀，不仅仅因为CSS3 Grid布局模块还是一个规范草案，而且在其他浏览器中实现的效果也可能存在不一致。实现今天的效果也很有可能会改变，希望能得到您的反馈。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/future-css-layouts.html",
            "title": "CSS布局的未来",
            "description": "\n大家都知道，css有着奇妙的特性，然而让人失望的是，css对基本页面布局上的支持有所欠缺。但是这种情况正在得到改变，更多的动态页面正是由css所支持的，正如peter gasston所说的。这是一篇关于css布局且具有前瞻性的 文章。在这里，我能够保证在数年之后，css3必定能够引领潮流。在这篇文章当中，我将为大家从优秀实用到纯粹理论阶段中介绍有关css布局的工具，也许在这些阶段中你不一定用得到他们，（至少不是现在），但仍然还很有必要去了解，通过这样可以透过迷雾，看清未来。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/706.html",
            "title": "jQuery Mobile教程-事件篇",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来认识一下jQuery Mobile的几个比较重要的基本事件\n\n\t1、mobileinit\n可以利用它来扩展$.mobile或者修改默认配置\n示例： "
        },
        {
            "link": "https://www.w3cplus.com/css3/advanced-cross-browser-flexbox.html",
            "title": "跨浏览器的Flexbox",
            "description": "\n自从2009年至今Flexbox已出现好几个版本，这也造成了Flexbox没有得到其最大功能的发展与普遍性的运用与推广，幸运的是今年推出了最新的语法规则，而且几大主流浏览器都已支持最新语法规则，也就是说将来我们可以很好的使用Flexbox属性了。可是目前兼容如果需要使用Flexbox属性来制作一些效果，我们还是需要考虑一下如何做到最完美的兼容各浏览器。今天 根据Chris Mills的《Advanced cross-browser flexbox》所译,根据Chris Mills写的一个示例为主线，一层一层剖析了如何让各浏览器能最完美的兼容Flexbox的属性使用。如果你感兴趣就继续 往下看吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/design/become-a-better-graphic-designer.html",
            "title": "新手指南——优秀平面设计师是怎样炼成的",
            "description": "\n作为一名想成为优秀平面设计师或网页设计师的菜鸟，我们通常都是通过从网上自学一些教程开始的。我们搜索一些我们想学的效果，像按钮效果的教程、排版、网页布局、插画等等。一路来我们最终无望，想着我们不可能成为那些我们看到的大牛，然后就这样止步不前。我想告诉你，不要看轻自己，记住吃得苦中苦，方为人上人。由Summer根据 Michael John Burns的英文文章原名《A Beginner’s Guide on How to Become a Better Graphic Designer》进行翻译,向大家介绍了如何让自己成们一名优秀的平面或者网页设计师。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sasscore-vs-compass.html",
            "title": "sassCore——一个值得你拥有的sass库",
            "description": "\nsassCore在sass库中作为一个后来者，不可避免的要拿来和最具代表的compass做比较。当然这一方面是目前比较全面的sass库也比较少，而另一方面也说明sassCore其实也是有一定含金量的，不然烂的可以的话，也就不用去比较了。如果你还不了解sass，你可以先阅读下入门的sassGuide，然后可以进一步看下前三篇进阶教程sass揭秘系列。\n在这我们先介绍下sassCore产生的背景。\n\n\tsassCore是怎么产生的？\n设计这个sassCore绝不是闲得蛋疼去重复造轮子，也不是一时手痒来挑战下自己的技术，它的出现完全在我的计划范围之外。\n原先的计划是做一个样式库，然后加上js交互就组成一个框架。因为那个时候接触sass也一段时间了，了解了它能创造的一些价值，所以果断使用sass，而不是纯css来构造。原本是打算用compass这个作为基础的，于是花了一段时间去研究。然后发现它的一些弊端： "
        },
        {
            "link": "https://www.w3cplus.com/css/twitter-bootstrap-tutorial.html",
            "title": "20分钟打造你的Bootstrap站点",
            "description": "\nBootstrap对于现在的前端人员来说并不是一个陌生的名词，但对于如何使用，很多同学还是感到无法切入。主要原因是没有理解bootstrap是用来做什么。或者说如何使用吧。今天由白牙根据Leon Revill的英文文章原名《Twitter Bootstrap Tutorial – Up and running with Twitter Bootstrap in 20 Minutes》进行翻译，给大家介绍了个实例。这篇教程旨在让你在20分钟内学会使用twitter bootstrap创建一个站点。看完这个教程后你应该能够使用bootstrap来建立一个基本的响应式布局的页面，了解栅格系统，并且能够使用bootstrap导航、导航条和了解响应式设计的基础。这些全部都是使用twitter bootstrap所需要具备的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/grid.html",
            "title": "Grid",
            "description": "\nCSS中的grid属性是网格布局的一个基础。它主要用来解决使用老布局技术还来的一些问题，比如浮动布局（除除浮动）、inline-block布局（间距问题）。通过提供一种新的方式来给Web页面布局。这个想法是把一个元素定义为一个网格。可以想像成电子表格的行与列。然后，你可以把每个子元素定义成一个列和行（类似于单元格）。不需要修改任何标记，直接通过css搞定。随着这个技术的成熟，我们可以使用这个方法解决我们老的布局技巧带来的问题。而有他的主要优点是你可以在一个页面上不改变文档流的顺序重新排列你的布局顺序。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/learn-css-layout.html",
            "title": "学习CSS布局",
            "description": "\n这个篇文章介绍的是现在广泛使用于网站布局领域的CSS基础。你也许知道什么叫选择器，什么叫属性，什么叫数值，也许你对css布局略懂一二，但这还远远不够。如果你想着从头开始学习HTML和CSS的话，我建议你认真查看下 this tutorial. 否则，在工作的时候，你依然陷入迷惘的泥潭中苦苦挣扎。由LL根据Learn CSS Layout站点所译，让我们学一些CSS布局的基础知识。希望大家喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/nodejs-and-grunt-compile-sass-to-css.html",
            "title": "Nodejs+Grunt配置SASS项目自动编译",
            "description": "\n早前听说Nodejs和Grunt很强大，特别是用来构建自动化的前端开发，更是强大无比。但一直碍于自己掌握的技术有限，不敢深入，也未曾深入下去。最近在开始学习SASS，也慢慢的接触这方面的东西。为了能更好的让SASS项目实现自动化编译，打算使用Nodejs和Grunt来试试。\nSASS的编译的话题，在《SASS编译》有进行过介绍，文中介绍的方法是在Ruby环境下，使用sass命令配合其各种不同的参数来实现SASS的编译。那么今天我们换过一种方式，使用Nodejs和Grunt来实现SASS的自动编译。 "
        },
        {
            "link": "https://www.w3cplus.com/css/css-architectures-new-best-practices.html",
            "title": "CSS架构：最新最佳实践",
            "description": "\n大家都已意识到了，在过去的几年里，前端开发领域取得了很大的进展，一些新的思想已经实践出新的方法来解决由来已久的问题。CSS架构在各大论坛与QQ群也讨论比较多了，就连小站也翻译了不少国外有关介绍CSS架构的系列教程。比如说D姐译的《CSS架构》、Jekst根据Denise Jacobs写的CSS3架构的系列教程译的《CSS架构：代码简洁原则》。今天Jekst根据Denise Jacobs的CSS3架构的系列教程中的《CSS Architectures: New Best Practices》一文所译，向大家介绍了前端编程一些最新最佳的实践方法，很大程度上能够帮助大家编写良好的样式表和HTML文件。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/728.html",
            "title": "jQuery Mobile教程-高级篇-网格配置实现细节",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来通过源码分析的方式，深度认识一下jQuery Mobile中grid组件的设计实现细节\n\t还记得我们前面在《jQuery Mobile教程-基础篇-网格篇》里面提到的如何设置几列布局吗？ "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-advanced-application.html",
            "title": "sass揭秘之@if，@for，@each",
            "description": "\n因为文章内含有很多sass代码，如需自己动手查看编译结果，推荐使用sassmeister这款在线编译工具，方便你阅读学习。\n经过上两篇揭秘，大家心里对sass应该有了很好的认知感了，这篇文章基于前面两篇为基础，请确保你先浏览了前面的两篇文章，不然可能给你带来疑惑感觉。\n\nsass揭秘之变量\n\nsass揭秘之@mixin，%，@function\n这篇文章关键是对sass判断或循环的语法熟悉下，至于逻辑这东西，和其他的语言如js，php什么的是一样一样的，没什么说头。经过前两篇的积累，也就不需要那么啰嗦了，所以只写scss代码。现在你就可以想想css如果用上这些东西会是什么样子的呢？ "
        },
        {
            "link": "https://www.w3cplus.com/css3/media-query-snippets.html",
            "title": "CSS3 Media Queries 片段",
            "description": "\nResponsive设计在现代Web设计中可谓是越来越流行，但很同学们并未理解其真正的设计概念，往往把Responsive视为一种自适应布局。当然有很多同学也在尝试动写Responsive的案例，但如何取其断点左右纠结，如何设置哪几个断点？又从何入手？\nResponsive中的断点都依赖于CSS3的Media Queries来决断。曾在CSS3 Media Queries模板、使用em单位创建CSS3的Media Queries和iPads和iPones的Media Queries有过这方面的介绍。今天特意根据一些Responsive框架整理了一些常见的Media Queries片段，以供大家参考。\n "
        },
        {
            "link": "https://www.w3cplus.com/design/grid-website-designs.html",
            "title": "精彩网格式网页设计赏析",
            "description": "\n现在大量网页设计基于网格布局。虽说人们通常注意不到它，但杂乱无章的布局时代确实已经过去了，现在是整齐结构化的天下。无论从理论、美学和整齐来说，这样的布局都很好平衡。网格结构是所有现代网站的基础，它总能给最终用户完美无暇的设计。\n尽管通常网格设计仅仅是在规定的间隔下用没有任何多余修饰的水平线和垂直线的交叉，但很多设计师们也会用一些明显突出的几何图形来修饰网格。通常我们会在展示类、博客和新闻相关的网站看到清晰的网格，但有时也有一些个人网站或其他创意网站通过巧妙的处理网格吸引用户目光。\n "
        },
        {
            "link": "https://www.w3cplus.com/design/steampunk-in-web-design.html",
            "title": "网页设计中的Steampunk思想",
            "description": "\nSteampunk在网页设计中是一个全新的名词，我一开始将其理解为复古。steampunk诞生于十九世纪中的幻想潮流当中，所以更容易被当作是一种特立独行的艺术设计流派。虽然我们对Steampunk这个词一无所知，但不要紧，接下来LL根据Simon Andras的《Steampunk in Web Design》所译，简单的向大家介绍了一些有关于Steampunk在网页设计中带来的视觉效果与影响。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-architectures-principles-of-code-cleanup.html",
            "title": "CSS架构：代码简洁原则",
            "description": "\n很多时候，大（还是小的）网站里的CSS是一个代码臃肿冗余的教材例子，多数代码夸张的使用了不必要的限定符元素，在不必要的长选择器中，过度的使用了特定的选择器，有更合适的选择器时却使用了具有依赖性的后代选择器，还有在不必要、不合适的地方使用了!important。我们可以学习一些基本的、可靠的CSS写法，实践来大大提高组织样式表的可维护性。我们最终的目标是给网站组织样式表，极大的提高其可扩展性。Jekst根据Denise Jacobs的英文文章原名《CSS Architectures: Principles of Code Cleanup》进行翻译，介绍了如何让你的代码更加简洁，如何让你的代码更具效率，如何让你编写代码更加快速？喜欢的同学继续往下阅读吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/705.html",
            "title": "jQuery Mobile教程-基础篇-属性",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来认识一下jQuery Mobile的一些属性\n\t（注释：下面示例中的代码片段均来自1.1.0版本）\n\t首先解释一下在jquery mobile里面的每一个view或者page的概念：\n\t如何定义一个页面容器呢？\n\t从前面的教程里面，你应该看过下面的代码：\n\n//一个单独的page\n<div data-role=\"page\"></div>\n\n//多个page\n<div data-role=\"page\" id=\"home-page\">\n</div>\n\n<div data-role=\"page\" id=\"copyright-page\">\n</div>\n其实page的配置方式很简单，但是我们下面看看源码： "
        },
        {
            "link": "https://www.w3cplus.com/css3/new-css3-radial-gradient.html",
            "title": "再说CSS3渐变——径向渐变",
            "description": "\n上节在《再说CSS3渐变——线性渐变》和大家一起学习了CSS3 Gradient中径向渐变最新语法（称得上是W3C的标准语法）相关知识以及其基本使用。今天我们在这一篇中主要和大家一起来了解渐变中的径向渐变新语法以及其基本使用。以及在本文结束尾处一起探讨了一下如何让低版本兼容CSS3的渐变，以及一些兼容方案。不过在下更愿意希望大家放弃兼容性，大敢的去尝试使用，学习使用。如果实在需要使用到项目中，如果用户实在需要兼容性一致，可以在换思路，但对于学习来说，无需顾虑是否兼容。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/714.html",
            "title": "jQuery Mobile教程-中级篇-selectmenu插件",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来深度认识一下jQuery Mobile的selectmenu插件\n\t主要让大家熟悉一下动态创建selectmenu、禁用selectmenu以及启用selectmenu\n\n\t1、动态创建input\n示例： "
        },
        {
            "link": "https://www.w3cplus.com/css3/list-of-pseudo-elements-to-style-form-controls.html",
            "title": "伪元素控制表单样式",
            "description": "\n伪元素大家熟悉的可能也就是常见的那几种，比如“::before”、“::after”等，熟不知各大引擎浏览器都有自己的私有伪元素，用来做一些特别的处理。比如前段时间CtripUED团队整理的Webkit CSS Library，里面整理了所有webkit引擎浏览器的私有属性和一些伪元素对元素的样式处理。本文由D姐根据TJ VanToll的英文文章原名《List of Pseudo-Elements to Style Form Controls》进行翻译，向大家介绍了一些伪元素控制表单的样式方法。因为当开发web应用程序时，表单样式是个头疼的问题。以前，web开发人员不得不接受一个现实，就是由客户端浏览器控制表单样式。然而，作者通过伪元素给web渲染引擎添加钩子，就可以控制表单的显示。然而，所有这些伪元素都是依赖于特定浏览器引擎的(所以要带有浏览器引擎前缀)，这样方便区分特定的浏览器引擎。以下是我自己搜集整理的，在Trident, Gecko, 和 WebKit浏览器引擎下面都可用的伪元素列表。希望这篇文章对大家处理表单时有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-mixins-function-placeholder.html",
            "title": "sass揭秘之@mixin，%，@function",
            "description": "\n因为文章内含有很多sass代码，如需自己动手查看编译结果，推荐使用sassmeister这款在线编译工具，方便你阅读学习。\n在阅读本文章之前，请先确认你已经阅读了上篇文章sass揭秘之变量，不然会给你带来疑惑的感觉。\n其实很多人之所以对sass或less感兴趣，就是因为他们能使用变量和这个@mixin功能，而后面的%和@function知道的人就比较少了。所以说@mixin这个东西还是很有诱惑力的，没办法，广告做得好啊，大明星。这里之所以把%和@function和@mixin放在一起，当然并非无缘无故，一看@mixin和@function就是兄弟，长得那么像，而%这个后起之秀，更是在一定程度上抢了@mixin的不少风头。 "
        },
        {
            "link": "https://www.w3cplus.com/css/text-align-justify-and-rwd.html",
            "title": "Text-align:Justify和RWD",
            "description": "\n项目列表两端对齐，给一些同学带来了很多困惑，我在群里也时常看到有人问这样的布局问题，记得很早前在《如何在Drupal中避免重复列末尾的Margin》中有做过一点简单的介绍。后来在张旭鑫的博客中，找到两篇《display:inline-block/text-align:justify下列表的两端对齐布局》和《拜拜了,浮动布局-基于display:inline-block的列表布局》中介绍了使用text-align:justify和display:inline-block实现两端对齐。受益无穷。但随着响应式布局的出现，这样的布局又提出一个新的要求，要实现响应式布局，最近邮箱常收到Patrick Kunka的《Text-align: Justify and RWD》一文，觉得蛮好的，特译成中文与大家共享，希望大家喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/new-css3-linear-gradient.html",
            "title": "再说CSS3渐变——线性渐变",
            "description": "\n渐变背景一直以来在Web页面中都是一种常见的视觉元素。但一直以来，Web设计师都是通过图形软件设计这些渐变效果，然后以图片形式或者背景图片的形式运用到页面中。Web页面上实现的效果，仅从页面的视觉效果上来看，与设计并无任何差异。\n事实上这种方法是比较麻烦的，因为首先需要设计师进行设计，然后进行切图，在通过样式应用到页面中。另外，在实际应用中可扩展性差，还直接影响页面性能。\n值得庆幸的是，W3C组织将渐变设计收入到CSS3标准中，让广大的前端设计师直接受益，可以直接通过CSS3的渐变属性制作类似渐变图片的效果。而且渐变属性慢慢得到了众多现代浏览器的兼容，甚至烦人的IE，在IE10版本也支持了这个属性。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/713.html",
            "title": "jQuery Mobile教程-中级篇-textinput插件",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来深度认识一下jQuery Mobile的textinput插件\n\t主要让大家熟悉一下动态创建input、禁用input以及启用input\n\n\t1、动态创建input\n示例： "
        },
        {
            "link": "https://www.w3cplus.com/blog/769.html",
            "title": "浅析sass死亡在团队合作中",
            "description": "\n其实很多人对sass都有所了解，尤其是国内的大团队，甚至花过一番力气去推广，可是最后却一个个流产，这其中的原因众多。这里我简单说下个人的一些理解，如有不对还请手下留情。\n第一，sass毕竟有一个学习成本，不过学习过的人都知道，其实学习这个起来还是很快的，如果你团队确实存在某个人连这个都学不会，那就别让他搞css了，要不拍拍屁股走人要不搞别的去要不他就是当领导的吧。\n第二，sass不能动态引入在线的资源，拿css来说对于一些共有的东西如reset.css我们一般都是直接引入线上的绝对地址的，但是sass不能，所以目前我们引入sass有两种方法，第一种如compass那样，安装好，然后调用；第二个就是放在项目里调用。这个就牵扯到一个更新的问题，确实是比较头疼的，目前没有什么解决办法。\n第三，sass从前不是很成熟。说实话听到less，sass什么的还是比较早的，但是那个时候总觉得还不是很好，所以简单摸了下。这不，技术是发展的，现在经过一步步的改进，已经发展到合意的地步了，是时候推广使用了。而那些曾经被sass伤害过的大神，回个头重新看下吧，现在的它发展到了一个更合理成熟的阶段了。 "
        },
        {
            "link": "https://www.w3cplus.com/css/css-only-alternative-to-the-select-element.html",
            "title": "CSS构建下拉列表",
            "description": "\n下拉选择框对于前端人员总是烦人的事情，早前要么就是默认的样式，但是有时候需要符合整体设计的需求，默认的总是让人不尽如意，为了解决这个问题，开始有使用j脚本来模仿效果。可是对于不懂js的同学来说，又不知道如何下手。不过不要紧，今天Jekst根据PeHaa的英文文章原名《Css-only Alternative to the Select Element》进行翻译，给带大家来一篇纯css制作下拉选择框的效果，希望大家能从中找到自己需要的东东。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-basic-variable.html",
            "title": "sass揭秘之变量",
            "description": "\n因为文章内含有很多sass代码，如需自己动手查看编译结果，推荐使用sassmeister这款在线编译工具，方便你阅读学习。\n变量对于一个程序员来说非常的熟悉，但对于样式这一块还是很新的一个概念。我们所知道的变量有全局变量，局部变量。但在SASS中这个概念对于刚开始sass的人，也许其最大的抱怨就是sass的变量了，尤其是那些了解less变量的，更是会说sass的变量做得不如less的变量好，less中有明显的全局变量和局部变量之分，但是到sass这边来，好像有点乱了，分不清了。其实不管sass的变量还是less变量都是有其设计的原理的，有着不一样的科学性，下面我们简单来了解下。\n\n\t \n "
        },
        {
            "link": "https://www.w3cplus.com/tool/git-guide.html",
            "title": "git——简易指南",
            "description": "\nGit对于我来说，只知道是一个版本控制器，类似于乌龟的svn。其中也仅仅会几个常的命令，比如说“更新git pull”、“提交git push”等等，因为记得当初使用的时候，师傅告诉我，对于你不懂这个不要紧，记住几个常用的命令就足够使用了。 师傅的话没有错，有这些命令是足够使用了，但往有时候还是很难完成我们工作中的需求，比如如何安装、分别何创建库等，这就几个命令无法实现的了。只可惜自己太懒，以致于每次使用的时候都需要去查找相关的资料，真是无颜面对江东父老呀。 今天邮件中收到一个有关于git指南的资源，真是清新悦目呀，几句话就把git说的清清楚楚，可谓是应该讲的都讲了，而且是简单明了。并且发现其有中文版本，特意将其中文版本搬到小站上，与大家分享。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/727.html",
            "title": "jQuery Mobile教程-高级篇-按钮自动增强的细节实现",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来通过对比按鈕自动增强前后的html代码，直观地让大家来深度认识一下jQuery Mobile中如何对按钮进行自动增强设计的！\n\t还记得我们前面在《jQuery Mobile教程-基础篇-按钮篇》里面提到的一些基本的按钮知识吗？如何有不熟悉的，可以去查阅一下！\n\n\t1、先看链接按钮：\n我们在页面编写的代码：\n\n<a data-theme=\"a\" data-role=\"button\">我是链接按钮</a>\t  \n\n我们来看一下经过自动增强后的： "
        },
        {
            "link": "https://www.w3cplus.com/blog/768.html",
            "title": "sassCore——设计更好的sass库",
            "description": "\n目前sass库中应用最多的应该就是compass和bourbon，但是使用之后会发现compass设计太复杂了，而bourbon有点太简单了。于是只好琢磨着去搞一个使用起来更方便合理的sass库，经过翻阅众多资料、实践及思考，终于有了现在的sassCore，当然到目前为止sassCore还不是非常完善，但是对付日常的工作已经很够了。\n\n\t之所以说是设计更好，决不会空穴来风，下面我们从几个方面简单说下sassCore的优势。\n1、sassCore涵盖范围广，目前涉及了setting，reset，mixin，css3，typography，media-queries，grids，helps八个部分。\n2、sassCore采用开关机制，对是否支持ie6/7等众多条件可以通过设置为true或false来搞定。 "
        },
        {
            "link": "https://www.w3cplus.com/css/the-history-of-the-bem-methodology.html",
            "title": "BEM进化史",
            "description": "\n这篇文章是研究BEM进化的一个案例，BEM是一种方法论，能让团队成员通过使用一种由统一语言构成的简单而强大的术语：块（blocks）、元素（elements）、修饰符（modifiers）来进行合作和思想沟通。一个大公司总会面临这样的挑战，即在逐步建立服务生态系统的同时也伴随着开发团队的不断增长。今天由David根据Maksim Shirshin的英文文章原名《The Evolution Of The BEM Methodology》进行翻译，详细介绍BEM进化史。希望大家喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/master-new-css-layout-properties.html",
            "title": "Hold住CSS布局新属性",
            "description": "\n新css属性为我们提供了更加便捷的网页布局方式。来自微软的thomas lewis将带你认识去Grid Alignment，Flexibox Box以及Multi-column Layout这三大领域。这篇文章最早出现在 the April 2012 issue (226)这期的.net杂志上-这杂志是面向网页设计者以及开发者，全球销量最高的杂志。按照以往来说，用CSS来布局看起来总是一样非常繁杂的工作。然而，随着一个个新标准的推出，网页设计者已经能够实现非常轻松地进行布局工作了。\n主流的浏览器，在W3C的推动下，已经开始实现多种新型的布局方式，而且我们现在已经可以开始使用了。举个例子，W3C开始把CSS3 Multicolumn Layout Module考虑进来。这就意味着W3C非常愿意看到浏览器在将来能够对上面的模块实现出来。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/712.html",
            "title": "jQuery Mobile教程-中级篇-checkboxradio插件",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来深度认识一下jQuery Mobile的checkboxradio插件\n\t表单中的radio与checkbox都依赖它进行初始化增强以及一些事件的绑定（disable、enable、checked、unchecked）等\n补充：如果你对button还是比较陌生的话，可以查看我们的《基础篇-表单篇》\n\n\t1、disable（禁用）\n示例：\n\n\t//禁用\n\t$(\"#disable_checkbox\").bind('click',function(){\n\t\t$(\"#major_eng\").checkboxradio(\"disable\");\n\t});\n\n\n\t2、enable（启用）\n示例： "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-masking.html",
            "title": "CSS遮罩——如何在CSS中使用遮罩",
            "description": "\nCss遮罩是2008年4月由苹果公司添加到webkit引擎中的。遮罩提供一种基于像素级别的，可以控制元素透明度的能力，类似于png24位或png32位中的alpha透明通道的效果。值得庆幸的是2012年11月15号，遮罩第一次出现在w3c公布的草案中。但是跟苹果公司的是不同的版本。今天由D姐根据Christian Schaefer的英文文章原名《CSS Masks – How To Use Masking In CSS Now》进行翻译,给大家介绍有关webkit中新的css技术——css滤镜。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-basic-mixins-nesting-placeholders-extend.html",
            "title": "理解SASS的嵌套，@extend，%Placeholders和Mixins",
            "description": "\n在《SASS基础教程——SASS基本语法与特性》文中主要介绍了SASS的基本语法和特性。简单的知道SASS具有四个基本特性：变量Variables、嵌套Nesting、混合Mixins和继承Selector Inheritance。其实这四种特性中的嵌套、混合和继承是有一种千丝万缕的关系，甚至会让初学者理不清，这也从侧面也说明了这三者在SASS的重要性。那么今天这篇教程，我们将主要介绍和探讨嵌套、混合、继承三者之间的关系，以及各自的优缺点。\n\n\t \n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-grid-layout.html",
            "title": "CSS3 Grid Layout",
            "description": "\nWeb页面的布局，我们常见的主要有“浮动布局（float）”、“定位布局（position）”、“行内块布局（inline-block）”、“CSS3的多栏布局（Columns）”、“伸缩布局（Flexbox）”以及“网格布局（Grids）”等，在众多布局方法中，大家最为熟悉的就是浮动布局和网格布局，并且使用不同的细节能得到不同的布局效果。虽然这些布局能让大家实现常见的布局效果，但在实际中还是存在不少的问题，比如说浏览器的兼容性、修改显示顺序需要调整文档结构等。那么有没有什么更好的，更理想的布局方法？这也就是今天要和大家一起学习的一个布局模式——CSS3 Grid Layout\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/711.html",
            "title": "jQuery Mobile教程-中级篇-dialog",
            "description": "\n特别申明：本系列教程由小春撰写\n本文主要看一下jQuery Mobile体系中的dialog组件：\n\t它开放了一个close的api\n补充：如果你对dialog还是比较陌生的话，可以查看我们的《基础篇-弹窗篇》\n\n\t1、如何关闭dialog？\n示例：\n\n//关闭dialog\n$(\"#close-dialog-btn\").click(function(){\n\t$(\"#alert-dialog\").dialog(\"close\");\n});\n\n源码： "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-supports.html",
            "title": "CSS3条件判断——@supports",
            "description": "\nCSS3条件判断，听起来“不明觉厉”,如果你对CSS稍为熟悉一点的话，你会发现CSS中的“@media”就是条件判断之一。是的，在CSS3的条件判断规范文档中包含了两个部分，其一是“@media”规则，主要用来“根据媒体属性区分样式表”(特别是在Responsive设计中，发挥的作用更是强大)；其二是“@supports”规则，主要用来代替前面常用的Modernizr库，在不支持CSS3的浏览器下实现渐进增强式设计。换句话来说，@supports可以让我们在不支持CSS3属性的浏览器下配上单独的样式，看起来很强大，那具体如何使用呢？我们今天一起简单的来学习一下。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/702.html",
            "title": "jQuery Mobile教程-基础篇-列表篇",
            "description": "\n特别申明：本系列教程由小春撰写\n列表也是移动开发中比较频繁使用的一个组件,我们采用\"提问●回答\"的方式来初步地了解一下：\n\n\t1、如何设置列表？\n示例：\n\n<!-- listview ul start -->\n<ul data-role=\"listview\">\n\t<li>\n\t\t<a>可以给ol或者ul增加data-role</a>\n\t</li>\n\t<li>\n\t\t<a>默认情况下li是c的主题</a>\n\t</li>\n</ul>\n<!-- listview ul end -->\n图示： "
        },
        {
            "link": "https://www.w3cplus.com/css/bem-definitions.html",
            "title": "BEM的定义",
            "description": "\nBEM代表块（Block），元素（Element），修饰符（Modifier）。这些术语的含意将在本文进一步阐述。编程方法论中一个最常见的例子就是面向对象编程（OOP）。这一编程范例出现在许多语言中。在某种程度上，BEM和OOP是相似的。它是一种用代码和一系列模式来描述现实情况的方法，它只考虑程序实体而无所谓使用什么编程语言。我们使用BEM的原则创建了一个前端开发技巧和工具的集合，这样我们就能快速构建一个网站，并且保证他们长久的可维护性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/flexbox-basics.html",
            "title": "Flexbox——快速布局神器",
            "description": "\n在很多方面HTML和CSS是一个强大的内容发布机制——易学、灵活和强大。但复杂的布局是他不擅长的。如果你想创建一个简单的图片与文本的布局，那么还算简单，但是制作一个复杂的多列布局，要做的众多浏览器的兼容一致那还是很复杂的。我们通常都是使用浮动或者其他方法来实现这个目的，而其中出现的bug和浏览器的差异性使用对布局失去兴趣。为了应对这种情况，CSS3包含了许多模块，使用不同的布局更加容易。我们已经在其他文章中看到多栏布局和媒体生成的内容分页，现在我们将注意力转向CSS3的 Flexbox布局模块。今天根据Chris Mills的《Flexbox — fast track to layout nirvana?》一文所译，向大家介绍Flexbox这一布局神器，希望大家喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/710.html",
            "title": "jQuery Mobile教程-中级篇-button组件",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来深度认识一下jQuery Mobile的button组件\n\t主要让大家熟悉一下动态创建按钮、禁用按钮以及启用按钮\n补充：如果你对button还是比较陌生的话，可以查看我们的《基础篇-按钮篇》\n\n\t1、动态创建按钮\n示例： "
        },
        {
            "link": "https://www.w3cplus.com/css/decoupling-html-from-css.html",
            "title": "HTML和CSS的分离",
            "description": "\n多年以来，web标准社区一直在讨论关注点——分离。把CSS样式规则从javascript代码和HTML结构里分离出来。我们确实是这么做的，不是吗？CSS规则放到了独立的文件里，javascript代码放到了另一个独立的文件里，HTML文件就只剩下HTML结构了，这样做既简洁又美观。由Jekst根据Jonathan Snook的英文文章原名《Decoupling HTML From CSS》进行翻译，给大家介绍了一些HTML和CSS分离的技巧与细节。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/701.html",
            "title": "jQuery Mobile教程-基础篇-网格篇",
            "description": "\n特别申明：本系列教程由小春撰写\n本文主要看一下jQuery Mobile体系中的grid组件，我们采用\"提问●回答\"的方式来初步地了解一下：\n\n\t1、如何设置2列布局？\n示例： "
        },
        {
            "link": "https://www.w3cplus.com/css/fifty-shades-of-bem.html",
            "title": "BEM的50道阴影",
            "description": "\n当一种开发理念变得流行时，通常它也会被程序员们进行各种分支以适应各种不同的工作流和习惯。这无疑会导致各种版本的实现，情况看上去有些支离破碎。此时此刻，这种事情正发生在BEM上。在过去的几个月里我有幸亲自尝了尝不同“口味”的BEM。\n虽然这篇博文和E.L.James的《格雷的50道阴影》（泽注：Fifty Shades of Grey据说是一部销量超过了《哈里波特》七部书的销量总和的全球畅销情色小说……）没有任何关系，但我认为它是个非常吸引人的标题。各位，这里没有任何情色内容（尽管一些开发者在使用了BEM方法论后发现他们的CSS代码变得十分性感）。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/create-an-adaptive-layout-with-css-grid.html",
            "title": "如何使用CSS网格创建一个自适应布局",
            "description": "\n毫无疑问，当开发人员谈到网页布局时会有很多选择。为了确保你的布局可以适应不同设备、方向和屏幕大小，你需要慎重考虑清楚，你要使用哪些方法来布局。网格布局是一个新的布局方法，使你可以把网页的主要区域在游览器窗口内设置一个固定大小或者自由空间，你也可以两个同时使用。\n因为网格布局使用您能够根据列和行对齐，但没有内给结构，它还使场景像这篇文章中描述的，要么是不可能或很难用HTML和CSS样式实现。但你使用网格布局和媒体查询结合，你可以使你的布局来适应设置变化，比如定位、可用空间等。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/designing-css-layout-with-flexbox.html",
            "title": "Flexbox制作CSS布局易如反掌",
            "description": "\n伸缩盒模型（flexbox）是一个新的盒子模型，主要优化了UI布局。作为实际布局的第一个CSS模块（浮动真的应该主要用来制作文本围绕图片这样的效果），它使很多任务容易多。Flexbox的功能主要包手：简单使用一个元素居中（包括水平垂直居中），可以让扩大和收缩元素来填充容器的可利用空间，可以改变源码顺序独立布局，以及还有其他的一些功能。Flexbox一直都存在。它最开始作为Mozilla XUL的一个功能，被用来制作程序界面，如Firefox的工具栏，就多次使用这个属性。该规范最近才达到稳定，在主要的浏览器对新的版本有相当完整的支持。然而有一些事项需要注意。在IE中规范更改了他的语法，因此你将需要使用一个稍微不同的语法。Chrome当前版本仍然需要添加前缀“-webkit-”，而Firefox和Safari仍然还在使用最老版本的语法。Firefox已经更新为最新的规范，但是，在实际项目中目前最好还先别使用最新的规范，直到它被认为没有bug了或者更稳定了，在使用。在这之前，Firefox还是使用最老的语法规范。根据David Storey的《Designing CSS Layouts With Flexbox Is As Easy As Pie》所译，再次向大家介绍了Flexbox的使用，以及罗列出Flexbox布局模块在各规范下的属性对比。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-lengths-of-css.html",
            "title": "CSS的长度单位",
            "description": "\nCSS的长度单位，大家看得最多的就是像素单位（px）还有就是百分比单位，可是未曾想到，除了这两 个单位还有很多我们不熟悉的，甚至是没有见过的单位，比如说rem、vw、vh等等。当然有些单位现在在各浏览器下还不友好，但是我想将来会像px一样使用起来，这样就能解决一些px之类单位无法实现的功能。今天由Jekst根据Chris Coyier的英文文章原名《The Lengths of CSS》进行翻译，给大家带来一篇有关于CSS的长度单位介绍的文章，希望大家喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/about-html-semantics-front-end-architecture.html",
            "title": "关于HTML语义和前端架构",
            "description": "\n关于HTML语义化大家讨论的很多，熟不知如何写一个具有语义化的结构。同时前端的架构要怎么布。这些都是做为前端人员应该去考虑的问题？由Jekst根据Nicolas的英文文章原名《About HTML semantics and front-end architecture》进行翻译,Nicolas把他喜欢的思想，经验和主意，还有在过去的一年里，我试验过的想法汇集起来。它们包括HTML语义，前端构架的元素与途径，类命名模式和HTTP压缩。希望这篇译文对大家有所帮助——我们探索的脚步将永无止境,直到回到最初的起点,到那时 我们才会第一次,真正了解 自己出发的地方。\n "
        },
        {
            "link": "https://www.w3cplus.com/design/mobile-design-colours.html",
            "title": "移动设计的新趋势——色彩",
            "description": "\n移动设计领域正发生着质的飞跃。但不得不说操纵移动设计最重要的因素是色彩。色彩之所以在移动设计领域没有那么快流行起来是因为人们在用色上不够大胆并没有充分利用它。幸好这种情况正在改变——因为色彩渐渐变成移动设计中不可或缺的元素并有了它自己的流行趋势。由Summer根据Paula Borowska的英文文章原名《The new Mobile Design trend – Colour》进行翻译，此教程介绍了移动端的色彩运用。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/adapting-your-webkit-optimized-site-for-internet-explorer-10.html",
            "title": "让那些为Webkit优化的网站也能适配IE10",
            "description": "\nIE10对HTML5的广泛支持确保了你的网站在Windows Phone 8中比以往任何时候都能运行的好。之前，为了支持iOS或Android你可能会把Webkit作为专门优化的目标。现在可以让你为Webkit优化的网站也能轻松适配IE10。这意味着你将维护更少的代码，并且，可以给你的客户一个更好的体验。更让人欣喜的是，这些改变会让你的站点更符合HTML5标准。\n本指南通过一系列的技巧、最佳实践和代码示例来帮助你把专为Webkit优化过的网站更加轻松地适配到IE10。在我们团队与一些颇受欢迎的网站一起合作来把他们为webkit优化的网站适配到IE10的过程中产生了本指南。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/ie10-flexbox-layout.html",
            "title": "IE10中的Flexible Box(\"Flexbox\")布局",
            "description": "\n经过这一系列对Flexbox的介绍，我想大家对Flexbox在布局中的使用以及其强大功能特性给我们布局带来的方便性都有所了解。话又说回来，虽然Flexbox功能强大（特别是弹性布局），但还是很多同学不敢使用，也不想尝试性使用。我想主要原因出于他的语法版本众多，浏览器对其兼容性等。在《“老”的Flexbox和“新”的Flexbox》一文中，让我们了解了如何识别Flexbox的语法版本，而在《使用Flexbox：新旧语法混用实现最佳浏览器兼容》和《跨浏览器的Flexbox》能实现浏览器的完美兼容性。既然有方案能让Flexbox布局模块在众多浏览器下实现兼容，那我们今天要说什么呢？从浏览器的兼容性中可以看出，Flexbox布局模块的最新语法“display:flex”在Chrom25.0+、Opera12.1，Firefox22+、IE11+都得到了支持，但我们还有很多用户并不像我们这些前端人员会及时更新自己所用浏览器的版本。那么就存在Flexbox的兼容性问题。说了一大堆的废话，还未进来主题，真有点对不住读者，接下来也不浪费大家宝贵时间，我们一起进入今天的主题——IE10中的Flexible Box(\"Flexbox\")布局\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/777.html",
            "title": "Less/Sass编译工具，koala使用指南",
            "description": "\n如果你正在使用sass、less或coffee，而没有注意到koala，那说明你可能已经好久没有更新你的知识库了。koala这个由国人编写的，用于编译sass、less、coffee利器，在最近的短短几个月曝光率不亚于任何其他的技术。当然这跟其作者的辛勤劳动，让其更强更优秀有很大关系。在此先感谢koala的作者们，感谢你们给我们带来这么棒的免费工具。\n其实编译工具有很多，我本人就各种免费的编译sass的工具都试过，一般都是不了了之，要么功能有限，要么编译速度不敢恭维，直到一个偶然的机会遇到koala，才停止搜索脚步，稳定使用它，现在它已经是我开机必备工具之一。下面我将以我自己的实际经验，简单介绍下koala。 "
        },
        {
            "link": "https://www.w3cplus.com/blog/700.html",
            "title": "jQuery Mobile教程-基础篇-表单篇",
            "description": "\n特别申明：本系列教程由小春撰写\n本文主要看一下jQuery Mobile体系中的form常见的几个组件，我们采用\"提问●回答\"的方式来初步地了解一下：\n\n\t1、如何设置radio？\n示例： "
        },
        {
            "link": "https://www.w3cplus.com/css3/a-guide-to-flexbox.html",
            "title": "一个完整的Flexbox指南",
            "description": "\nFlexbox布局（Flexible Box)模块旨在提供一个更加有效的方式制定、调整和分布一个容器里的项目布局，即使他们的大小是未知或者是动态的。（这里我们称为Flex）。Flex布局主要思想是让容器有能力让其子项目能够改变其宽度、高度(甚至顺序)，以最佳方式填充可用空间（主要是为了适应所有类型的显示设备和屏幕大小）。Flex容器会使子项目（伸缩项目）扩展来填满可用空间，或缩小他们以防止溢出容器。最重要的是，Flexbox布局方向不可预知，他不像常规的布局（块就是从上到下，内联就从左到右）。而那些常规的适合页面布局，但对于支持大型或者杂的应用程序（特别是当他涉及到取向改变、缩放、拉伸和收缩等）就缺乏灵活性。根据Chris Coyier的《A Complete Guide to Flexbox》所译,再次向大家系统介绍了Flexbox模块中的各个术语，以及属性、属性参数所起的作用，并附上几个简单的实例与大家理论与实战相结合，实打实的了解清楚Flexbo模块。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-chinese-reference.html",
            "title": "SASS官方文档",
            "description": "\n一直想将SASS官方文档翻译出来给大家分享，没想到今天在搜索SASS相关资料的时候，竟然让我发现了一位同学已将SASS官方文档译了出来，虽然没有全部译完，但已经很完整了。所以我特意将此篇文章转载到W3cplus上来。我想这篇文章对于一些初学者来说会有很大的帮助的。在此非常感谢Peter同学。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/animating-flexboxes-the-lowdown.html",
            "title": "Flexbox中动画内幕",
            "description": "\nFlexbox是CSS3中一个重要的而且非常有用的属性，用来制作弹性布局是非常的方便而又强大。自2009年至今， 这个属性的语法规则也是变更多回。对于难度也较其他属性复杂的多，要用好这个属性还是需要花一些力气的。今天看到Chris Mills写了一篇有关于flexbox的动画效果教程《Animating flexboxes: the lowdown》，蛮好理解的，所以花了一天时间译了一下这篇文章，希望对大家的学习有所帮助，里面css部分还是蛮简单的，对于不懂js的同学，要理解里面的js代码功能还是有点蛋疼，像我一样，还有部分没理解。喜欢的就往下看吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-debug-with-developer-tool.html",
            "title": "SASS调试",
            "description": "\n大家都知道几大主流浏览器对CSS的调试都非常方便，特别是通过Firebug这样的浏览器插件，更是让大家爱得没法说了。那么我们玩SASS能不能像玩CSS一样，通过浏览器的开发者工具，直接调试SASS呢？\n带着这样的问题，我开始在互联网上寻找这样的答案。值得庆幸的是在net tuts+上看到Umar Hansa的一篇教程——《Developing With Sass and Chrome DevTools》。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/699.html",
            "title": "jQuery Mobile教程-基础篇-弹窗篇",
            "description": "\n特别申明：本系列教程由小春撰写\n本文主要看一下jQuery Mobile体系中的dialog组件,我们采用\"提问●回答\"的方式来初步地了解一下：\n\n\t1、如何设置alert dialog？\n示例： "
        },
        {
            "link": "https://www.w3cplus.com/css3/how-to-turn-your-icons-into-a-web-font.html",
            "title": "如何把你的图标转换成web字体",
            "description": "\n使用@font-face运用本地字体，制作一些特殊的字体效果非常方便，特别是使用@font-face制作图标，更是让我们省了很多事情。但我们使用的一般都是别人提供好的图标字体，这样一来就有很多同学在问，如何制作自己需要的字体呢？或者说如何将自己需要的图标转换成自己需要字体，在运用到web页面中？这个问题问得很好，其实实现思路并不复杂，我们需要通过一些适量图的软件，绘制出矢量图标，然后通过一定的工具将这些图标转换成需要的字体。或许你会说，这不是废话，还是没有谈到怎么做出来。大家不用着急，根据Martin Gittins的《How to turn your icons into a web font》文章介绍，你只需要一款制作矢量图的应用软件，和一个免费的Web应用程序IcoMoon将矢量图转换成Web字体工具就可以轻松的帮你实现。如果你不信，不仿往下看，我想你看后，以后再也不会使用位图了。（^_^）\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-basic-syntax-and-features.html",
            "title": "SASS基础教程——SASS基本语法与特性",
            "description": "\n前一段时间，一直在聊SASS的环境、安装、调试以及转译等相关问题。但一直未真正的切入SASS是如何使用的。我在想，更多的同学其关注点还是如何使用SASS？如何在项目中运用SASS？那么从这篇文章开始，我们一起来走进SASS。\n当你想真正走入SASS的时候，个人建议您能按照前面几篇文章，在你的电脑中构建好SASS的环境，包括如何安装环境、安装SASS、调试SASS以及编译SASS。或许正因为前期有这么多事情要做，很多同学不敢轻意的踏入，其实没有大家想得那么复杂，不管是在Window下还是在Mac OS X下，这些都是非常简单的。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/698.html",
            "title": "jQuery Mobile教程-基础篇-可折叠篇",
            "description": "\n特别申明：本系列教程由小春撰写\n本文主要看一下jQuery Mobile体系中的可折叠内容，我们采用\"提问●回答\"的方式来初步地了解一下：\n\n\t1、如何设置折叠？\n示例：\n\n<div data-role=\"collapsible\">\n<h3>本文主要介绍可折叠</h3>\n<ol data-role=\"listview\" data-inset=\"true\">\n\t<li><a>如何设置折叠</a></li>\n\t<li><a>如何设置theme</a></li>\n\t<li><a href=\"#open-mode-page\">如何设置展开模式</a></li>\n</ol>\n</div>\n图示： "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-generated-content-counters.html",
            "title": "如何从css生成内容和计数组件中得到益处",
            "description": "\nCSS生成内容对大家来说并不陌生，使用伪类（伪元素）配合“content”属性添加内容。大家可以通过这个属性给元素添加“字符串”、“图标”和“空格”等，其实除了这些之外，还可以添加计数器编码。计数器(counter-increment、counter-reset)我想有很多同学都没有接触过，因为在平时的使用中相当的少。其实早在去年Red Team在CSS3 ordered list styles（中文版本）中就分享了这两个属性。当然这里只是初步介绍了一下，并没有深入的讲解。而神飞在2009年根据CSS Content, Counter-Increment & Counter-Reset一文译了篇《CSS content, counter-increment 和 counter-reset详解》，里面详细介绍这个属性。今天D姐根据Gabriele Romanato的英文文章原名《How To Benefit From CSS Generated Content And Counters》进行翻译,再次向大家介绍了CSS如何生成内容，如何使用计数器属性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/flat-pixels.html",
            "title": "Flat Design 与Skeuomorphism之间的战争——平面像素",
            "description": "\nFlat Design在本年度已成为前端设计的一个流行名词，许多新网站以及需要重新设计的网站都纷纷采用了扁平化设计的方案，这种趋势无论是在网页设计或者移动端的设计方面都已经蔓延开了。但skeuomorphism这个词可能很多同行朋友都并不太熟悉，其实我也是初次接触，维基百科说了：skeuomorphs是指原有物件中某些必需的形式在新的设计中已不再必要，但新设计仍模仿旧有形式，以使新的外观让人感觉熟悉和亲切。如果你对skeuomorphic一无所知，那么很显然，这说明你在这几个月来还没接触过这个被接近5000篇博客文章所介绍探讨的话题。因此，现在你更要好好把握住这个“进修”的机会咯！今天由LL根据Sacha Greif的《The battle between flat design & Skeuomorphism——flat pixels》所译，介绍了flat design和skeuomorphic的对比，希望大家喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/697.html",
            "title": "jQuery Mobile教程-基础篇-按钮篇",
            "description": "\n特别申明：本系列教程由小春撰写\n相比其他组件，按钮是最基本也是最常见的，那在jQuery Mobile的体系中，到底是什么样子的呢？我们采用\"提问●回答\"的方式来初步地了解一下：\n\n\t1、按钮包含哪两类？\n\n\t常见的：\n\n<button>button</button>\n<input type=\"button\" value=\"input button\"/>\n<input type=\"submit\" value=\"input submit\"/>\n<input type=\"reset\" value=\"input reset\"/>\n<input type=\"image\" value=\"input image\"/>\n图示： "
        },
        {
            "link": "https://www.w3cplus.com/blog/732.html",
            "title": "jQuery Mobile教程-高级篇-原理之组件自动初始化",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来深度认识一下jQuery Mobile的内部设计原理中组件如何自动初始化\n\t（注释：下面示例中的代码片段均来自1.1.0版本）\n\t很多看过源码的同学或者使用过jquery mobile的同学们，大家有没有一个很大很大的问题：\n\t------- jquery mobile提供了几个组件，他们如何自动初始化的？\n\t！！重点说明：下面类似的自动初始化的流程多是在pagecreate触发后调用，有关pagecreate相关的说明可以查看我前面的相关介绍\n我们挑选其中一个组件：listview\n先看一张流程图： "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-gui-tool-koala.html",
            "title": "SASS界面编译工具——Koala的使用",
            "description": "\n《SASS界面编译工具——Codekit的使用》一文中图解了\"CodeKit\"图形工具编译SASS项目。由于CodeKit是一款付费工具，而且只能在Mac中使用，因此国内众多SASS爱好者，或者初学者也就无法体验CodeKit工具编译SASS项目。幸运的是，有一款国产图形工具Koala和CodeKit功能极其类似，支持多个平台，而且是开源的。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-compile.html",
            "title": "SASS编译",
            "description": "\nSASS的出现让CSS变得更加有意思。至于SASS是什么？就不在做更多的阐述，因为她并不是一个新鲜的产物，现在在互联网上可谓是铺天盖地。如果你实在想知道SASS是什么？那你只要简单得知道他是CSS预处理器语言的一种。\nSASS在CSS的基础上做了一些扩展，使用SASS你可以使用一些简单的编程思想进来编写CSS。比如，SASS中可以定义变量、混合、嵌套以及函数等功能。只不过SASS不像CSS，可以直接运用到项目中，如果你需要将样式运用到项目中，有一个步骤是必须经过的——SASS转译成CSS。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/731.html",
            "title": "jQuery Mobile教程-高级篇-特殊选择器扩展之:jqmData",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来认识一下jQuery Mobile的一个比较特殊的选择器方式\n\t（注释：下面示例中的代码片段均来自1.1.0版本）\n\t很多看过源码的同学，应该多会在很多地方看到下面这种选择器，用过jquery的人都会疑问？\n\t---- jquery本身没有这种选择器类型的支持！\n源码示例：\n\n//获取页面data-role=\"page\"和data-role=\"dialog\"的数目\n//#7470\nvar $pages = $(\":jqmData(role='page'),:jqmData(role='dialog')\")\n\n那我来大家来看一下到底是咋样实现的呢？\n源码展示： "
        },
        {
            "link": "https://www.w3cplus.com/css3/alexwolfe-buttons.html",
            "title": "Alexwolfe的Button库使用",
            "description": "\n前几天在互联网上看到alexwolfe制作的Button库，觉得很有意思，特意花了些时间学习了一下这个库的源码与使用。今天花了点时间将期整理与大家分享。\nButton库并不是简单的一个CSS制作的Button库，在这里alexwolfe大师采用了SASS和Compass进行开发和维护的。或许有些同学看到这两个东东会觉得很蛋疼，不知道怎么使用，其实没有那么恐怖的，只要你略懂CSS，就完全可以使用这个按钮库，大不了直接git下来他的CSS到你的项目中，这样也能使用，只不过你要按你的设计风格来调整就略会麻烦些。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/730.html",
            "title": "jQuery Mobile教程-高级篇-pagecreate事件由来",
            "description": "\n特别申明：本系列教程由小春撰写\n本文我们来深度认识一下jQuery Mobile体系中非常非常非常有用的事件：\n\t--------pagecreate以及pagebeforecreate的由来!\n\t（注释：下面示例中的代码片段均来自1.1.0版本）\n\t很多看过源码的同学，应该多会在很多地方看到下面这种事件绑定，我挑选了第一个出现的地方：\n源码实例： "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-gui-tool-codekit.html",
            "title": "SASS界面编译工具——Codekit的使用",
            "description": "\n在《SASS编译》和《Nodejs+Grunt配置SASS项目自动编译》教程中，我们详细介绍了使用和使用命令完成SASS项目的转译任务，其中还可以使用和命令实现时时监控SASS项目，一旦修改任何SASS文件，都会自动将SASS文件转译成CSS。\n当然，我们可以通过系统自带的命令行或者其他的终端命令工具，实现SASS的编译工作，但对于前端设计人员而言，虽然常用能记得住这些命令，终究会觉得不习惯。为此，我们可以使用APP应用来帮助我们完成SASS编译工作，从此告别使用命令来转译SASS。\n目前为止，有关于SASS编译的界面工具数不胜数，例如：Scout、CodeKit、LiveReload、Compass、Fire以及国产的编译工具Koala等。其中前几款都是付费工具，唯有Koala是免费的。\n孰好孰坏，我们不做过多的评论与对比。从我个人出发，我更趋向于CodeKit、Compass和Koala。由于Compass无法获取到破解版本，同时CodeKit与之无太多区别，所以在我的Mac系统中，我安装了CodeKit。今天特意和大家一起分享一下使用CodeKit的一点经验。\n\n\t \n "
        },
        {
            "link": "https://www.w3cplus.com/css/image-techniques-for-creating-depth-in-web-design.html",
            "title": "图像技术在网页中创造深度",
            "description": "\n我们生活在一个三维的世界中，设计师们每天都试图在网页设计中能够重现这个三维世界的某些东西。其中，景深——这一元素的加入能在很大程度上为某些特定的设计增加真实感。这其实比你想象的要简单。在2D屏幕上模拟真实事物的关键是利用图像创建景深。而这一效果可以用多种方式来实现，包括摄影本身，图像图层，或者是操作一些特效来实现。由陈陆扬根据Carrie Cousins的《USING TRANSPARENCY IN WEB DESIGN: DOS AND DON’TS》所译,给大家介绍了图片在网页设计中的深度运用，以及使用的一些细节技巧。希望对喜欢web设计的同学有些许帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/a-plain-english-guide-to-javascript-prototypes.html",
            "title": "通俗的英文指南——Javascript的原型",
            "description": "\n当我开始学习JavaScript的对象模型时，第一反应就是难以置信。我完全被它的原型本质给弄糊涂了，毕竟这是我头一次遇到以原型为基础的语言。因为JS中有构造函数这个概念，所以我看不出使用原型能给JS带来任何的好处。我敢说你们中的大部分人也有同样的经历。今天由Sunnylost根据Sebastian的英文文章原名《A Plain English Guide to JavaScript Prototypes》所译，跟大家一起探讨一下javascript原型的知识，希望大家喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/elements-horizontally-center-with-css.html",
            "title": "六种实现元素水平居中",
            "description": "\n居中效果在CSS中很是普通的效果，平时大家所看到的居中效果主要分为三大类：水平居中、垂直居中和水平垂直居中。而其中水平居中相对于后两者来说要简单得多。早期总结了一下互联网上有关于水平垂直居中的几种实现方案，比如说《CSS制作水平垂直居中对齐》中介绍了八中实现水平垂直的方案，而在《CSS制作图片水平垂直居中》一文介绍了四种实现图片垂直居中的方案，并且在《CSS3实现水平垂直居中》使用了css3的flexbox的属性轻松实现多行文本水平垂直居中的方法。当然大家有可能认为这些方法对于浏览嘎嘎的兼容性处理太烦了，也有人使用jQuery的方法实现水平垂直居中效果，比如在《jQuery制作元素在屏幕中水平垂直居中效果》中介绍的。今天我在这篇文章中向大家介绍实现水平居中的六种不同方法，希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/666.html",
            "title": "深入了解 Flexbox 伸缩盒模型",
            "description": "\n介绍\nFlexbox(伸缩布局盒) 是 CSS3 中一个新的布局模式，为了现代网络中更为复杂的网页需求而设计。本文将介绍 Flexbox 语法的技术细节。浏览器的支持越来越快，所以当 Flexbox 被广泛支持并应用时你将会快人一步。如果你想知道它是什么并是如何工作的，不妨仔细了解下吧！\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-preprocessor-sass-vs-less-stylus-2.html",
            "title": "CSS预处理器——Sass、LESS和Stylus实践【未删减版】",
            "description": "\n《CSS预处理器——Sass、LESS和Stylus实践》一文是在《程序员》杂志上发布的内容，由于篇幅所限，发表的文章删除了一些基础内容以及一些示例代码，为了让初次接触CSS预处理器语言的同学能更好的深入了解，特将未删除版本文章重新整理发布。全文从Sass、LESS和Stylus的背景介绍、安装步骤、转译方法、语法规则、基本特性和高级应用六个方面对目前世面上流行的三款CSS预处理器语法做了一个对比。他们各有各的优势，也各有各的劣势。希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/browser-hacks.html",
            "title": "主流浏览器的Hack写法",
            "description": "\n此处的“hack”并非是网络中很神秘的组织“黑客”，而是使用他们可以帮助你解决浏览器下一些怪异和特殊的bug。很多时候对于这样的讨论也非常多，比如说在您的代码中应不应该使用hack？甚至延伸到使用“hack”是一个优秀的前端人员？其实，有时候是逼不得以，必须为之。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/flat-design.html",
            "title": "扁平化设计：你在这趋势中收获了什么？",
            "description": "\nFlat design在国内被译为扁平化设计，可以说是风靡全球，国内外大小型网站改版都在使用这种设计风格。designmodo.com更是推出了Flat UI，讨论的人是越来越多。W3cplus也借着这股风把站点改成了flat design 与metro风格的结合。并且我们也将在近期推出一系列有关于flat design的设计。今天首先由LL根据Carrie Cousins的《Flat Design: Can You Benefit from the Trend?》所译，给大家带来了一篇《扁平化设计：你在这趋势中收获了什么？》，希望大家能在此文中找到自己想要了解的知识点。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/216-web-safe-color-info.html",
            "title": "216个Web安全颜色",
            "description": "\nWeb上的颜色运用，对于设计师来说是小菜一碟，对于不是设计师来说还真是头痛的事情。打个比方说，Web的安全色是什么？或者说Web的安全色有多少？说实话，我以前只知道一个数字216，但我不知道具体是什么？今天为大家整理了216个web安全颜色，仅供大家参考。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-definitive-guide-to-using-negative-margins.html",
            "title": "负margin用法权威指南",
            "description": "\nmargin属性是CSS中最基本属性之一，在网上有关于margin的介绍也是非常的多，比如：张旭鑫的《css margin的相关属性，问题及应用》、海玉的《不要告诉我你懂margin》等文章都是非常优秀的教程。今天我们也老话重谈，由陈陆扬根据John Imbong的《The Definitive Guide to Using Negative Margins》文章所译，重新介绍了margin的属性运用，并且在文章结尾处收集了国内外有关于margin介绍的相关教程与案例，来了个资源汇总，方便大家阅读，希望这篇文章能帮助大家更好的理解css的margin属性以及其运用。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/sass-vs-less-vs-stylus-a-preprocessor-shootout.html",
            "title": "预处器的对比——Sass、LESS和Stylus",
            "description": "\n发挥CSS预处器的作用是一种很有挑战性的事情。CSS预处器有不同的语言，有不同的语法和功能。在这篇文章中,我们将介绍三种不同CSS预处器的蛮量、功能以及他们的好处——Sass、LESS和Stylus 。CSS预处理器是一种语言，用来编写一些CSS的特性,而且无需考虑浏览器兼容性的问题。CSS预处器有成千上万的特性。本文根据Johnathan Croom的《Sass vs. LESS vs. Stylus: Preprocessor Shootout》所译，让我们开始学习CSS的三种预处器对比。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/my-w3cplus.html",
            "title": "我和W3cplus的故事",
            "description": "\n时间如流水，2012年12月21日并不是世界的末日，随之张开双臂迎来了新的一年2013年。回首往事，W3cplus从域名的注册开始到2012年的12月28日，也算是走过了两年的历程。\n两年的时间对于人的一生来说是很短暂的，但对于一个刚学习走路的新生儿来说，这两年是非常宝贵的，因为这两年能让他慢慢的学着走路，慢慢的让他走的更稳。为了能更好的激励自己，为也这宝贵的两年光阴，我想回忆一下我和w3cplus之间的故事。\n机缘巧合，我的工作中接触了Drupal，为了能实战，我开始使用Drupal制作网站，一个属于自己的个人网站，也就是今天的W3cplus。在创建w3cplus时我碰到了许多问题，有一些问题是我个人能力无法解决的（因为我只是一个CSSer），还好有很多热心朋友：@为之、Drupal中国的龙马、Lugir的@袁哥帮助，特别是@为之兄手把手的教我，让我从中受益良多。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/using-transparency-in-web-design-dos-and-donts.html",
            "title": "网页中使用透明注意事项",
            "description": "\nWeb中透明的运用很多，其技术实现也很简单，一个属性就搞定的事情，但是什么时候应该用透明，什么时候不应该用透明，怎么个用法，用到什么程度，我想还是有很多同学不知道。如果你和我一样以前从未关注过这样的细节问题，不仿花几分钟阅读一下由陈陆扬根据Carrie Cousins的《USING TRANSPARENCY IN WEB DESIGN: DOS AND DON’TS》所译教程，本教程中详细介绍了使用透明度应该注意的细节以及使用场合。读后受益良多。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-architecture.html",
            "title": "CSS架构",
            "description": "\nCSS架构，听名称够霸气的了，当然这也是很多CSSer想做的事情，也是一些团队的想做的事情，因为谁都想让自己的工作变得轻松，国内有很多大公司都有自己的前端架构，而且有些成员在维护，但对于小公司或者一些同学想学习写CSS架构却是件很困难的事，困难到都不知道从何处下手，要怎么写，要写到什么程度。由于这一系列的为什么，让很多同学只是想想，却不敢动手一试，就算是试着写的同学都半路夭折了，我就是属于这一类型，但我始终没有放弃，我一直在积累这方面的知识，也在开始构思如何写一个CSS方面的东西让自己的工作变得更轻松，让更多的同学受益。今天D姐根据Philip Walton的《CSS Architecture》一文译了一篇有关于CSS架构的文章，这篇文章从结构到样式进行了详细介绍，更详细介绍了写CSS架构时会碰到的一些坑，又是如何的来填这些坑。通过这篇文章的学习，让我认清了当初的失败之处，同时让我的思想与视野都更开阔了，个人认为是很值得阅读的一篇文章。感兴趣的同学，或者想做这样一件事情的同学，不仿花几分钟阅读一下。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/advanced-html-css-lesson3-complex-selectors.html",
            "title": "HTML和CSS高级指南之三——丰富多彩的选择器",
            "description": "\n你要美化Web页面，你就需要选到相应的Web元素，如何选择相对应的元素，这样的工作都是由CSS的选择器来实现，因此说，CSS选择器不第二重要，没人敢说第一。99根据Shay Howe的《An Adavnced Guide to HTML & CSS》第三课《Complex Selectors》所译从六个部分解说CSS的选择器，可以说面全，种类多，值得一读。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-absolute-beginners-guide-to-sass.html",
            "title": "Sass新手指南",
            "description": "\nSass是一门非常优秀的CSS预处理语言，他是由Hampton Catlin创立，其中他还有另外一个名称SCSS，这个SCSS看起来更像CSS。最近迷上了CSS预处理器方面的东东，所以开始在针对性的学习Less、Sass和Stylus三个流行的预处器语言的基础知识，希望具有一定的基础后可以针对一些优秀的框架，研读他们的源码。所以今天给大家介绍的是Sass新手方面的指南。这篇文章是根据Andrew Chalkley的《The Absolute Beginner’s Guide to Sass》所译，希望这篇译文能帮助大家对Sass有一个概念性的了解，当然要深入的介绍的话，我想我们可以用一本书来描述，此处只是做引导性的学习，今后我也会加强这方面的分享，有兴趣的同学就观注一下相关更新吧，让我们一起来学习这几种CSS预处理器语言。更好的帮助大家开发CSS、维护CSS，从而提高自己的效率。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/an-introduction-to-object-oriented-css-oocss.html",
            "title": "面向对象的CSS(OOCSS)",
            "description": "\nOOCSS，第一次接触的时候觉得他很神奇，根本没有想到，在CSS中也会有一个面向对象的概念。因为面向对象是那些程序员的产物，怎么就和CSS挂上关系了。后来进行了解，知道OOCSS更趋向于一种思想。于是自己也学了一些这方面的思想，并做了些许的读书笔记（《OOCSS——概念篇》和《OOCSS——核心篇》），可还是没有领会到其中神的层面，今天D姐的译文，让我再次了解了OOCSS，真心不错的一种思想，很值得每一个前端人员去思考。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/facebook-news-feed-design.html",
            "title": "了解Facebook News Feed 最新设计",
            "description": "\nFacebook一直是Web前端人员模仿学习的好例子，我一直在观注他的一切变化，也非常喜欢这个网站的前端上的知识，从结构到样式，还有设计以及色彩。前期在站上发布了一些有关于这方面的介绍，比如说《社交媒体网站设计尺寸参考》、《Facebook 和 Twitter的UI概念设计》。这几天Facebook发布最新的News Feed的设计,让我非常的兴奋。并且今天看到了Hongkiat.com对这个新设计的一些剖析，觉得对我们前端设计师非常的有帮助。于是把这篇文章先译出来，与大家一起分享。在此需要特别感谢Sunnylost同学，是他花了一天的时间整理了这篇译文，让大家一饱眼福。感兴趣的同学，继续往下看吧！\n "
        },
        {
            "link": "https://www.w3cplus.com/css/understanding-the-viewport-meta-tag.html",
            "title": "视窗meta标签的理解",
            "description": "\n随着移动端的风靡，Web在移动端的应用是越来越多了，有些团队为移动端单独制作一个网站，也有些团队为移动端使用Responsive设计。而且从中有一个很重要的概念就是“视窗的meta”标签的使用，这个跟移动端的页面渲染有直接的关系。早期在《此像素非彼像素》一文中有涉猎这方面的内容。今天杨礼鑫同学根据Paulund的英文文章原名《Understanding The Viewport Meta Tag》进行翻译，给大家介绍了Meta标签在移动端的一些运用，希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-specificity-things-you-should-know.html",
            "title": "你应该知道的一些事情——CSS权重",
            "description": "\nCSS的选择器对于一个前端人员来说是一个很熟悉的东西，她是CSS中很重要的一部分，早前在整理CSS3系列教程时，特意将CSS3的选择器和CSS的选择器做了一个总结，《CSS3基本选择器》、《CSS3属性选择器》、《CSS3伪类选择器》和《CSS选择器优化》。这样一来对选择器算是做了一个系统的学习与整理，但是对于CSS选择器权重一直没有做过太多的深究，总认为他是一个难啃的骨头。这次99根据Vitaly Friedman的《CSS Specificity: Things You Should Know 》文章整理了一篇译文，值得大家认真阅读。文章中对CSS选择器权重做了深入的介绍，并且附上很多相关的文章介绍。感兴趣的同学可以花点时间看看，你不会后悔的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/inline-blocks.html",
            "title": "应不应该使用inline-block代替float",
            "description": "\ninline-block和float这样的基础问题总是有太多的争论，大到专业从业人员的讨论和争锋，小到我们这样的菜鸟也拿他们来对比。不过我更关注的是我们什么时候使用inline-block来实际些，什么时候使用float又方便些。必竟有太多的理论与原由我们找不清楚（一时整不明白，或者说直到你退休也整不明白，至少我是这么认为的），与其花时间去争论他们哪个好哪个坏，还不如了解一下哪个用在什么场合适当些，这样或许能帮你解决很多实际性的问题。如果你感兴趣，就看看99为大家翻译的这篇文章《应该不应该使用inline-block代替float》。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/advanced-html-css-lesson4-responsive-web-design.html",
            "title": "HTML和CSS高级指南之四——响应式设计",
            "description": "\nResponsive（响应式设计）从去年开始讨论的人越来越多，而国外使用这种设计的也层出不穷。W3cplus紧跟国外的前沿，也在站上介绍了很多这方面的知识点，并收集了很多相关的资源。在Shay Howe的《An Adavnced Guide to HTML & CSS》教程中第四课也是《Responsive Web Design》，由D姐翻译。在整篇文章介绍了很多知识点，比说媒体、视窗、流体布局等等，因为这些知识点很Responsive息息相关，并且在每个知识点后面附上了大量的扩展阅读，我想喜欢Responsive的同学看完这篇文章后会受益非浅。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/clip.html",
            "title": "Clip",
            "description": "\nClip属性是大家经常会误解的一个属性，这篇文章帮助大家充分的了解和学习clip属性，用这个属性制作出更好的效果。如果你不知道也不用担心，接下来的内容将会涵盖clip属性的各个方法。详细阅读这篇文章，你将对clip属性有一个很深的了解。Clip属性在W3C官网是这样进行描述的：“通过对元素进行剪切来控制元素的可显示区域，默认情况下，元素是不进行任何剪切的，但是也有可能剪切区域也显示的设置了clip属性”。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/learning-to-use-the-before-and-after-pseudo-elements-in-css.html",
            "title": "学习使用：before和：after伪元素",
            "description": "\n伪类“:before”和“:after”在当今这个Web技术潮流之下，使用是越来越多。如果你有观注过各种网页设计的博客（或者有观注过本站的相关博文），你可能已经注意到了“:before”和“:after”在前端开发中展现的魅力。可能很多同学只知道是怎么用，但并未深入的去了解这两个伪类，并不要紧，今天由胡均根据Louis Lazaris英文文章原名《Learning To Use The :before And :after Pseudo-Elements In CSS》进行翻译，给大家介绍了“:before”和“:after”在Web设计中是如何起的作用，以及其需要注意的一些细节。希望能帮助更好的理解这两个伪类。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/advanced-html-css-lesson5-preprocessors.html",
            "title": "HTML和CSS高级指南之五——预处理器",
            "description": "\n预处理器器并不是新东西，大家知道的应该有Sass（Scss）、LESS和Stylus等CSS预处理器，但对于HTML预处理器，我想知道的并不会很多。如果你要是对预处理器感兴趣的话，不仿跟我一起看看这篇文章。本文是根据Shay Howe的《An Adavnced Guide to HTML & CSS》第五课《Preprocessors》所译，主要介绍了HTML预处理器“Haml”的一些基本用法以及详细介绍了Sass的使用方法，以及Sass和SCSS之间的对比。希望能让你对预处理器有一个新的认识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/responsive-mobile-navigation-menumethods-and-solutions.html",
            "title": "响应式导航菜单在移动端的制作方法与解决方案",
            "description": "\nResponsive设计现在是网页设计中的一种趋势，现在浏览网页不在是仅限于PC端，而是有很多类型的屏幕尺寸——桌面、笔记本电脑、平板电脑和智能手机等等。一个网页要能在这么多种类型屏幕上显示，Responsive设计似乎是一种完美的解决方案。因为他允许你创建一个网站，可以适应不同的分辨率。这是具有挑战性的，从桌面到移动端屏幕。为此，内容有需要隐藏的，图片必须能自动适应大小和一些其他网页元素需要相应的改变。详细的介绍可以阅读前面介绍的《Responsive Web Design》和《Responsive设计的十个基本技巧》。在这里，我们要看看网页设计中至关重要的UI组件之一网站导航菜单。因为导航也涉及到响应式设计的变化。\n解决方案有许多种，比如说使用选择下拉框制作菜单、CSS下拉菜单、切换导航菜单等，（可以看看《20款Responsive Menu教程》，这里有近20种响应式导航菜单制作案例与相关教程的介绍）。当然这些解决方案都有自己的优缺点，至于使用哪种解决方案，就需要根据您的需求，从中找到一个完美的解决方案来适合你的项目。接下来为大家提供一些响应式导航菜单的制作方法和解决方案，希望能帮你完成更好的Responsive设计。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/10-easy-and-useful-ways-to-improve-your-jquery-coding-and-performance.html",
            "title": "10个简单有效的方法帮你改善jQuery代码与性能",
            "description": "\n这是一简短的译文，文章标题就吸引了我，也没有细看就交给Sunnylost同学去译了。译后Sunnylost同学告诉我这篇文章不是十分优秀，后来我看了看，别称不上经典，但对于初学jQuery的同学还是很有帮助的，因此整理后还是发上来，一上让大家参考一下，另一方面不想让Sunnylost花时间译出来的东西就这么沉在我的电脑中。\n此篇文章由Sunnylost根据Desi Reuben-Sealey的英文文章原名《10 easy and useful ways to improve your jQuery coding and performance》进行翻译，主要介绍了在写jQuery时的一些改善方法，以及细节注意，从而在编写代码的时候就能改善自己的jQuery代码和相关性能。希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/understand-the-favicon.html",
            "title": "弄懂Favicon",
            "description": "\nFavicon对于一个网站来说，有人重视有人不重视，重视的人追求完美些，想让自己的站点有一个形象的LOGO显示，对于不重视的人来说，一个小小的ico能代表什么。不管你是重视还是不重视，但对于一位web制作人员来说，有很有必要知道的，那么你真的弄懂了Favicon是怎么一回事吗？在Web中要如何使用呢？如果你还不知道，那么带着这些问题，跟着David根据jonathantneal的《Understand the Favicon》译文，深入的了解一下Favicon在Web应用方面的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/an-introduction-to-less-and-comparison-to-sass.html",
            "title": "Less介绍及其与Sass的差异",
            "description": "\n自从一个月前偶然发现Less之后我就开始坚定的使用它了。就CSS本身而言，对于我来说从来就不是问题，但是我很好奇的相法，使用变量来沿着一个调色板为我的网站或者模板创建一些东西。拥有一个提供固定数量给我选择的调色板，可以让我避免颜色太过跳跃，以致于从一个已定的风格中脱离。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/safari-6-and-chrome-21-add-image-set-to-support-retina-images.html",
            "title": "image-set实现Retina屏幕下图片显示",
            "description": "\n最近一直在学习Retina屏幕下图片的处理方法，从《走向视网膜（Retina）的Web时代》一文中知道了Retina这个新名词，同时知道了他是什么东东，同时也继续在探讨Retina方面的知识点，随后在《移动Web——CSS为Retian屏幕替换图片》和《使用css sprites来优化你的网站在Retina屏幕下显示》中学习了Retina屏幕下图片的设置方法，或者说技巧吧，接下来《Web设计师如何制作Retina图像》学习了Retina屏幕下的图片制作技巧。其实可以说，这几篇文章可以让我知道如何在Retina屏幕下处理图片的技巧和细节了。因为这几篇文章从概念到制作Retina屏蔽下的图片，以及Coding实现，可以说是一条龙了。这些都是自以为事，为什么呢？除了这些方法，其实还有更先进的方法，这也就是我接下来要说的事情了。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/advanced-html-css-lesson1-performance-organization.html",
            "title": "HTML和CSS高级指南之一——性能与架构",
            "description": "\n架构和性能在Web上谈得是越来越多，争论的也越来越多，那究竟如何可以在平时编码时候就注意这些细节，提高自己代码的质量，编辑高性能的代码呢？这个答案很多同学都想知道，那么今天由99根据Shay Howe的《An Adavnced Guide to HTML & CSS》的第一课《Performance & Organization》所译,给大家详细介绍了如何组织HTML和CSS，制作一个优秀的架构，并介绍了如何对网站代码进行优化，提高站点的性能。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/nine-ways-to-improve-user-experience-in-mobile-design.html",
            "title": "提升移动设计用户体验的9种方法",
            "description": "\n以下内容来自Ben Terrill的一篇投稿文章。在Mobify工作的Ben带领着他的团队帮助他们那些就像Starbucks, Bose 和 Threadless的重要客户在移动和平板方面上打造出了卓越的完美体验。Ben参与编写了一篇名为50 Ways to Please Your Customers的电子书籍，而该书提供了移动web设计的最佳实践方法。来自Mobify的Julie Szabo通过信件帮助我对这本书进行了一些改善，虽然我很少这么做，但我还是觉得很有必要向大家说明一下：Julie Szabo的这封信完全是无偿的帮助，而且这本免费提供给大家的书也是非常优秀的。\n本文由LL根据Guest Author的《Nine Ways to Improve User Experience in Mobile Design》所译，从九个方面向大家介绍了如何提升移动端设计给用户带来最好的体验。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/20-useful-css-tips-for-beginners.html",
            "title": "20个初学者实用的CSS技巧",
            "description": "\nCSS是一门很有意思的东东，进入的门槛比较低，但要深入的搞懂CSS还是有一定的难度。不管是细节方面还是他的原理方面，都值得我们学习。今天由杨礼鑫根据Hongkiat Lim的英文文章原名《20 Useful CSS Tips For Beginners》进行翻译，为初学者介绍了学习CSS的20个实用技巧，希望这些技巧对初学者，或者老鸟有些许的帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/remove-black-border-around-input-buttons-in-ie.html",
            "title": "如何移除button在IE67下的黑边",
            "description": "\n好久没有处理过IE6下的兼容问题了，今天有朋友碰到过input[type=\"submit\"]和button[type=\"submit\"]在IE6-7下会出现黑边，就算是你在样式中重置了一个border属性也是如此。真是蛋疼的很。后来经过查找相关的资料，终于找到了解决方法，放上来与大家分享一下，这个问题有可能不只一个人会碰到。(^_^)\n在介绍如何处理这个bug之间我们一起来回顾一下，在IE6-7下，input[type=\"submit\"]和button[type=\"submit\"]存在的问题还不仅是这个，常见的有：button在IE67下的宽度兼容问题、button的行高问题（各浏览器下解析不一样）、button的outline问题，甚至submit在ios下也存在问题。这么多烦人的事，苦逼了前端人员，（具体解决方案可以点击这里查看）。今天就在为大家增加一个问题的解决方案——如何去除IE67下按钮的黑边框\n "
        },
        {
            "link": "https://www.w3cplus.com/css/advanced-html-css-lesson2-detailed-css-positioning.html",
            "title": "HTML和CSS高级指南之二——定位详解",
            "description": "\n99根据Shay Howe的《HTML和CSS高级指南》第一课《Performance & Organization》所译，给大家详细介绍了如何组织HTML和CSS，制作一个优秀的架构，并介绍了如何对网站代码进行优化，提高站点的性能。今天我给大家所译的是CSS的基础部分，主要介绍的内容是CSS中的position的运用。在此篇文章中详细介绍了position的几个属性的使用方法和需要注意的细节，并与float的区别，最后以z-index属性的介绍结尾。希望这篇译文能给大家带些一点帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/using-css-sprites-to-optimize-your-website-for-retina-displays.html",
            "title": "使用css sprites来优化你的网站在Retina屏幕下显示",
            "description": "\nCSS Sprites技术在Web页面上的运用是相当的广泛，早在八年前就已开始流行，他不但让可以减少http的请求数量，还可以减少你的代码量，易于维护。但是今天并不是来说CSS Sprites如何使用，因为如何制作CSS Sprites图，怎么运用到Web页面中，做为前端人员来说并不陌生。这篇文章想和大家借助Maykel的《Using CSS Sprites to optimize your website for Retina Displays》文章来学习Retina下如何使用CSS Sprites图片，或者说使用CSS Sprites能给Retina屏幕设备下的Web页面带来什么好处？如果你对这个话题也感兴趣的话，不仿花几分钟时间看看，因为这篇 文章就是用了一个简单的实例，阐述了如何在Retina屏幕下使用CSS Sprites图片，希望对您有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/metro-ui-css-start.html",
            "title": "Metro UI CSS ——开始之旅",
            "description": "\nMetro UI CSS的中文版本在W3cplus上发布，但官网上的对其介绍并不十分详细，如今借着学习Metro UI CSS的机会，我将自己的学习笔记整理了一些，希望这些教程对大家学习Metro UI CSS会有所帮助。\n在学习Metro UI CSS之前，我们需要一些准备工作要做，这也是今天我要为大家介绍的——开始之旅。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/javascript-this-different-contexts.html",
            "title": "不同上下文中JavaScript的this值",
            "description": "\n前几天突然冒出一个想法，想诚邀一些前端爱好者一起来翻译一些国外的优秀技术博文，与国内同行朋友一起分享，于是在新浪微博发了一条围脖，得到很多朋友的支持与参与，现在我们总共有15个人在一起翻译。希望我们的译文大家会喜欢。\n今天首先是有由Sunnylost根据Louis Lazaris的英文文章原名《JavaScript ‘this’ in Different Contexts》所译，介绍Javascript中关键字“this”的使用方法。在这篇文章中，将通过实例来总结几种不同的上下文和this在这些上下文中究竟代表什么意思。希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/responsive-column-layouts.html",
            "title": "Responsive列布局",
            "description": "\n布局在W3cplus说的也比较多了，但Responsive的列布局还是第一回说，（如果你是第一次听说Responsive这个词，建议你点击这和先了解Responsive）。今天看到一篇有关于Responsive的列布局教程，觉得值得一读，将其译成中文，希望对有需要的同学有所帮助。\n通常我们进行列布局，都需要在第一列添加一个类名“first”，在最后一列添加一个类名“last”，主要用来清除他们之间的margin，（有关这方面的介绍可以详细阅读为之写的《CSS解决方案》中的《项目列表解决方安》，这里详细介绍了类似于列布局的相关方法，或者点击这里了解如何避免重复列末尾的Margin。）而且还通过添加类名“clearfix”来清除浮动。这些都是比较古老的解决方案了，今天我们一起来看一个新方案，就是使用CSS3的伪元素选择器“nth-of-type”来实现一个简单的Responsive列布局效果。Nick La使用这种方法制作了一些WordPress主题模板。制作这些模板中，他没有使用“first”和“last”类名就实现了多列在不同设备下都能自适应，换句话说，他就是能实现四列、三列、两列等等之间的切换。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/A-pixel-is-not-a-pixel-is-not-a-pixel.html",
            "title": "此像素非彼像素",
            "description": "\n本文由99根据Patrick H. Lauke的《A pixel is not a pixel is not a pixel》所译，主要介绍了Viewport方面的知识。99根据原文进行翻译，另外添加了许多自己从外面搜集的资料进行分析，从而解决了很多Web前端人员所不知道的——viewport对Web开发者会有什么影响。实属于干货系列，很值得一读。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/build-basic-responsive-site-css.html",
            "title": "基于CSS搭建一个响应式网站",
            "description": "\n几乎每个人都在讨论响应式设计，但是我不敢确定每个人都理解他是用来做什么的？许多web设计者开发者希望我能解决这些存在的误解，而我也在尝试这么做。简单来说，响应式设计不是专门为手机做网站，而是为了使网站布局适应多种设备大小设计的。\n这篇文章由D姐根据Jason Michael的英文文章原名《Build a basic responsive site with CSS》进行翻译，在这篇文章里，将给你展现响应式设计背后的细节原则，所以我们需要真正理解这些原则。一旦我们理解了他，就可以在大屏幕小屏幕设备上，完美的呈现一个网站了。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-important-css-declaration-how-and-when-to-use-it.html",
            "title": "如何和何时使用CSS的!important",
            "description": "\nCSS中的“!important”如何使用？何时使用？着实也让很多前端人员头痛，特别是对程序员来说更头痛。今天David根据Louis Lazaris的英文文章原名《!important CSS Declarations: How and When to Use Them》进行翻译，文中详细介绍了CSS的“!important”要怎么样？何时用？希望这篇译文对大家的工作有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/how-to-create-retina-graphics-for-your-web-designs.html",
            "title": "Web设计师如何制作Retina图像",
            "description": "\n最近一直在想法设法的了解和学习有关于Retina方面的知识，几天下来，稍有些许的了解，知道了他是一个什么东东，当我译完《走向视网膜（Retina）的Web时代》后，让我知道了前端有这么一个新概念的知识，也让我感觉到自己了解行内新知识太慢，不得不感到鸭梨山大，同时译完《移动Web——CSS为Retian屏幕替换图片》后，我知道了怎么在移动端（iPhone/iPod/IPad等苹果移动终端）上控制Retina图像。但问题也同时延伸出来了，做为一名\\Web前端从业者来说，仅知道怎么使用还不行呀，如果需要适合于Retina设备的图像怎么处理呢？还好，在网上看到了Chris Spooner写的《How to Create Retina Graphics for your Web Designs》，这篇文章虽然介绍的简单，但对我们Web前端人员很实用，简单的告诉了我们要如何制作图片，同时还告诉我们如何处理Retina设备下所需的图片。有兴趣的同学可以花几分钟过一回。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-mobile-web-css-image-replacement-for-retina-display-devices.html",
            "title": "移动Web——CSS为Retina屏幕替换图片",
            "description": "\n移动端的Web开发是一个热门的话题，由于移动端的普及，以后互联网上她将是会是主流，取代PC端的霸主之位。做为前端开发人员，很有必要的去了解并掌握移动Web的开发与制作。今天这篇教程主要是介绍Retina设备下的图片处理技术，正如《走向视网膜（Retina）的Web时代》一文所言，普通图片在Retina设备下显示将会变得模糊（图片在Retina设备下像素放大了两倍），所以为了能让用户在Retina设备（如iPhone 5, New iPad,Galaxy Nexus等设备）浏览的图片能清晰，满足用户的体验，Web前端人员需要学习并掌握如何处理这些问题，这对于Web前端人员来说是一个新的课题，也是一个新的挑战。今天跟着Stéphanie Walter的《The Mobile Web: CSS Image Replacement for Retina Display Devices》一文学习了几种在移动端的Retina屏幕下处理图片的方法，觉得蛮好的，特意花了一个晚上时间将其转译为中文，希望对有着同样爱好与兴趣的同学有所帮助，如果有译的不对之处，烦请指正，或者大家可以阅读原文，你会有更深的体会（因为本人的EN是三脚毛功夫，莫怪（^_^））。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/towards-retina-web.html",
            "title": "走向视网膜（Retina）的Web时代",
            "description": "\nRetina对我来说是一个全新的概念。初次接触还不知道是什么意，后来翻译后才知道“视网膜”，在互联网上海量搜索一翻，这是我们前端的一个新知识点——视网膜Web。的确是个NB的新事物，我一开始看简直不知道是什么东西，后来慢慢的看了一些专业术语，结合业务的高人写的博客，总算是对其有一点点的了解。同时把这几天看的东西做了一下学习笔记，希望对一些新接触 Retina的同学有许些的帮助。（因为自己对这一块知道的不多，有可能有写错的地方，希望这些地方不会误人子弟，罪过罪过），更希望有错的地方能得到同行朋友的指正。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/why-im-excited-about-native-css-variables.html",
            "title": "我为什么对原生CSS变量感到兴奋",
            "description": "\n几周前，CSS变量，更准确的说是CSS自定义属性——发布在Chrome Canary版的Experimental Web Platform Features flag。Chrome的工程师@Addy Osmani首次在推特发布时，遭遇到了惊人的否定，敌意及怀疑。至少我很吃惊，鉴于我对这个属性是如此兴奋。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/understanding-flexbox-everything-you-need-to-know.html",
            "title": "理解Flexbox：你需要知道的一切",
            "description": "\n这篇文章介绍了Flexbox模块所有基本概念，而且是介绍Flexbox模块的很好的一篇文章，所以这篇文章非常的长，你要有所准备。学习Flexbox可不是件很有趣的事情，因为它将挑战你所知道的CSS布局方面的知识。当然这也是非常正常的，因为一切知识都是值得学习的。另外你要认值对待Flexbox。因为它是现代Web布局的主流方式之一，不会很快就消失。它也成为一个新的W3C标准规范。既然如此，那让我们张开双臂，开始拥抱它吧！\n "
        },
        {
            "link": "https://www.w3cplus.com/css/basic-shapes-path.html",
            "title": "CSS中的基本图形和路径",
            "description": "\n在CSS中有些属性是允许CSS绘制图形形状，比如常见的是使用border或者box-shadow来绘制图形或者形状。除此之外，在CSS中还有类似circle()函数也可以绘制圆形。除此之外，在CSS中有一些形状是为CSS其它属性服务，比如clip-path为mask服务和在shape-outside让文本围绕形状排版。还有一些CSS属性使用像SVG中的图形做一些事情，比如offset-path中使用path()函数实现路径动画。而其中path()是一个非常棒的功能，可以绘制任何图形。在接下来的内容中，来介绍一下CSS中的基本图形和路径。希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/pwa/your-first-pwapp.html",
            "title": "【转载】你的首个 Progressive Web App",
            "description": "\nProgressive Web Apps 是结合了 Web 和 原生应用中最好功能的一种体验。对于首次访问的用户它是非常有利的, 用户可以直接在浏览器中进行访问，不需要安装应用。随着时间的推移当用户渐渐地和应用建立了联系，它将变得越来越强大。它能够快速地加载，即使在比较糟糕的网络环境下，能够推送相关消息, 也可以像原生应用那样添加至主屏，能够有全屏浏览的体验。\n "
        },
        {
            "link": "https://www.w3cplus.com/pwa/nextgen-web-pwa.html",
            "title": "【转载】下一代Web应用模型：Progressive Web App",
            "description": "\n近年来，Web 应用在整个软件与互联网行业承载的责任越来越重，软件复杂度和维护成本越来越高，Web 技术，尤其是 Web 客户端技术，迎来了爆发式的发展。包括但不限于基于 Node.js 的前端工程化方案；诸如 Webpack、Rollup 这样的打包工具；Babel、PostCSS 这样的转译工具；TypeScript、Elm 这样转译至 JavaScript 的编程语言；React、Angular、Vue 这样面向现代 Web 应用需求的前端框架及其生态，也涌现出了像同构 JavaScript与通用 JavaScript 应用这样将服务器端渲染（Server-side Rendering）与单页面应用模型（Single-page App）结合的 Web 应用架构方式，可以说是百花齐放。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-exclusions.html",
            "title": "CSS Exclusions:让布局变得更有意思",
            "description": "\n最早接触到CSS Exclusions名词是在2013年@Peter Gasston写的《The future of CSS layouts》（译文点击这里）。至于“Exclusions”译成中文不知道使用什么词更为合适，文章下面暂且直接使用英文，或许更好些。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-to-postcss.html",
            "title": "从Sass过渡到PostCSS",
            "description": "\nSass多年来一直是我的首选。最近我有一段时间，想尝试使用PostCSS的cssnext插件来处理CSS样式。我一直想使用工具尝试写一些CSS的新特性。同时自己的个人网站也是一个最佳测试这些新特性的实验地。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/understanding-the-critical-rendering-path.html",
            "title": "理解关键的渲染路径",
            "description": "\n当浏览器从服务器接收到一个HTML页面的请求时，到屏幕上渲染出来要经过很多个步骤。浏览器完成这一系列的运行，或者说渲染出来我们常常称之为“关键渲染路径”（Critical Rendering Path）。理解CRP（Critical Rendering Path）相关的知识可以更好的提高网站的性能。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-polyfluidsizing-using-calc-vw-breakpoints-and-linear-equations.html",
            "title": "实现精准的流体排版原理",
            "description": "\n流体排版这一词似乎看上去有点陌生，在英文中常把他称之为Fluid Typography，当然也有很多朋友称之为流体字号（Fluid Size）。大概的意思就是Web排版中的font-size会根据浏览器窗口的大小自动改为。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/draw-dashed-and-dotted-lines.html",
            "title": "Canvas学习：绘制虚线和圆点线",
            "description": "\n上一节中，使用moveTo()、lineTo()和stroke()可以很轻易的在Canvas中绘制出实线（线段）。整篇文章中看到的都是绘制实现。不知道你和我是不是一样的好奇，那么要在Canvas中绘制虚线和圆点线又要怎么绘制，在Canvas有没有类似的API能直接绘制呢？其实我也很好奇，看了一些资料，要像绘制实线那样简单或者直接，相对来说是没有的，但不用担心，通过其他的方法也是可以实现的。因为JavaScript是一门万能的语言，那么接下来的内容，就来看看如何在Canvas中绘制虚线和圆点线。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/taking-css-shapes-to-the-next-level.html",
            "title": "聊聊CSS Shapes规范的下一个版本",
            "description": "\n在前面的教程中，看到了怎么创建CSS Shapes,即在元素定认一个规则图形。里面都是些基础的知识，比如说创建一个圆，然后多行文本围绕这个圆。在这篇文章中，我们将探索一些更复杂的图形，让你的布局不在局限于四四方方的图形中。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-writing-modes.html",
            "title": "CSS书写模式",
            "description": "\n由于你可能没有那么多的时间，所以我将从结论开篇。你可以使用一个不常见，但是非常重要的CSS属性来使文字垂直显示。除了让文字垂直显示之外，你也可以让图标和入口按钮以这样的方式呈现。我写的CSS让浏览器重新布局文字的方向，使元素的布局在正常流的基础上旋转90度。\n "
        },
        {
            "link": "https://www.w3cplus.com/css4/6-preprocessor-features-coming-to-native-CSS.html",
            "title": "CSS即将具备的6种处理器特性",
            "description": "\n今天看到@Dennis Gaebel分享的一篇博文。觉得很有意思。同时感觉老外分享出来的东西就是不一样，尽管自己也专门整整CSS，但从新特性的发掘和敏锐性就差十万八千里。不吐槽了，还是回到正题来吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/draw-lines.html",
            "title": "Canvas学习：绘制线段",
            "description": "\n在上一篇介绍Canvas坐标系统的结尾处，我们使用了Canvavs绘制了一个网格。整个效果是由直线和文本构成。在这一节中，我们来看看如何使用Canvas绘制线段。在Canvas中，线段也是路径中的一种，被称之为线性路径。在Canvas中绘制线性路径主要用到moveTo(x,y)、lineTo(x,y)和stroke()几个方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/aspect-ratio.html",
            "title": "CSS实现长宽比的几种方案",
            "description": "\n在上一篇文章中总结了CSS如何实现容器长宽比几种方法。对于在CSS中实现容器的长宽比最初的创意是来自于在Web中如何实现纵横比。主要是用于响应式设计中的iframe、img和video之类的元素。随之扩展为适用于任何的容器长宽比。那在CSS中到底有多少种方案可以实现呢？我一向喜欢做这样的事情，到处搜集多种解决方案。如果你看到前面的两篇文章，或许你知道一些方法，或者说所有的方案你都想到了。如果是这样的话，你可以停止阅读这篇。如果没有的话，你可以继续往下阅读。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/19-shorthand-javascript-techniques.html",
            "title": "19个JavaScript编码小技巧",
            "description": "\n这篇文章适合任何一位基于JavaScript开发的开发者。我写这篇文章主要涉及JavaScript中一些简写的代码，帮助大家更好理解一些JavaScript的基础。希望这些代码能从不同的角度帮助你更好的理解JavaScript。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/transformation-coordinates.html",
            "title": "Canvas学习：坐标变换",
            "description": "\n在Canvas里的坐标系统一节中，了解到Canvas的坐标系统如下图所示，它以Canvas画布的左上角为原点（也就是(0,0)），x坐标向右方增长，而y坐标则向下方延伸。然而，Canvas的坐标系统并不是一尘不变的。可以对Canvas坐标系统进行移动、旋转和缩放等操作。而这些操作被称为坐标变换。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/create-3d-ball-with-canvas.html",
            "title": "如何用Canvas做一个3D球",
            "description": "\n这篇文章是根据博客园@Waxes同学在做的3D球体的Demo提供的思路，使用案例中的提供的一些数学公式制作的3D球。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/learncssgrid.html",
            "title": "学习CSS Grid",
            "description": "\nCSS Grid是一个强大的工具，它允许在Web上创建二维布局。这一篇学习CSS Grid的指南，通过图形的方式帮助您更好的理解和学习CSS Grid。花时间整理和阅读这篇文章都是非常有意义的。我们要特别感谢Mozilla开发人员和W3C规范中有关于CSS Grid的资源。同时也需要特别感谢@Jen Simmons和@Rachel Andrews两位女士，她们是CSS Grid的主要贡献者，可以说要是没有她们，就没有今天的CSS Grid。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascript-asynchronous-programming.html",
            "title": "【转载】JavaScript异步编程原理",
            "description": "\n众所周知，JavaScript 的执行环境是单线程的，所谓的单线程就是一次只能完成一个任务，其任务的调度方式就是排队，这就和火车站洗手间门口的等待一样，前面的那个人没有搞定，你就只能站在后面排队等着。在事件队列中加一个延时，这样的问题便可以得到缓解。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/styling-underlines-web.html",
            "title": "如何美化下划线",
            "description": "\n2014年@Marcin Wichary在Medium分享了如何更好的突出链接的下划线效果，@Mary Lou更疯狂的制作出了一个Demo，这个Demo展示了多种突出链接的效果，有些是使用的背景色，有些是使用不同的下划线方式。那么，接下来我们一起看看在Web中，如何更好的美化下划线的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/es6-arrow-function.html",
            "title": "ES6学习笔记：箭头函数",
            "description": "\n前端的学习是永无止境的，总是不断的有新知识需要学习，为了能跟上节奏，也硬逼自己开始学习一些ES6相关的知识。今天先来学习ES6中的箭头函数。在学习箭头函数之前先简单的回顾一下JavaScript中的一些概念。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/keep-css-grids-simple-with-postcss-grid-kiss.html",
            "title": "grid-kiss让网格制作变得更容易",
            "description": "\n去年在CSS Conf科普了一下《CSS Grid Layout》相关的概念。会后PostCSS的作者@Andrey Sitnik给我力荐grid-kiss这个PostCSS插件。说这个插件可以让CSS Grid变得更为简单。一直都想尝试一下，就是没动手，今天体验了一下，还是很有意思的。今天花点时间整理一下，跟大家一起分享。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/drawing-regular-polygons.html",
            "title": "Canvas学习：绘制正多边形",
            "description": "\n到目前为止，我们了解了如何在Canvas中绘制线段、矩形、圆或圆弧线和贝塞尔曲线等。这些都是Canvas的CanvasRenderingContext2D对象自身提供绘制基本图形。但是，我们肯定需要在Canvas中绘制除此之外的其他图形，比如前面所说的绘制箭头或者说我们今天要聊的绘制正多边形。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/10-new-features-of-html-5-1.html",
            "title": "10个HTML 5.1的新功能",
            "description": "\n在几个星期前,W3C在2016年11月发布了新的 HTML 5.1 recommendation,HTML规范得到了重大改进，在最近的博客中,W3C将新的主版本称为黄金标准，因为HTML 5.1为我们提供了新的方法，我们可以使用HTML来创建更灵活的网络体验。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/understanding-linear-interpolation-in-ui-animations.html",
            "title": "理解动画中的线性插值",
            "description": "\n在传统（手绘）一个高级动画或者动画艺术家都喜欢绘制关键帧来定义一个动画。现场传递给助理，一般是实习生或者初级艺术家在此基础上做一些其他性的工作，具体的说，他们就是在关键帧动画之间添加一些中间片段让动画看起来更流畅，更自然。还记得在小学的时候，老师告诉你电脑是笨蛋吗？电脑需要被告知一系列的确切步骤，他们才知道需要做什么。今天我们来看看这一序列的步骤或算法，帮助计算机绘制动画关键帧之间必要的中间画。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/managing-the-css-cascade.html",
            "title": "管理CSS层叠",
            "description": "\n了解CSS的同学都应该知道，CSS是由Cascading Style Sheets三个单词首字母组成，简单的讲就是层叠样式表。事实上，在CSS中，层叠（也有同学称之为级联）也是一个非常基础，但也是一个非常重要的概念。只有理解了层叠这个概念才能更好的理解和使用CSS中的每一个属性。话又说回来，既然是一个基础概念，懂CSS的同学都知道，那还有必要来说这个吗？那我就得问一下了，你真的懂CSS中的层叠，能使用好CSS的层叠吗？如果你没有这方面的自信，那不仿花点时间来阅读这篇文章。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/chrome-devtools-javascript.html",
            "title": "在 Chrome DevTools 中调试 JavaScript 入门",
            "description": "\n本交互式教程循序渐进地教您在 Chrome DevTools 中调试 JavaScript 的基本工作流程。 虽然教程介绍的是如何调试一种具体问题，但您学到的一般工作流程对调试各种类型的 JavaScript 错误均有帮助。如果您使用 console.log() 来查找和修正代码中的错误，可以考虑改用本教程介绍的工作流程。 其速度快得多，也更有效。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/drawing-curve.html",
            "title": "Canvas学习：贝塞尔曲线",
            "description": "\n在绘制圆和圆弧一节中，了解到在Canvas中可以使用arc()和arcTo()绘制制圆或弧线，但很多时候，仅这两个方法还不能满足我们实际的需求，特别是绘制复杂的曲线。不过值得庆幸的是，在Canvas中还提供了其他的方法可以帮助我们绘制复杂的曲线。那就是我们今天要说的贝塞尔曲线，在Canvas中提供了两个独立的方法：quadraticCurveTo()和bezierCurveTo()方法。这两个方法就是贝塞尔曲线。\n "
        },
        {
            "link": "https://www.w3cplus.com/css4/color-mod.html",
            "title": "使用color-mod()函数修改颜色",
            "description": "\n去年@Erik Jung写了一篇文章来介绍CSS4 Color特性，那时并没有花时间去探讨其具体的使用方式，只是略知他能让你基于某个颜色，添加调节参数，得到新的颜色。由于其还是Color的新特性，所以目前如果不依赖于其他的手段，你在浏览器里是看不到效果的。当然也有非常出色的工程师，比如@Ahmad Shadeed写的一篇文章中，使用rgba()模拟出color-mod()函数的特性。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/interpolation.html",
            "title": "线性插值",
            "description": "\n最近在看Canvas的一些动画实例当中，时常看到lerp()这个函数，一直以来并不知道这个函数起什么作用，有什么特性。今天花了一些时间，Google了一下，才知道这个函数是线性插值。那么线性插值是个什么鬼？他在一些程序中又起啥作用？这就是这篇文章要探讨和学习的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/playing-with-css-grid-layout.html",
            "title": "CSS Grid布局这样玩",
            "description": "\n自从去年下半年开始，CSS Grid布局的相关教程在互联网上就铺天盖地，可谓是声势浩大。就针对于Web布局而言，个人认为Grid布局将是Web布局的神器，它改变了以往任何一种布局方式或者方法。不管以前的采用什么布局方法都可以说是一维的布局方式，而Grid最大的特色，采用了二维布局。@Rachel Andrew也一直致力于完善Grid的规范。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/chrome-devtools-console.html",
            "title": "使用控制台",
            "description": "\n了解如何：打开 DevTools 控制台；堆叠冗余消息或将其显示在各自的行上；清除或保留输出，或者将其保存到文件中；过滤输出，以及访问其他控制台设置。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/canvas-coordinate-system.html",
            "title": "Canvas学习：Canvas里的坐标系统",
            "description": "\n上一节我们做好了使用Canvas的准备工作，但并没有深入的介绍如何使用Canvas，比如怎么绘制图形，怎么做Canvas动画等。但并不用着急，随着我们后面的深入学习，这一切都会知道的。在深入学习之前，我们有必要先了解Canvas里的坐标系统。那么这一节，就先来了解Canvas的坐标系统。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/do-you-really-understand-css-linear-gradients.html",
            "title": "你真的理解CSS的linear-gradient？",
            "description": "\n想要在你的网站有一个好看的渐变背景吗？background-image:linear-gradient(red,blue)，就能很轻易的实现一个red至blue的渐变背景图片。就是这么的简单。感觉老话重提，有点无聊。如果您想了解更多这方面的知识，建议你阅读以前整理过的相关文章。我也推荐css-tricks和MDN上的相关文章。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/understanding-the-css-property-value-syntax.html",
            "title": "【转载】理解 CSS 属性值语法",
            "description": "\n万维网联盟（W3C） 使用了一套特别的语法来定义 CSS 的属性值，能让所有的 CSS 属性都用。如果你曾看过 CSS 规范，你可能已经见过这套语法了。如果你不知道这些符号以及它们如何工作的话，这套语法可能非常难理解。然而，这值得花时间来学。如果你理解 W3C 是如何定义这些属性值的，你就可以理解 W3C CSS 规范 中任意一个了。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/gradient.html",
            "title": "Canvas学习：渐变",
            "description": "\n通过前面的Canvas学习，了解到在Canvas中绘制图形时，使用strokeStyle和fillStyle来设置绘制图形的边框颜色和填充颜色。前面的教程我们看到的都是给这两个属性设置具体的颜色值，比如#fff、red之类。其实在Canvas中，除了给strokeStyle和fillStyle设置颜色之外，还可以设置渐变色。今天我们要学习的就是Canvas中的渐变知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/display-flow-root.html",
            "title": "flow-root",
            "description": "\n今天我们来介绍CSS中的一个新属性flow-root。这个属性是CSS Display Module Level3中的一个属性。简单讲这个属性是display中的一个新属性，对于display属性，大家熟悉的可能是常见的几个属性，比如block、inline、inline-block、flex、grid、table和table-cell等，其实除了这些常见的属性值之外，还有很多其他的值。如果想了解更多，那可以点击这里阅读。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/postcss-modules-make-css-great-again.html",
            "title": "【转载】让CSS更完美:PostCSS-modules",
            "description": "\n我们和全局作用域的CSS斗争了多年，现在终于是时候结束它了。不管你用的是什么语言还是框架，CSS命名冲突将不再是个问题。我将给你展示一下PostCSS和PostCSS-modules如何使用，并且可以在服务端使用它们。\nCSS起初只是一个美化文档的工具，但是事情到1996年发生了变化。浏览器中不再单单只有文档了，即时通讯，各种软件，游戏，没什么是浏览器不能承载的。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/introduction-to-prepare.html",
            "title": "Canvas学习：Canvas入门准备",
            "description": "\n由于工作的需要，最近开始在学习HTML5的canvas相关的知识。这里主要记录自己学习canvas相关的知识笔记。如果文章有不对之处，还请大婶们多多指正。今天这篇文章是学习canvas的一些准备工作。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/getting-started/primers/async-functions.html",
            "title": "【转载】异步函数：提高 Promise 的易用性",
            "description": "\nChrome 55 中默认情况下启用异步函数，坦率地讲，它们的作用相当不可思议。 可以利用它们像编写同步代码那样编写基于 Promise 的代码，而且还不会阻塞主线程。 它们可以让异步代码“智商”下降、可读性提高。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/initial-letter.html",
            "title": "CSS制作首字下沉",
            "description": "\n在杂志排版中，常常能看到首字下沉的效果。在Web的排版中，也常常能看到上图这样的效果。并且常常看到的是首段首字下沉。那么今天这篇文章咱们来聊聊如何使用CSS实现首字下沉效果。早期中，实现首字下沉都是能过伪元素::first-letter来实现。不过值得庆幸的是，在CSS Inline Layout Module Level 3提供了一个新的思路和方案：采用initial-letter。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascript-inheritance.html",
            "title": " JavaScript 继承总结",
            "description": "\n原型几乎贯穿了各种 JavaScript 继承方式。理解以及灵活利用原型是写出优秀代码的关键。无论是继承还是创建对象，最终理想的方案都是将几种不同方式的优点结合在一起，这正是 JavaScript 灵活的魅力。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/how-to-get-the-most-out-of-the-javascript-console.html",
            "title": "如何有效的使用JavaScript Console",
            "description": "\nJavaScript中最有效的调试工具之一就是console.log()。console提供了一些有用的方法可以帮助开发人员更好的调试你的代码。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javaScript-setInterval.html",
            "title": "你所不知道的setInterval",
            "description": "\n在《你所不知道的setTimeout()》记载了setTimeout()相关,此篇则整理了下setInterval()；作为拥有广泛应用场景(定时器，轮播图，动画效果，自动滚动等等)，而又充满各种不确定性的这setInterval()，自当先洞悉它，才能很好的驾驭它。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/breaking-out-with-css-grid-layout.html",
            "title": "如何使用CSS Grid布局实现限宽容器全屏效果",
            "description": "\n在Web的布局设计中时常会碰到全屏的效果，而且很多时候会碰到在限制宽度的容器中实现全屏效果。到写这篇文章的这个时候，前端有关于布局方面的技术又得到了新的突破，比如CSS Grid布局方案，到现在已经得到了主流的浏览器支持。在这里提到CSS Grid布局方案，其实就是想说一点，通过现在的CSS Grid布局效果，也可以实现在限宽容器中实现全屏布局效果。这也是接下来要介绍的内容。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/start-using-css-custom-properties.html",
            "title": "是时候开始使用CSS自定义属性",
            "description": "\n今天，CSS处理器已是Web开发流程中的一个标准。预处理器的主要优点之一就是它们能够使用变量。这可以帮助你避免复制粘贴代码，也简化了开发和重构。我们使用预处理器可以存储颜色、字体和布局等细节——一切我们想使用的CSS都可以。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/flexbox-layout-and-calculation.html",
            "title": "深入理解 flex 布局以及计算",
            "description": "\n对于Flex布局，阅读了 大漠老师和其他老师写的文章后，我还是不太理解Flexbox是如何弹性的计算子级项目的大小以及一些其他细节。在大漠老师的帮助下，我去查阅Flexbox 的 W3C 规范文档。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/aspect-ratio-boxes.html",
            "title": " 容器长宽比",
            "description": "\n容器长宽比，这个话题在站上也有相关的文章介绍，最早出现于Responsive Web Design中，主要用来处理img、iframe、video和object这些元素的自适应问题。简单点讲，就是根据容器的宽度，按照宽高比例自动计算出容器的大小。并且让图片，视频之类能自适应容器。另外记得在知乎上有一个问题“移动端布局，div按比例布局，宽度为百分比，但又想让高度和宽度一样，即让div为正方形，怎么做布局呢？”，其实解决方案在前面的教程已提到过。既然有相应的解决方案，继续花时间来说，是不是有点多余。那么这个问题又回到了CSS的根源上：在Web中，使用CSS解决问题，往往不只有一种方案，只有更适合的方案。这两天看到@Chris Coyier特意也整理了一篇《Aspect Ratio Boxes》文章，里面有新的方案值得我们思考，特别是CSS自定义属性的部分。那我们再次花时间将相关方案整理在一起，仅供学习与参考。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/text-stroke.html",
            "title": "text-stroke实现文本描边效果",
            "description": "\n早期在Web中要实现文本描边效果是没有直接的CSS属性可以实现的。一般都是通过其他的CSS属性来模拟需要的描边效果。最常见的就是使用text-shadow。当然，在SVG或者Canvas中实现文本描述效果相对而言是要较为轻松。那么今天咱们就来看看如何在Web中实现文本描述效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/experiments-in-fixed-aspect-ratios.html",
            "title": "Web中如何实现纵横比",
            "description": "\nWeb发展到现在，已经有很大的变化，特别在当前这样的时代，我们面对的设备种类繁多。言外之意，这样的环境之下，Web的页面布局时常会碰到一些缩放比例的控制，特别是针对img、iframe、object、video和embed等元素的比例缩放。当然，就img元素而言，要实现纵横比例的布局已有多种方案，而且实战性也特别的强，并且在Responsive设计中已使用广泛。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/drawing-text.html",
            "title": "Canvas学习：绘制文本",
            "description": "\n前面的课程我们学习的都是如何在Canvas中绘制图形，但很多时候，除了绘制图形之外还有很多情景要同文本打交道。不过在Canvas中到目前为止只提供了一些必备的基本功能，例如文本的描边与填充，向Canvas之中放置文本，以及用像素为单位来计算任意字符串的宽度等。接下来的内容，我们就来了解在Canvas中怎么绘制文本以及一些基本的操作。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/drawing-arrow.html",
            "title": "Canvas学习：绘制箭头",
            "description": "\n在这篇文章中主要来聊在Canvas中怎么绘制箭头。在Canvas的CanvasRenderingContext2D对象中是没有提供绘制箭头的方法，言外之意，在Canvas中要绘制箭头是需要自己封装函数来处理。那今天的主题就是来看怎么封装绘制箭头的函数。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/progressive-web-animation.html",
            "title": "渐进式动画解决方案",
            "description": "\n今天聊的内容是淘宝虚拟互动实验室的@渚薰大神 在2017年06月在北京GMTC大会上分享的一个主题。未能亲临听到相关的精彩分享，但还算是有幸的，在内部听到@渚薰大神 的分享。个人对Web动画这方面的课程非常的感兴趣，而且现在和团队一直在致力于手淘互动动效相关的研究。经历了从Gif、视频到CSS Animation的零至一的过程，并且致力于JavaScript驱动的动效开发，以及现在致力于研究的数据化驱动的动效。这样的一个过程是幸福的，而且也是具有挑战力的。我想很多喜欢动画的同学也对这样的一个课程会感兴趣，所以接下来，我们根据@渚薰大神分享的PPT的思路来聊聊渐进式动画解决方案。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-animation-fill-mode-property.html",
            "title": "你所不知道的animation-fill-mode细节",
            "description": "\n这两天一直在探究CSS Animation中animation-fill-mode属性中的细节，那是有原因的，具体原因是什么就不多说了。虽然在《理解animation-fill-mode属性》一文让我稍加对该属性有一定的了解。但还有一些潜在的细节和因素还是不为人知。所以我决定花一定的时间彻底的来剖析animation-fill-mode。如果你感兴趣，请继续往下阅读。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/css-animations-vs-the-web-animations-api.html",
            "title": "CSS Animations vs Web Animations API",
            "description": "\n上周，我写了一篇关于如何使用CSS制作bitsofcode logo的动画效果。之后收到一些建议，尝试比较一下CSS动画和Web Animations API。所以今天写了这篇文章。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/canvas-drawing-function.html",
            "title": "Canvas学习：封装Canvas绘制基本图形API",
            "description": "\n到今天这节是有关于在Canvas中绘制图形部分的最后一篇文章。从前面的文章中我们了解到，通过Canvas中的CanvasRenderingContext2D对象中的属性和方法，我们可以很轻松的绘制出一些基本图形，比如直线、弧线、矩形、圆形、三角形等。但有很多基本图形的绘制是没有现成的方法，需要通过CanvasRenderingContext2D对象中的属性和方法组合在一起才能绘制出来，比如说点划线、箭头和正多边形等。为了更好的帮助大家在Canvas中绘制这些基本图形，可以将这些基本图形的绘制封装起来。今天这篇文章，我们主要来看看怎么将这些函数封装。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/drawing-arc-and-circle.html",
            "title": "Canvas学习：绘制圆和圆弧",
            "description": "\n圆和圆弧是图形中基本图形之一，今天我们来了解在Canvas中怎么绘制圆和圆弧。在Canvas中绘制圆和圆弧其实和绘制线段和矩形一样的简单。在Canvas中，CanvasRenderingContext2D对象提供了两个方法（arc()和arcTo()）来绘制圆和圆弧。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/promise.html",
            "title": "【转载】细嗅Promise",
            "description": "\nAjax 出现的时候，刮来了一阵异步之风，现在 Nodejs 火爆，又一阵异步狂风刮了过来。需求是越来越苛刻，用户对性能的要求也是越来越高，随之而来的是页面异步操作指数般增长，如果不能恰当的控制代码逻辑，我们就会陷入无穷的回调地狱中。ECMAScript 6 已经将异步操作纳入了规范，现代浏览器也内置了 Promise 对象供我们进行异步编程，那么此刻，还在等啥？赶紧学习学习 Promise 的内部原理吧！\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/ES6-Objects.html",
            "title": "ES6学习笔记：对象",
            "description": "\n在JavaScript中，几乎每一个值都是某种特定类型的对象，于是ES6也着重提升了对象的功能性。上周花了一周的时间了解了JavaScript中的对象相关的知识，对于ES6中有关于对象的扩展功能并不太了解。今天开始就来简单的了解和学习有关于ES6中对象的扩展功能。ES6通过多种方式来加强对象的使用，通过简单的语法扩展，提供了更多操作对象及对象交互的方法。接下来的内容就是有关于这些知识的整理。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/clip.html",
            "title": "Canvas学习：裁切clip()",
            "description": "\n上一节中学习了Canvas的图像合成，通过图像合成的技术可以轻易的实现类似于刮刮卡的效果，其实除了实现刮刮卡的效果之外，还可以使用这种技术制作类似于探照灯的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/asynchronous-functions-101.html",
            "title": "JavaScript异步函数",
            "description": "\nJavaScript的主要优势之一就是任何事情都是异步的。在大多数情况下，不同部分的代码不会影响共他的代码执行。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/drawing-rectangular.html",
            "title": "Canvas学习：绘制矩形",
            "description": "\n通过前面教程的学习，我们可以在Canvas中轻易绘制路径（线段）。这仅仅是Canvas中的一小部分，今天我们来看看在Canvas中怎么绘制矩形。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/callback-hell.html",
            "title": "【转载】JavaScript中回调地狱的今生前世",
            "description": "\nJavaScript 由于某种原因是被设计为单线程的，同时由于 JavaScript 在设计之初是用于浏览器的 GUI 编程，这也就需要线程不能进行阻塞。所以在后续的发展过程中基本都采用异步非阻塞的编程模式。简单来说，异步编程就是在执行一个指令之后不是马上得到结果，而是继续执行后面的指令，等到特定的事件触发后，才得到结果。也正是因为这样，我们常常会说: JavaScript 是由事件驱动的。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/understanding-javascript-constructors.html",
            "title": "详解JavaScript构造器",
            "description": "\n对构造函数有很好的理解是你掌握JavaScript这门语言的重点。我们都知道JavaScript不像其他语言，它没有class关键字，但是它有跟function非常相似的构造函数。这篇文章我们一起来详细地了解JavaScript构造函数如何构造对象。构造函数跟普通函数非常相似，但是我们通过new关键字来使用它们。主要有两种类型的构造函数，native构造函数（Array,Object）它们可以在执行环境中自动生成，还有自定义的构造函数，你可以定义自己的方法和属性。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/compositing.html",
            "title": "Canvas学习：图像合成",
            "description": "\n合成是指如何精细控制画布上对象的透明度和分层效果。在默认情况之下，如果在Canvas之中将某个物体（源）绘制在另一个物体（目标）之上，那么浏览器就会简单地把源特体的图像叠放在目标物体图像上面。事实上，它和CSS中的混合模式非常的类似。简单点讲，在Canvas中，把图像源和目标图像，通过Canvas中的globalCompositeOperation操作，可以得到不同的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/local-css-vars.html",
            "title": "CSS局部变量",
            "description": "\nCSS自定义属性也被称为CSS变量。这是非常令人兴奋的，因为我们在CSS中终于拥有真正的变量。什么意思，真正的变量？我的意思是可以动态更新和修改变量。虽然CSS处理器有了变量（Sass和PostCSS），这些变量通过编译变成了CSS，但没有动态能力更新其变量。这不是真正的CSS变量，只是用来存储和更新可用的值。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/canvas-states.html",
            "title": " Canvas学习：save()和restore()",
            "description": "\n本来今天想开始学习怎么在Canvas中绘制矩形。但昨天发朋友圈，聊到Canvas。有网友提醒我将所有绘制的东西放在ctx.save()和ctx.restore()，能起到保存绘制状态和防止污染状态栈。养成一个良好的习惯。后来翻了书，也只是提到了在Canvas中有save()和restore()两个方法，它们都是属于Canvas中CanvasRenderingContext2D中与状态操作有关的两个方法。并没有详细的介绍，对于初学者的我而言，也是一知半解。下面的内容记录了我对save()和restore()两个方法的一些理解。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/Sexy-Javascript-understand-the-callback-function-with-the-use-of-Javascript-in.html",
            "title": "【转载】理解与使用JavaScript中的回调函数",
            "description": "\n在JavaScript中，函数是第一类对象，这意味着函数可以像对象一样按照第一类管理被使用。既然函数实际上是对象：它们能被“存储”在变量中，能作为函数参数被传递，能在函数中被创建，能从函数中返回。因为函数是第一类对象，我们可以在JavaScript使用回调函数。在下面的文章中，我们将学到关于回调函数的方方面面。回调函数可能是在JavaScript中使用最多的函数式编程技巧，虽然在字面上看起来它们一直一小段JavaScript或者jQuery代码，但是对于许多开发者来说它任然是一个谜。在阅读本文之后你能了解怎样使用回调函数。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/pure-css-create-masonry-layout.html",
            "title": "纯CSS实现瀑布流布局",
            "description": "\n瀑布流布局有一个专业的英文名称Masonry Layouts。瀑布流布局已经有好多年的历史了，我最早知道这个名词的时候大约是在2012年，当时Pinterest网站的布局就是使用的这种流式布局，简言之像Pinterest网站这样的布局就称之为瀑布流布局，也有人称之为Pinterest 布局。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-state-of-css.html",
            "title": "CSS的状态",
            "description": "\nJavaScript越来越有一统天下的趋势，这已经不是什么秘密了。但是你可能不知道的是，CSS也同样的在进化，在创新。CSS最近已突飞猛进，得到很多的改善。甚至CSS都有可能不再是你认识的CSS了。当你不注意的时候，CSS社区开发了很多真正解决许多古怪的CSS问题，在这个过程不需要使用一些黑魔法，以前的缺陷也不再是缺陷。也使这些害群之马从前端的家庭中踢出去。在这篇文章中，将会介绍CSS中的五种老的处理方式，而今天你不再需要那样做。既然不需要那样做了，那又应该怎么做呢？接下来就一一给大家呈现。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/canvas-line-style.html",
            "title": "Canvas学习：线型",
            "description": "\n在绘制线段一文中，了解到如何在Canvas中绘制线段。虽然使用Canvas中API可以很轻松的绘制出线段，但里面还是有不少的细节需要了解。这篇文章咱们就来了解线段中的线型。Canvas中的线型主要包括线宽、线段端点和线段连接点三个部分。那么咱们先来了解线宽。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/web-storage.html",
            "title": "Web 存储机制",
            "description": "\nWeb存储机制，在这里主要聊有关于Web Storage API提供的存储机制，通过该机制，浏览器可以安全地存储键值对，比使用cookie更加直观。接下来简单的了解如何使用这方面的技术。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/custom-of-coordinate-transformation.html",
            "title": "Canvas学习：自定义的坐标变换",
            "description": "\n相对于Web坐标系统而言Canvas里的坐标系统较为复杂一些，除了默认的坐标系统之外还有坐标变换概念。在上一节中，已经了解了如何使用scale()、rotate()和translate()方法来变换坐标系。这三个方法提供了一种简便的手段，用于操作绘图环境对象的变换矩阵（Transformation Matrix）。默认情况下，这个变换矩阵就是单位矩阵（Identity Matrix），它并不会影响所要绘制的物体。当调用了scale()、rotate()或translate()方法之后，变换矩阵就会被修改，从而也会影响到所有后续的绘图操作。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/callbacks-in-javascript.html",
            "title": "【转载】JavaScript 中的回调",
            "description": "\n你有无意中看到 \"callback\" 但并不知道其中的意思么？不用担心。不是只有你一个人这样。很多JavaScript 新手都难以理解回调。虽然回调比较令人困惑，你仍然需要彻底的学习理解它们，因为它在 JavaScript 中是一个很关键的概念。如果你不知道回调，那么你无法走的长远。这就是今天这篇文章需要讲解的！你将要学习什么是回调以及它们为什么如此重要和怎么去使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/how-the-minmax-function-works.html",
            "title": "minmax()函数如何工作",
            "description": "\nCSS Grid Layout规范中的minmax()函数是一个非常有用的新特性。这个函数能够让我们用最简单的CSS控制网格轨道的大小。这个函数包括一个最小值和最大值。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-grid.html",
            "title": "【转载】CSS Grid!",
            "description": "\nGrid布局来了，Grid布局来了。千真万确，各大浏览器将发布对Grid布局的支持。唔哈哈哈哈~2017年3月，Chrome和Firefox将开始默认支持Grid布局。其中，Mozilla将在3月7日发布的Firefox 52版本上开始支持。由于要先在Chrome Canary中支持Grid，所以，谷歌将在3月14号的Chrome 57版本上开始默认支持Grid.一旦在公开版本中默认得到了支持，那么当前在开发版本中的所有Grid功能都将在公开版本中出现。Grid时代就此开始。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/working-with-Objects.html",
            "title": "JavaScript中的对象",
            "description": "\nJavaScript中的一个对象就是一系列属性的集合，一个属性包含一个属性名和一个属性值（key/value）。一个属性的值可以是函数（这个时候也被称为方法）。除了内置的对象之外，还可以自定义对象。接下来学习在JavaScript中怎么使用对象、属性、函数和方法以及怎么自定义创建对象。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/arrow-functions-and-their-scope.html",
            "title": "【转载】ES6箭头函数和它的作用域",
            "description": "\n在ES6很多很棒的新特性中, 箭头函数 (或者大箭头函数)就是其中值得关注的一个! 它不仅仅是很棒很酷, 它很好的利用了作用域, 快捷方便的在现在使用以前我们用的技术, 减少了很多代码......但是如果你不了解箭头函数原理的话可能就有点难以理解. 所以,让我们来看下箭头函数, 就是现在!\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/async.html",
            "title": "【转载】异步操作和Async函数",
            "description": "\n异步编程对JavaScript语言太重要。JavaScript语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。ES6将JavaScript异步编程带入了一个全新的阶段，ES7的Async函数更是提出了异步编程的终极解决方案。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/understanding-css-animation-fill-mode-property.html",
            "title": "理解animation-fill-mode属性",
            "description": "\n我相信很多前端开发人员都有基于CSS @keyframes创建动画的经历。甚至其中有很多人创建了一些很复杂的动效和去实验这个特性。如果你想要全面了解这篇文章将要介绍的内容，建议你花点时间阅读我2011年在Smashing Magazine介绍的一个主题，这篇文章也是非常不错的。不过，在今天这篇文章中，我并不想介绍有关于CSS动画中所有的属性，我只想专注于CSS动画中的一个属性：animation-fill-mode属性。这个动画属性对动画影响并不很明显。例如没有人会对CSS动画中animation-name、animation-duration等属性感到困惑。但对于animation-fill-mode呢？我们接下来通过一些简单的示例来阐述。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascript-new-keyword.html",
            "title": "JavaScript中的new关键词",
            "description": "\n这两天学习JavaScript的数据类型以及字符转换过程中接触到了new这个关键词。比如new String()、new Boolean()和new Number()之类的。如果我们通过typeof来判断他们的类型的话，得到的结果都是object。那么在JavaScript中，new关键词有哪些知识点需要了解呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/waapi.html",
            "title": "【转载】WAAPI",
            "description": "\nWAAPI 让我们能够构建动画并控制动画的播放。WAAPI 向开发者开放了浏览器的动画引擎，开发者可以通过 Javascript 接口来操作该引擎。该 API 是基于 CSS 动画和 CSS 过渡实现的，并且考量了未来可能会增加的动画效果。它是 Web 平台支持的实现动画的最高效的方式之一，在该方式下浏览器能够进行内部优化，因而不再需要所谓的黑科技、强制性的技巧和 requestAnimationFrame 方法。通过 WAAPI，我们可以很大程度上将交互动画从样式转移到 JS 上，将行为与表现分离。我们不再需要依赖很多的 DOM 技巧来控制动画的播放，比如直接赋值 CSS 属性或者切换类名。并且与简单、声明式的 CSS 不同，JS 允许我们动态地改变样式属性或播放选项。对需要构建自定义动画库和开发动画接口的开发者来说，WAAPI 可能是最酷的工具了。让我们来看看它都可以做什么。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/create-animation-with-css-variables.html",
            "title": "CSS自定义属性制作动画",
            "description": "\nCSS自定义属性又称为CSS的变量或者原生变量。其和CSS处理器里的变量还是略有不同，但这篇文章我们要聊的并不是这个东东，咱们想聊聊CSS自定义属性怎么制作动画。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/toString-vs-String-vs-valueOf.html",
            "title": "JavaScript中toString()和valueOf()",
            "description": "\n在《JavaScript中数据类型转换》一文中主要学习了JavaScript中的数据类型、数据类型检测和数据类型转换。从这篇文章中了解到了通过String()和toString()可以将值转换为字符串。那么在JavaScript中还有很多有意思的东西，也是让我这样的生手感到困惑的东西。比如String()和new String()有何不同，又比如这篇文章的标题toString()和valueOf()又有何不同。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/finally-talk-JavaScript-asynchronous-programming.html",
            "title": "【转载】最后谈一次 JavaScript 异步编程",
            "description": "\n对于 JavaScript 的异步编程我们早就谈得太多了，我们为了处理 Callback Hell 问题已经做了太多太多了，从 Promise 到 generator 再到 async/await ，JavaScript 这个惊天巨坑算是勉强填完了。关于 Promise 、 generator 以及 aysnc/await 这些具体的技术怎么用，这里就不细谈了，我们更多谈谈 “形而上” 的东西。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-css-patterns-without-media-queries-mdash.html",
            "title": "不使用Media Queries的自适应CSS",
            "description": "\n虽然标题说不用Media Queries，但我还是要在开头讲清楚，本文并不是要大家丢掉Media Queries，也不是要抨击Media Queries。Media Queries实际上非常有用，我在各种地方都会用到。但Media Queries并不能解决所有的自适应的设计问题。常常有一种需求是根据元素所在的组件本身的大小来决定元素的排列，而不是整个视窗的宽高。要解决这类问题，Element Queries的概念诞生了。然而，Element Queries只停留在概念上，Mat Marquis 也针对这个概念提出了一些问题，并且称之为container queries。不过可惜这些都只停留在概念上。也许未来有一天，这些概念会成为现实，不过与此同时，我也来分享一些小技巧，你现在就可以用来处理某一类的问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/css-animations-vs-web-animations-api.html",
            "title": "CSS Animations vs Web Animations API",
            "description": "\nJavaScript提供了动画原生API，被称为Web Animations API。在这篇文章中我们称之为WAAPI。MDN有详细的文档，而且@Dan Wilson写了一个系列的文章来介绍WAAPI。在这篇文章中，我们将比较WAAPI和CSS Animation之间的差异。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/so-you-want-to-be-a-functional-programmer-part-6.html",
            "title": "如何成为一位函数式编程爱好者(Part 6)",
            "description": "\n既然你已经学会了所以的新东西，可能就会想了，“现在该做什么？如何将它用在我每天的编程中使用它？”这要视情况而定。如果你能使用像 Elm 或 Haskell 这样的纯函数语言，你就可以尝试全部想法。而且在这些语言中实现起来很方便。如果你只能使用像 JavaScript 这样的指令式语言，而且大多数肯定都是，仍然可以使用很多前面学到的知识，但将需要大量的规则。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-font-metrics-line-height-and-vertical-align.html",
            "title": "深入了解CSS字体度量，行高和vertical-align",
            "description": "\nline-height和vertical-align在CSS中是两个简单的属性。如此简单，大多数人都相信自己已经完全理解它们是如何工作的以及如何使用它们。但事实上并不如此。他们其实很复杂，也是CSS中难点之一，而且也是CSS中特性之一：内联格式化上下文（inline formatting context）。比如可以设置line-height带有长度单位的值或一个无单位的值，但其默认值是normal。那么在CSS中normal是什么呢？我们常常认为它是（或者应该是）1或者1.2，甚至也可以说，CSS规范都不清楚是哪一个。我们也知道，没有单位的line-height是相对于font-size的，但问题是,font-size: 100px;在使用不同的字体（font-family）表现的行为是不一样的，所以line-height总是相同或不同的吗？真的是1还是1.2吗？另外vertical-align对line-height的影响又是什么呢？要深入研究CSS的机制可以说没有这么简单......\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/data-type-conversion.html",
            "title": "JavaScript中数据类型转换",
            "description": "\n最近在项目中使用到字符串转数字。刚开始使用的是Number()，结果可想而知。后来Review代码的时候，应该使用parseInt()。我当时在纳闷，为什么要使用parseInt()呢？结果老板甩过一句话，看规范去。现在项目可算暂告一段落，所以得自己整清楚Number()和parseInt()有什么区别。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/JavaScript-asynchronous-evolutionary-history.html",
            "title": "【转载】JavaScript异步进化史",
            "description": "\nJS 中最基础的异步调用方式是 callback，它将回调函数 callback 传给异步 API，由浏览器或 Node 在异步完成后，通知 JS 引擎调用 callback。对于简单的异步操作，用 callback 实现，是够用的。但随着负责交互页面和 Node 出现，callback 方案的弊端开始浮现出来。 Promise 规范孕育而生，并被纳入 ES6 的规范中。后来 ES7 又在 Promise 的基础上将 async 函数纳入标准。此为 JavaScript 异步进化史。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/2103.html",
            "title": "你所不知道的setTimeout",
            "description": "\nJavaScript提供定时执行代码的功能，叫做定时器（timer），主要由setTimeout()和setInterval()这两个函数来完成。它们向任务队列添加定时任务。初始接触它的人都觉得好简单，实际上真的如此么？这里记载下，一路对其使用姿势变迁的历程。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/native-appt-layout-width-css-grid-layout.html",
            "title": "探讨CSS Grid Layout在原生客户端中运用",
            "description": "\nCSS Grid Layout是W3C规范中专门为Web布局提供的一个特性。CSS Grid Layout将改变传统的布局模式，他将让布局从一维布局变成了二维布局。简单的说，有了CSS Grid Layout之后，布局不再局限于单个维度了。这个时候你要实现类似九宫格，拼图之类的布局效果显得格外的容易。虽然CSS Grid Layout给Web布局带了革命性的变化，那么他在原生客户端（也就是APP）开发中，其运用是否也能像Web一样呢？接下来我们就一起来探讨。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascript-why-does-3-true-4-and-7-other-tricky-equations.html",
            "title": "JavaScript：为什么3+true=4?",
            "description": "\n3 + true === 4。学习为什么以及一起探索其他八个有趣的JavaScript方程式。跟随我往下一起探索是不是觉得奇怪？你可以打开你的Chrome浏览器的开发者控制台：Windows系统按下Ctrl + Shift + J，Mac电脑按下Cmd + Option + J。这样做的好处是，让你在控制台输入以下代码，你会可以看到这些代码会发生什么。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/the-simple-rules-to-this-in-javascript.html",
            "title": "JavaScript中this的使用规则",
            "description": "\n在绝大多数情况下，函数的调用方式决定了this的值。this不能在执行期间被赋值，在每次函数被调用时this的值也可能会不同。在函数中this到底取何值，是在函数真正被调用执行的时候确定下来的，函数定义的时候确定不了。这篇文章介绍了JavaScript中this的一些规则，这些规则很简单。最重要的规则是，this决定调用一个函数时的回调是什么。下面简单的罗列一些这方面的规则。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/check-css-animation-performance-with-the-browsers-dev-tools.html",
            "title": "使用浏览器开发者工具检测CSS动画性能",
            "description": "\nCSS动画性能非常好。虽然是简单的几个动画元素，如果你的代码没有让动画表现出其意义或者说使用页面变得更为复杂，网站的用户可能很快就会发现，并且有可能让用户觉得恶心。反而得不到相应的好评。在这篇文章中，我将介绍浏览器开发者工具的一些有用的功能，这些功能将能帮助你检查出你的CSS动画在渲染引擎下会发生些什么。这样，当你的动画看起来有点卡（帧率图有点波涛汹涌），你会找到地应的方法知道为什么为会这样以及如何解决它。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/sticky-headers.html",
            "title": "Sticky Headers",
            "description": "\n在实际业务中经常碰到页头固定在浏览器的顶部，而在移动端上使用position:fixed坑多难搞。记得EFE团队分享过一篇《Web移动端Fixed布局的解决方案》博文，就是介绍如何解决移动端上实现页头固定的技术方案。除了文章中介绍的方案之外，@Brad Frost也推荐了几个JavaScript的解决方案，比如iScroll 4和Scrollability。使用fixed是一种固定页头的，但很多时候是希望实现Sticky Header的效果，说到这里大家可能会想起position新增的属性值sticky。虽然这个能实现我们想要的效果，但这个属性的支持性还是需要等待一段时间。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/breaking-out-with-css-grid-explained.html",
            "title": "阐述CSS Grid实现限宽容器全屏效果",
            "description": "\n在《如何使用CSS Grid布局实现限宽容器全屏效果》一文中介绍了使用CSS Grid布局实现限宽容器全屏效果，特别是全屏图片的效果时常可见。但这篇文章并没有详细阐述为什么使用CSS Grid这种方法。@Rachel Andrew新发的博文尝试阐述其中的原理。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/bear-animation-width-svg.html",
            "title": "一起画只百度熊吧",
            "description": "\n如果你也喜欢萌萌的百度熊，如果你也喜欢SVG，如果你也喜欢动画，那一起动手来写写这个Demo。看看如何使用SVG写一个会动的，萌萌的百度熊\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/lets-learn-ecmascript-6-basics-in-simple-terms.html",
            "title": "用简单的方法学习ES6",
            "description": "\n这里是ES6 简要概览。本文大量参考了ES6特性代码仓库，请允许我感谢其作者@Luke Hoban的卓越贡献，也感谢@Axel Rauschmayer所作的[优秀书籍]//exploringjs.com/es6/)。起初当我听说ES6时，我花了很多精力去消化学习其概念和基础知识。我经历了这些，希望你们无需重蹈覆辙。因此我写下了这篇对ES6及其新特性的简要介绍，所有知识点都解释得通俗易懂，简明扼要，对于像我这样的新人非常友好。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/understanding-the-javascript-forof-loop.html",
            "title": "理解JavaScript中的for...of循环",
            "description": "\nfor...of语句创建的循环可以遍历对象。在ES6中引入的for...of可以替代另外两种循环语句for...in和forEach()，而且这个新的循环语句支持新的迭代协议。for...of允许你遍历可迭代的数据结构，比如数组、字符串、映射、集合等。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/using-es2017-async-functions.html",
            "title": "使用ES2017的异步函数",
            "description": "\nES2017在6月份已经定稿，随之而来的是我最喜欢的JavaScript特性将得到广泛的支持：async函数。如果你以前使用JavaScript的异步函数遇到过困难，那这个就是为您准备的。如果你没有，那么，你可能是这方面的高手。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/learn-javascript-es-2017-string-padding-padstart-padend.html",
            "title": "学习JavaScript ES 2017: padStart & padEnd",
            "description": "\nES 2017推出padStart和padEnd。学习如何使用他们你可能在三分钟内就能掌握。这两个方法都可以接受两个参数，第一个参数是指定结果字符串的length，第二个参数是将要给指定字符串中添加的字符。他们都有可能会重复添加。两者不同的是，padStart()是从一个字符串的左边开始填充（前置），padEnd()是从一个字符串的右边开始填充（后置）。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/postcss-and-crazy-things-you-can-do-with-it.html",
            "title": "PostCSS和一些有兴趣的东西",
            "description": "\nPostCSS是一个很有趣的项目。简而言之，它将CSS转换成抽象语法树(AST)，也就是JavaScript可以操作的一种数据形式。基于JavaScript的PostCSS插件可以执行不同的代码操作。PostCSS本身并没有改变你的CSS，它请允许插件执行和转换你的代码。实际上，对于CSS的操作，PostCSS插件并没有任何限制。只要你有想得到的，你都可以写一个PostCSS插件来实现。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/reloading/preload-prefetch-and-priorities-in-chrome.html",
            "title": "Preload，Prefetch 和它们在 Chrome 之中的优先级",
            "description": "\n今天我们来深入研究一下 Chrome 的网络协议栈，来更清晰的描述早期网络加载（像 <link rel=“preload\"> 和 <link rel=“prefetch”>）背后的工作原理，让你对其更加了解。像其他文章描述的那样，preload 是声明式的 fetch，可以强制浏览器请求资源，同时不阻塞文档 onload 事件。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/prefetching-preloading-prebrowsing.html",
            "title": "资源预加载",
            "description": "\n当提到前端性能优化时，我们首先会联想到文件的合并、压缩，文件缓存和开启服务器端的 gzip 压缩等，这使得页面加载更快，用户可以尽快使用我们的 Web 应用来达到他们的目标。资源预加载是另一个性能优化技术，我们可以使用该技术来预先告知浏览器某些资源可能在将来会被使用到。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/paint-timing-api.html",
            "title": "使用 Paint Timing API",
            "description": "\n现在是成为 Web 性能爱好者的最佳时间，特别是 Chrome 60 的 Paint Timing API 的出现更加证明了这一事实。虽说 Paint Timing API 仍属于正在激增的 Performance API 之一，但是它还提供了抓取 页面 和 资源 耗时的能力，通过这个全新的实验性 API，你可以在页面开始绘制时就去抓取你需要的度量值。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-evolution.html",
            "title": "写CSS的姿势",
            "description": "\n前两天去帝都参加第三届FEDay前端开发者大会，见了很多老朋友，也认识了很多新朋友。最主要的是听了很多大神的分享，涨了不少的姿势。想写这篇文章的出发点是PostCSS作者@Andrey Sitnik分享完之后有些同学提问，让我有感而发。希望这篇文章对一些同学有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/inside-a-super-fast-css-engine-quantum-css-aka-stylo.html",
            "title": "深入了解一个超快的 CSS 引擎: Quantum CSS (也称 Stylo)",
            "description": "\n或许你听说过 Quantum 项目。 它是对于 Firefox 内部的一个重大改写，以达到让 Firefox 更快运行的目的。我们将实验性的浏览器 Servo 的一部分功能调换出来，并对引擎的其他部分做除了重大的改进。这个项目好比一架正在飞行的飞机的引擎。我们对适当的地方进行改进，一个一个组件地改进, 当着这些组件准备好的时候，你就能够看到它对 Firefox 的影响。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/animation-exploration-for-taobao-mobile.html",
            "title": "手淘互动动效的探索",
            "description": "\n现在的营销活动，用一张简单的图片去吸引消费者已经远远不够，必须要有能给消费者带来视觉冲击的东西，或者在动画过程中提供更好的引导部分。手淘的前端团队经历了从Gif、视频到CSS Animation的从0-1的过程，并致力于研究的数据化驱动的动效。大漠将为我们带来在手淘互动动效上的探索分享。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-critical-request.html",
            "title": "关键请求",
            "description": "\n网站服务看起来很简单：发送HTML，浏览器进行处理并加载资源，然后我们只要耐心的等页面渲染好即可。但是你很少知道，整个过程背后发生了很多事情。你有没有想过，浏览器如何知道应该加载哪些资源，并且以什么顺序来加载这些资源？今天我们将看看如何利用资源优先级来提高加载速度。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/collection-interesting-facts-css-grid-layout.html",
            "title": "CSS Grid Layout一些有趣的事情(1)",
            "description": "\n几周前，我举办了一个有关于CSS Grid Layout的研讨会。我和大多数人一样，对这个话题也很陌生，我在准备PPT和DEMO的时候学到了很多东西。我决定和大家一起分享一些我觉得其中特别感兴趣的东西。希望大家对这些也会感兴趣。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/5-css-properties-that-you-probably-don-not-know.html",
            "title": "5个你可能不知道的CSS属性",
            "description": "\n每年都有新的CSS属性被标准化，并在主流浏览器中可用。 它们旨在使Web开发人员的工作变得轻松，创造出新颖美丽的网站。在这篇文章中，我将介绍5个相对较新的CSS属性，你可能从来没有听说过，我觉得很有趣。 本文的目的是带领你总览这些CSS的属性，告诉你可以使用哪些值，它们的使用场景，还有一些例子。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/Virtual-DOM-diff.html",
            "title": "深度剖析：如何实现一个 Virtual DOM 算法",
            "description": "\n本文会在教你怎么用 300~400 行代码实现一个基本的 Virtual DOM 算法，并且尝试尽量把 Virtual DOM 的算法思路阐述清楚。希望在阅读本文后，能让你深入理解 Virtual DOM 算法，给你现有前端的编程提供一些新的思考。本文所实现的完整代码存放在 Github。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/the-5-things-you-need-to-know-to-understand-react.html",
            "title": "掌握这5大核心概念，你就理解了React",
            "description": "\n几年前，我的一个朋友向我吹捧有个叫做React的框架会如何革新Web开发。其实一开始我觉得它只是又一个昙花一现的框架罢了。可在之后的时间里，React名声鹊起，逐渐变得不容小觑了。也许你和我之前的状况差不多：总是听到React这儿好那儿爽，可是真正坐下来学习React的时候又毫无头绪。好消息是我在这里替你总结了，其实React只有“五大核心概念”。不过也请不要误会我的意思，并不是说我一篇文章就能能让你摇身一变成为精通React的大神，但如果你打算或者正在学习React的话，我至少能帮你理清思路。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/stateful-vs-stateless-components.html",
            "title": "React中的无状态和有状态组件",
            "description": "\n组件的概念在Web中应用的场景已经相当广泛了。而React是专注于View层的，组件也是React核心理念之一，一个完整的应用将由一个个独立的组件拼装而成。组件也是React最基础的一部分，欲想征服React，那么了解和编写组件就显得尤为重要。在上一篇文章，咱们就写了一个最简单的React组件，而且在文章末尾，咱们留了一个问题，怎么创建无状态和有状态的React组件？接下来，就一起来了解React中的无状态和有状态的组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/wai-aria/web-accessibility.html",
            "title": "提高网页可访问性的十条建议",
            "description": "\n这篇文章提供了十条有关于提高网页可访问性的指导原则，这些原则将保证提高你网站的可访问性。引用万维网（W3C）的创始人@Tim Berners-Lee一句话来说网络的力量是它的普遍性。作为靠制作网站谋生的人，我们有责任确保每个人都能更好接触到他们。网页可访问性似乎是一项艰巨的任务，但它确实比听起来要容易很多。这十条网页可访问性准则旨在确保所有网站都是通用的。这不仅能帮助屏幕阅读器用户，而且还能改善浏览体验，以减缓连接速度。我们已经按照实施时间对我们的指导方针进行了排序，让您清楚地了解在这个过程中需要付出多大的努力。在你不知所措之前，请相信我的话，这是值得的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-modules-part-2-getting-started.html",
            "title": "开始CSS模块",
            "description": "\n这里不止一种方法来让CSS模块与JavaScript模板、CSS文件或者构建步骤运行起来。这篇文章作为CSS模块系列文章的一部分，我们学习一种方法。本文的目的就是开始一个CSS模块项目并且运行起来。在这个项目中，要求CSS决不能依赖客户端JavaScript运行，所以构建步骤需要在部署之前将所有东西处理成可运行的HTML和CSS。我们将使用Webpack，一款构建系统和模块打包工具。在下一篇文章中我们将集中使代码处于一个渲染静态HTML的浏览器的真实的项目中。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/which-array-function-when.html",
            "title": "数组函数有哪些，什么时候用？",
            "description": "\n很多时候你可能很纠结，你应该使用reduce更多或者你不应该使用filter，更应该使用map；或者是for，为什么不使用forEach？是不是太纠结了。事实上呢？数组和数组的迭代函数对于初学者来说都会感到困惑，所以我将试着为每个简化问题，最后提出的问题是：你想要返回什么？\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/seven-ways-to-define-a-component-template-by-vuejs.html",
            "title": "Vue.js 定义组件模板的七种方式",
            "description": "\n在 Vue 中定义一个组件模板，至少有七种不同的方式（或许还有其它我不知道的方式）：字符串、模板字面量、x-template、内联模板、render 函数、JSF和单文件组件。在这篇文章中，我将通过示例介绍每个选项，并探讨利弊。以便你知道在任何特定情况下最适合的是哪一种。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/components-props-slots.html",
            "title": "Vue:组件，Props，Slots",
            "description": "\n这是关于 JavaScript 框架 Vue.js 五个教程的第二部分。在这一部分，我们将学习组件，Props 以及 Slots。这个系列教程并不是一个完整的用户手册，而是通过基础知识让你快速了解 Vuejs 以及它的用途。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/es6-in-depth-template-strings.html",
            "title": "深入解析 ES6：模板字符串",
            "description": "\n在 ES6 中引入了一种新的字符串字面量 —— 模板字符串，除了使用反引号 (`) 表示，它们看上去和普通的字符串没有什么区别。在最简单的情况下，他们就是普通的字符串。之所以被称为模板字符串，是因为模板字符串为 JS 引入了简单的字符串插值特性，也就是说，可以方便优雅地将 JS 的值插入到字符串中。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/form-validation-part-4-validating-the-mailchimp-subscribe-form.html",
            "title": "表单验证第四部分: MailChimp订阅表单中的验证",
            "description": "\n在这个系列的上几篇文章中, 我们已经学会了如何使用输入类型和验证属性本地进行表单验证。我们也学会了如何使用约束验证 API 来提高浏览器原生的验证能力以提供更好的用户体验。 并且我们写了一个 polyfill 将支持一直延伸到IE9（并在一些较新版本中添加了几个功能）。现在, 让我们把学到的知识运用到一个真实的例子中:MailChimp注册表单。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-modules-part-1-need.html",
            "title": "什么是CSS模块以及你为什么需要它们？",
            "description": "\n我最近对CSS模块很好奇。如果你还没有听说过它们，这篇文章就是为你而写。我们将了解CSS模块以及它的目的是什么。如果你也感兴趣，请持续跟踪，下一篇文章将关于怎样使用CSS模块。如果你想进一步提高你的CSS模块使用技能，第三部分将关于在React环境中使用它们。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/v-bind.html",
            "title": "Vue 2.0学习笔记：v-bind",
            "description": "\n经过前面的学习，我们知道v-on可以实现事件绑定，v-model可以实现双向数据绑定。在Vue中除了这两个指令，还有一个v-bind指令。它可以往元素的属性中绑定数据，也可以动态地根据数据为元素绑定不同的样式。简单说，v-bind是用来绑定HTML属性。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/rendering-directives-events.html",
            "title": " Vue:渲染、指令和事件",
            "description": "\n如果要我用一句话描述使用 Vue 的经历，我可能会说“它如此合乎常理”或者“它提供给我需要的工具，而且没有妨碍我的工作”。每当学习 Vue 的时候，我都很高兴，因为很有意义，而且很优雅。以上是我对 Vue 的介绍。在我第一次学习 Vue 的时候，我就想要这样的文章。如果你倾向于无党派的方法，请查阅 Vue 简单易懂的 用户指南。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/react-learn-2-1.html",
            "title": "从零学习React技术栈:JSX 入门",
            "description": "\nJSX 其是一个语法扩展，它既不是单纯的字符串，也不是 HTML，虽然长得和 HTML 很像甚至基本上看起来一样。但事实上它是 React 内部实现的一种，允许我们直接在 JS 里书写 UI 的方式。有些同学来看 JSX 可能也会觉得它像一种模板语言之类的。事实上也不是，它就是基于 JavaScript，在 React 当中的一种语法扩展的实现。JSX 被用来创建 React 当中的 Elements，React 当中的元素。然后 React 再通过一些方法，把 JSX 创建的元素，渲染成我们在浏览器当中看到的 DOM元素。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/form-validation-part-3-a-validity-state-api-polyfill.html",
            "title": "表单验证第三部分: 一个Validity State API Polyfill",
            "description": "\n在这个系列的上一篇文章中, 我们创建了一个轻量级的脚本 (6kb, 2.7kb缩小后) 使用这个 Validity State API 来提高原生的表单验证体验。 这个脚本可以在所有的现代浏览器上运行，并且支持 IE10版本以下的浏览器。但是，浏览器本身仍然具有一些缺陷。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/understanding-css-modules-methodology.html",
            "title": "理解CSS模块化",
            "description": "\n在瞬息万变的前端开发世界中，很难找到一个真正有意义的概念，并且将其清晰明了的向广大人民群众普及。把目光投向CSS，一个重大转折就是CSS预处理器的出现（在工具方面来看），其中， Sass应该是最为著名的一个。此外，还有 PostCSS，它和Sass略有不同，但是殊途同归——都是用浏览器不能解析的语法编写，并且最终编译成浏览器能够理解的语法。现在，又有一位新的成员出现了，它就是CSS模块。本文就将介绍CSS模块化的诸多优点，以及如何编写模块化的CSS。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/optimize-DOM-operations.html",
            "title": "React.js小书：优化 DOM 操作",
            "description": "\n看看上一节我们的代码，仔细留意一下 changeLikeText 函数，这个函数包含了 DOM 操作，现在看起来比较简单，那是因为现在只有 isLiked 一个状态。由于数据状态改变会导致需要我们去更新页面的内容，所以假想一下，如果你的组件依赖了很多状态，那么你的组件基本全部都是 DOM 操作。一个组件的显示形态由多个状态决定的情况非常常见。代码中混杂着对 DOM 的操作其实是一种不好的实践，手动管理数据和 DOM 之间的关系会导致代码可维护性变差、容易出错。所以我们的例子这里还有优化的空间：如何尽量减少这种手动 DOM 操作？\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/es6-block-scoping.html",
            "title": "ES6学习笔记：块级作用域绑定",
            "description": "\n过去，JavaScript的变量声明机制不像C语言一样，在声明变量的同时也会创建变量（绑定）。在以前的JavaScript中何时创建变量要看怎么声明变量。在以前的变量作用域有全局作用域和局部作用域，但不像其他的程序语言有块作用域一说。在ES6中新引入的块级作用域绑定机制。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/the-inner-workings-of-virtual-dom.html",
            "title": "Virtual DOM 的内部工作原理",
            "description": "\n虚拟DOM (VDOM，也称为 VNode) 是非常神奇的，同时也是复杂难懂的。 React，Preact 以及其他类似的 JS 库都使用了虚拟 DOM 技术作为内核。可惜我找不到任何靠谱的文章或者文档可以简单又清楚解释清虚拟DOM的内部细节。所以，我就想到自己动手写一篇。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/difference-explicit-implicit-grids.html",
            "title": "显式网格和隐式网格的区别",
            "description": "\n网格布局最终使我们能够在CSS中定义网格，并将项目放置到网格单元格中。这本身就很好，但事实上我们也不必指定每个网格轨道，也不必手动拖动每一个网格项目。网格足够灵活，可以适应它们的网格项目。这些都由所谓的显式和隐式网格来处理的。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/conditionally-applying-css-class-vue-js.html",
            "title": "在Vue中有条件地使用CSS类",
            "description": "\n很多时候Web在运行时要更改元素的CSS类名。但是在改变类名时，有时最好是有条件地应用样式。例如你有一个翻页的效果。翻页效果通常有一个高亮的效果，用于向用户显示当前页，这对于用户而言是很有帮助的。该项目的样式是有条件设置的，基于当前正在查看的页面。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/react-js-book-let-us-start-with-a-simple-example.html",
            "title": "React.js小书：从一个简单的例子讲起",
            "description": "\nReact.js 是一个帮助你构建页面 UI 的库。如果你熟悉 MVC 概念的话，那么 React 的组件就相当于 MVC 里面的 View。如果你不熟悉也没关系，你可以简单地理解为，React.js 将帮助我们将界面分成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，就成了我们的页面。一个组件的显示形态和行为有可能是由某些数据决定的。而数据是可能发生改变的，这时候组件的显示形态就会发生相应的改变。而 React.js 也提供了一种非常高效的方式帮助我们做到了数据和组件显示形态之间的同步。React.js 不是一个框架，它只是一个库。它只提供 UI （view）层面的解决方案。在实际的项目当中，它并不能解决我们所有的问题，需要结合其它的库，例如 Redux、React-router 等来协助提供完整的解决方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-notch-and-css.html",
            "title": " iPhone X的缺口和CSS",
            "description": "\n苹果公司（Apple）的发布会也开完了，新产品也将登陆了。估计很多开发人员看到iPhone X的设备是要崩溃了，特别对于前端开发人员更是如此。iPhone X的屏幕覆盖了整个手机的屏幕，为相机和其他各部件留出了一个空间。结果是屏幕设计出现了一些尴尬的情况。比如将网站限制在一个“安全区域”。而在屏幕上的安全区域中，造成网站左边或右边有空白区域。很多像我这样的前端开始在考虑，这个蛋疼的东西怎么处理。而且项目中肯定要考虑这个设备的处理方式。值得庆幸的是，有两个小技巧或许可以帮助我们。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/create-the-first-react-component.html",
            "title": "写第一个React组件",
            "description": "\n什么是React？咱们在这不阐述，有关于这方面的介绍可以查阅官网或者互联网上相关的教程。咱们今天来学如何写一个React组件。对于像我这样初次接触React的人而言，总感觉React非常的神秘，也无法入手。最近也看了一些相关的教程，开始自己尝试写一个简单的React组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/custom-radio-and-checkbox-component-with-vue.html",
            "title": "Vue 2.0学习笔记：自定义表单组件",
            "description": "\n上一节中，通过v-model的学习，我们可以实现双向数据绑定的的效果。在整个教程中，我们看到的示例都是表单控件方面的。实际上v-model还可以和组件结合在一起实现双向数据的绑定效果。在Web的表单控件中，我们经常为了一些特殊的视觉效果，做自定义的表单风格，比如单选按钮、复选框和下拉选择框之类的。那么我们通过Vue来做这些表单控件的组件，会让我们变得更为轻松，而且一劳永逸。接下来我们看看怎么实现单选按钮和复选框的组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/react-learn-1.html",
            "title": "从零学习 React 技术栈系列教程",
            "description": "\nHello大家好，我是余博伦，在接下来的一段时间里，由我和大家从零开始共同学习React技术栈的相关知识。教程将会以连载的形式发布在我的个人博客和微信公众号上，以文字教程为主，辅以一些代码示例供同学们参考，在连载结束之后，我会将所有内容整理为电子书提供下载。连载时教程会在每日早晨由公众号推送，同时为了方便一些外链和代码示例，可以在本博客查看教程。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/higher-order-components-for-beginners.html",
            "title": "面向初学者的高阶组件教程",
            "description": "\n谈点：一篇面向初学者的 HOC 介绍。高阶组件听起来挺唬人的，只看名字恐怕不是那么容易明白究竟是何物，而且通常来讲高阶组件并不是组件，而是接受组件作为参数，并且返回组件的函数。早期利用 ES5 的 mixin 语法来做的事，基本都可以使用高阶组件代替，而且能做的还有更多。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/react-learn-1-2.html",
            "title": "从零学习React技术栈: npm的安装配置和React开发环境配置",
            "description": "\n工欲善其事，必先利其器。在正式学习 React 技术栈之前，我们先来介绍一下之后经常要使用到的 npm。npm 是一个基于 Nodejs 的 JavaScript 包管理工具，全称叫做 Node Package Manager，所谓的包呢，其实就是可复用的代码，每个人都可以把自己编写的代码库发布到 npm 的源（英文叫做 registry）上面进行管理，你也可以下载别人开发好的包，在你自己的应用当中使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/es6-scoping-variables.html",
            "title": "ES6中的变量和作用域",
            "description": "\nES6提供了两种新的声明变量的方法：let和const，它们主要替换ES5中使用var声明变量。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/understand-the-Virtual-DOM.html",
            "title": "理解 Virtual DOM",
            "description": "\n使用过React的同学对于Virtual DOM并不陌生，作为React的重要核心概念，Virtual DOM凭借其高效的diff算法，让我们不用关心应用的性能问题，毫无顾忌地修改各种数据状态。在实际的开发中，我们并不需要关注Virtual DOM在一个框架中是如何运行的，但是理解Virtual DOM的实现原理却是非常有必要的，同时也有助于我们更加深入React。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/form-validation-part-2-the-constraint-validation-api-javascript.html",
            "title": "表单验证第二部分: 约束验证 API",
            "description": "\n在上一篇文章中, 我向大家展示了如何通过组合输入类型 (例如, <input type='email'>) 和验证属性 (像required和 pattern)来使用原生的浏览器表单验证机制。诚然,这种方式非常的简单而且轻量级。但是它仍然具有一些缺点 。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/techniques-for-decomposing-react-components.html",
            "title": "React 组件设计和分解思考",
            "description": "\n今天再来同大家讨论 React 组件设计的一个有趣话题：分解 React 组件的几种进阶方法。React 组件魔力无穷，同时灵活性超强。我们可以在组件的设计上，玩转出很多花样。但是保证组件的Single responsibility principle: 单一原则非常重要，它可以使得我们的组件更简单、更方便维护，更重要的是使得组件更加具有复用性。但是，如何对一个功能复杂且臃肿的 React 组件进行分解，也许并不是一件简单的事情。本文由浅入深，介绍三个分解 React 组件的方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/requestAnimationFrame.html",
            "title": "被誉为神器的requestAnimationFrame",
            "description": "\n与setTimeout和setInterval不同，requestAnimationFrame不需要设置时间间隔。这有什么好处呢？为什么requestAnimationFrame被称为神器呢？本文将详细介绍HTML5新增的定时器requestAnimationFrame。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-architecture-3.html",
            "title": "编写模块化的CSS:CSS文件组织结构",
            "description": "\n在之前两篇文章中我们已经讨论过如何使用BEM和Namespace来编写模块化的CSS。这篇文章中，我想避开把CSS选择器作为CSS文件结构和组织的依据的方法。如果你思考过关于什么是文件组织的最佳实践，或者怎样能够在项目目录中更容易的找到你要找的CSS文件，或者一个文件应该是多大或者多小合理等问题，那么这篇文章就是为你写的。让我们先看下你一般组织资源的两种方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/build-a-simple-todo-app-with-vue-js.html",
            "title": "使用Vue.js和Vuex 2.0构建一个简单的Todo应用程序",
            "description": "\n这篇文章将介绍使用最新版本的Vue.js和Vuex构建应用程序的一些基本知识。我们还可以添加很多其他功能来增强这个应用程序的功能，但我希望这个简短的介绍能帮助你更好地理解如何使用Vue和Vuex 2.0来编写应用程序。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/basic-environmental-installation.html",
            "title": "React.js小书：基本环境安装",
            "description": "\nReact.js 单独使用基本上是不可能的事情。不要指望着类似于 jQuery 下载放到 <head /> 标签就开始使用。使用 React.js 不管在开发阶段生产阶段都需要一堆工具和库辅助，编译阶段你需要借助 Babel；需要 Redux 等第三方的状态管理工具来组织代码；如果你要写单页面应用那么你需要 React-router。这就是所谓的“React.js全家桶”。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/create-react-component-on-codepen.html",
            "title": "如何在Codepen上创建React组件",
            "description": "\nReact是Facebook开源的一个JavaScript框架。大型Web应用或单页应用程序（SPA）中进行视图（View）的渲染，React是理想的选择。也就是说，React 主要只专注于 MVC 中的 V，也就是视图层。对于初学者而言，多写React项目能更好的帮助我们学习React。那么有一个运行React的环境，能帮助初学者解决很多没有必要的烦恼。在这篇文章中，简单的介绍如何在Codepen上创建React组件或者项目。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/what-are-css-modules.html",
            "title": "可视化介绍CSS Modules是什么？",
            "description": "\n你是否曾经为组件设计过样式，却只知道应用了不需要的CSS规则?也许你会重新考虑CSS的另一个部分，所以规则不适用，或者你会添加!important规则，只是为了让它发挥作用。这就是CSS Modules要解决的问题。让我们看看CSS Modules的官方定义：CSS Module是一个CSS文件，所有类名和动画名称默认都在本地范围内。这里的关键词是局部范围的。使用CSS Module，你的CSS类名与JavaScript中的本地变量类似。顺便说一下，CSS Module只是一个.css文件。如果你打算使用CSS Module编译器，你可以把它叫做CSS Module。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/form-validation-part-1-constraint-validation-html.html",
            "title": "表单验证第一部分:使用 HTML 和 CSS技巧对表单进行约束验证",
            "description": "\n大多数的JavaScript表单验证类库体积都非常庞大，而且往往需要引入其他的库，像jQuery。\n例如，MailChimp的嵌入式表单，包含了140kb的 验证文件(压缩后)。它引入了整个jQuery库，以及一个第三方的表单验证插件，还有一些原生的MaiChimp代码。实际上，正是MailChimp的嵌入式表单引发了我对于现代表单验证的一系列思考。我们现在有哪些新工具可以进行表单验证？哪些是可行的？哪些又是仍然需要的？\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/es6-scoping.html",
            "title": "ES6中的变量和作用域",
            "description": "\n这篇文章主要探讨和学习如何在ES6中处理变量和作用域。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/JavaScript-setTimeout-and-setInterval.html",
            "title": "理解setTimeout和setInterval",
            "description": "\n很长时间以来，定时器一直是JavaScript动画的核心技术。但是，关于定时器，人们通常只了解如何使用setTimeout()和setInterval()，对它们的内在运行机制并不理解，对于与预想不同的实际运行状况也无法解决。本文将详细介绍定时器的相关内容。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/components-nesting-and-component-trees.html",
            "title": "React.js小书：组件的组合、嵌套和组件树",
            "description": "\n继续拓展前面的例子，现在我们已经有了 Header 组件了。假设我们现在构建一个新的组件叫 Title，它专门负责显示标题。你可以在 Header 里面使用 Title组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/state-of-the-art-in-css.html",
            "title": "CSS中的艺术",
            "description": "\n本文介绍了用于大型Web应用程序（通常是SPA）的CSS最新趋势。我不想质疑这是对的还是错的，而是把它们列出来。以供大家参考和讨论。最初，Web页面被设计成具有超链接的信息页面（即使图像也不应该是内联的——它被解释为，在1990年，带宽和计算机资源非常小），类似交互式图书的东西。CSS的设计是为了添加一些基本的样式，最初它看起来像是一个好主意，用你自己的风格覆盖外部风格。现在，它绝对是一个疯狂的想法 —— 尝试应用自己的样式，比如说页头。开发人员绝对不会期望这些样式是来自于用户。其中最有趣的一点是，它是由微软推动的，你可以在这里阅读到它。这篇文章涉及面非常广泛，但我将跳过最初的部分，直接进入重要的内容中。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/tips-to-learn-react-redux.html",
            "title": "2017 年学习 React + Redux 的一些建议",
            "description": "\n使用 React + Redux 这个技术栈开发应用已经有很长一段时间了，我的一些使用经验也许会有些主观，但我觉得写出来也许对你开始学习或是进阶使用 React + Redux 会有些帮助。Redux 并不是只和 React 结合使用的，它也可以和其他的很多类库结合起来一起使用，即使你还未开始深入使用，你也可以阅读文中的部分内容。同时，如果你有一些建议或是疑惑，可以在 Github 给我提交 Issue，很乐意与你一起交流。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-architecture-2.html",
            "title": "编写模块化的CSS:命名空间",
            "description": "\n上周，我分享了如何使用BEM创建一个合理的CSS架构。 虽然BEM很棒，但它只是解决方案的一部分。 还有另一部分我还没有提到 —— 命名空间。在今天的这篇文章中，我想与大家分享一下为什么只用BEM还是不够的，以及如何使用命名空间来弥补一些不足。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/build-a-to-do-app-with-vue-js-2.html",
            "title": "使用Vue.js 2创建To-Do App",
            "description": "\nVue是一个简而小的渐进式JavaScript框架，可用于增量地构建强大的Web应用程序。Vue是其他JavaScript框架（如AngularJS）的轻量级替代品。通过对HTML、CSS和JS的理解，你应该准备好与Vue一起运行。在本文中，我们将使用Vue构建一个To-Do的应用程序，同时突出显示它能提供的优秀特能和功能。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/why-display-contents-is-not-css-grid-layout-subgrid.html",
            "title": "为什么是display:contents而不是CSS Grid的subgrid",
            "description": "\n在CSS Grid Layout中，如果没有人提出display:contents;来解决一部分问题，那么你就无法深入的讨论CSS Grid Layout中的subgrid，那么我们真的需要subgrid？事实并非如此，display:contents的确帮我们解决了这类问题，但这些问题与subgrid帮助我们解决的问题不同。在这篇文章中，我将用实例来介绍他们的不同之处。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-houdini.html",
            "title": "CSS魔术师Houdini API介绍",
            "description": "\n今天想继续 CSS 的议题，常常会觉得学 CSS 的新技术不太划算，因为每次看到新的 Feature 出现，都只能当下兴奋几分钟，然后就会认命接受可能还要再等个五年才能真正使用的可能性…如果你有跟我一样的感受，那今天这篇文章或许可以带给你一丝丝希望。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/v-model.html",
            "title": "Vue 2.0学习笔记：v-model",
            "description": "\n通过前面的学习，我们可以顺利的在Vue中将数据源渲染到HTML的DOM元素中，但很多时候我们希望能控制数据源。也就是数据绑定，并且与其通讯。简单的说，怎么在Vue中实现数据的双向绑定。这种场景一般都是在表单的操作情景中。在Vue中可以使用v-model的指令来实现。不过这篇文章我们只是来学习v-model指令的使用，但不探究Vue数据双向绑定的原理。如果你对原理方面感兴趣，可以阅读这篇文章。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/react-learn-2-2.html",
            "title": "从零学习React技术栈:组件类型",
            "description": "\n这一节的内容会比较多，如果是刚刚入门的新同学一时半会儿可能会接受不了，而且基本都属于理论知识。如果你在阅读时发现理解有困难也不需要灰心，可以把本篇教程当作随时可供查阅的文档，等到你在实践中积累了一定的代码量之后再回过头来阅读文章就会感觉非常轻松啦。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascript-array-api.html",
            "title": "JavaScript数组所有API全解密",
            "description": "\n数组是一种非常重要的数据类型，它语法简单、灵活、高效。 在多数编程语言中，数组都充当着至关重要的角色，以至于很难想象没有数组的编程语言会是什么模样。特别是JavaScript，它天生的灵活性，又进一步发挥了数组的特长，丰富了数组的使用场景。可以毫不夸张地说，不深入地了解数组，不足以写JavaScript。截止ES7规范，数组共包含33个标准的API方法和一个非标准的API方法，使用场景和使用方案纷繁复杂，其中有不少浅坑、深坑、甚至神坑。下面将从Array构造器及ES6新特性开始，逐步帮助你掌握数组。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/talk-about-front-end-state-management.html",
            "title": "浅谈前端状态管理",
            "description": "\n近两年前端技术的发展如火如荼，大量的前端项目都在使用或转向 Vue 和 React 的阵营，由前端渲染页面的单页应用占比也越来越高，这就代表前端工作的复杂度也在直线上升，前端页面上展示的信息越来越多也越来越复杂。我们知道，任何状态都需要进行管理，那么今天我们来聊聊前端状态管理。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-architecture-1.html",
            "title": "编写模块化CSS：BEM",
            "description": "\n你是否做过多页面的大型网站或者其中一部分？如果你做过，你可能会意识到 CSS 架构不够强大所带来的恐惧。你可能还会研究如何编写可维护的 CSS。由于我们的行业很棒，我们有很多推荐的解决方案。因为专家们的纷纷加入，于是我们有 BEM，OOCSS，SMACSS，Atomic Design 等许多选择。现在，问题不是痛苦 “我不知道该怎么办”，而是： “有这么多的方法，我应该尝试哪个？”我是不是应该把所有的都用一遍，是不是只有一种方法才适合我，或者我是不是应该参考它们做一个自己的架构？。我开始只用一种方法。然后，当我尝试不同的方法时，我开始把我认为有意义的东西包含在我的探索过程中。 在这篇文章中，我想和大家分享一下我如何构建 CSS 以及为什么我这样做。 希望它可以帮助你找到你喜欢的方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/how-to-iterate-easily-over-object-properties-in-javascript.html",
            "title": "如何遍历JavaScript中对象属性",
            "description": "\n在2016年6月发布的ECMAScript 2016的同一时期，令JavaScript开发人员开心的是知道另一组很棒的提案已经达到了第4阶段（完成）。当然，你不必等到ES2017发布，或者直到供应商（浏览器）实现了新功能！Babel已经包含了这些已完成的提案中的大部分特性。本文主要讨论如何改进对象属性的迭代：使用Object.values()获取对象属性和 使用Object.entries()获取属性key/value。乍一看，这些静态函数似乎并没有带来显著的价值。但是当它们与for...of循环配合使用，你会得到一种简而美的遍历对象的属性的方式。\n让我们一探究竟吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/render.html",
            "title": "React.js小书：组件的 render 方法",
            "description": "\nReact.js 中一切皆组件，用 React.js 写的其实就是 React.js 组件。我们在编写 React.js 组件的时候，一般都需要继承 React.js 的 Component（还有别的编写组件的方式我们后续会提到）。一个组件类必须要实现一个 render 方法，这个 render 方法必须要返回一个 JSX 元素。但这里要注意的是，必须要用一个外层的 JSX 元素把所有内容包裹起来。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/fix-1px-for-retina.html",
            "title": "再谈Retina下1px的解决方案",
            "description": "\n在互联网上有关于1px边框的解决方案已经有很多种了，自从使用Flexible库之后，再也没有纠结有关于1px相关的问题。由于最近在考虑新的移动端适配方案，也就是放弃Flexible库，我不得不考虑重新处理1px的方案。为此为我自己也重撸了一些1px的解决方案，整理出来，希望对有需要的同学有帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/designing-websites-for-iphone-x.html",
            "title": "iPhone X的Web设计",
            "description": "\n在新的iPhone X的Safari浏览器中为你的网站显示留有边缘。内容自动设置在显示的安全区域内，这样它就不会被圆角或设备的传感器外壳遮挡住（俗称iPhone X的刘海）。在<body>或<html>元素中指定与页面的background-color一样的颜色用来填充整个页面。这样页面的安全区域和其余部分混合在一起。对于许多网站来说，这已经足够了。如果你的页面只有文本和图片，那么背景色的设置看起来也非常不错。对于其他页面——特别是那些设计全宽水平导航栏的页面，比如像下图的页面，可以选择稍微深入一点，充分利用新显示的功能。iPhone X人机界面指南详细介绍了一些通用的设计原则，并且UIKit文档讨论了本地应用程序可以采用的特定机制，以确保它们看起来不错。你的网站可以利用iOS 11中引入的一些类似WebKit API来充分利用边缘的优势。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/vw-for-layout.html",
            "title": "再聊移动端页面的适配",
            "description": "\n前端圈真乱，这话一点不假。但乱也乱的好处，乱则生变，有变化才有进步。今天还是老调重谈，聊聊移动端页面的适配。因为对于一枚前端而言，天天和页面打交道（H5页面），那么布局的活总是少不了，这也将面临不同终端的适配问题。不知道你是否和我一样，页面布局总是或多或少会有一些蛋疼的事情发生。如果是的话，建议你花点时间阅读完下面我扯蛋的东东。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/state-management-of-the-web-front-end.html",
            "title": "Web前端的状态管理",
            "description": "\n我相信很多朋友跟我一样，初次听到什么Flux, Redux， Vuex，状态管理的时候是一脸懵逼的。因为在外面之前前端大部分开发的时候，根本没有那么多的概念。自从ReactJS火爆后，什么Flux, Redux，React全家桶是一套一套接踵而来。搞的很多开发者甚是头大。所谓的ReactJS全家桶即ReactJS + Redux + Webpack，当然其中的Redux可以用其他例如Mobx之类的替换。原本可能只是很简单的一些数据展示需求，当想用尝试使用ReactJS时，去Google搜索了一些教程，突然发现怎么用个React需要这么多东西。正如今年比较有名的一篇文章里面描述的那样 — ”在2016年学习前端是怎样一种体验\"。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/2017-Amsterdam-CSS-Day.html",
            "title": "2017 Amsterdam CSS Day",
            "description": "\n2017 CSS Day于6月15日和16日在Amsterdam举办，到今天已经过去一个多月了。虽然说是CSS Day，但这次话题并不仅仅是有关于CSS方面，这次大会主要分成两个方面的话题：Browser API Special和CSS。第一天主要是有关于Browser API Special（6月15日），第二天主要是有关于CSS的（6月16日）。每个主题各邀请八位世界级的分享嘉宾来分享。比如熟悉的@Philip Walto、@Rachel Nabors、@Chris Coyier、@Rachel Andrew和@Jen Simmons。最近也看了大会相关嘉宾分享的内容，整理一下分享给国内的爱好者。希望大家感兴趣。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/scope-closures.html",
            "title": "JavaScript 核心概念之作用域和闭包",
            "description": "\n相信大家已经阅读了很多关于作用域和闭包文章，我也一样。作用域和闭包是 JavaScript 中的关键概念之一。当我阅读了《高性能的JavaScript》这本书后，我才完全理解这两个概念。所以今天强烈推荐这本书中的解释，并与其他开发人员分享。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/jsx-ui-information.html",
            "title": "React.js小书：使用 JSX 描述 UI 信息",
            "description": "\n这一节我们通过一个简单的例子讲解 React.js 描述页面 UI 的方式。要记住几个点：JSX 是 JavaScript 语言的一种语法扩展，长得像 HTML，但并不是 HTML。React.js 可以用 JSX 来描述你的组件长什么样的。JSX 在编译的时候会变成相应的 JavaScript 对象描述。react-dom 负责把这个用来描述 UI 信息的 JavaScript 对象变成 DOM 元素，并且渲染到页面上。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/more-reasonable-setstate.html",
            "title": "更合理的 setState",
            "description": "\nReact 是我做前端以来接触到的第三个框架（前两个分别是 Angular 和 Vue），无论是从开发体验上和效率上，这都是一门非常优秀的框架，非常值得学习。借助于 Redux，我们可以轻松的对 React 中的状态进行管理和维护，同时，React 也为我们提供了组件内的状态管理的方案，也就是 setState()。本文不会涉及到 Redux，我们将从 Component 的角度来说明你不知道的以及更合理的 setState()。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/vue-two-way-binding.html",
            "title": "Vue的双向绑定原理及实现",
            "description": "\n使用Vue也好有一段时间了，虽然对其双向绑定原理也有了解个大概，但也没好好探究下其原理实现，所以这次特意花了几晚时间查阅资料和阅读相关源码，自己也实现一个简单版Vue的双向绑定版本。是不是看起来跟Vue的使用方式差不多？接下来就来从原理到实现，从简到难一步一步来实现这个SelfVue。由于本文只是为了学习和分享，所以只是简单实现下原理，并没有考虑太多情况和设计，如果大家有什么建议，欢迎提出来。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascript-scope-closures.html",
            "title": "JavaScript中的作用域和闭包",
            "description": "\n作用域和闭包在JavaScript中是两个很重要的概念。刚开始接触的时候，他们一直让我感到非常的困惑。下面是对作用域和闭名解释，以帮助你能更好的了解它们是什么？先从作用域开始。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/react-learn-1-1.html",
            "title": "从零学习React技术栈：React 新版本及 ES6 简介",
            "description": "\n第一节课呢，我们就来简单介绍一下应用在 React 开发当中，属于 ES6 的新的关键字和语法糖，也好为我们之后的学习打下一个基础，当然我更推荐同学们对 ES6 有一个比较全面的了解之后再开始学习 React，不过你也不需要担心，以后在课程中每当遇到涉及 ES6 新语法的问题时，我都会稍作讲解介绍。这是本教程的第一课，主要内容是 ES6 相关的前置知识介绍，如果你有发现不懂的术语，不需要担心，因为在接下来的教程当中，所有我们提到的术语全部都会涵盖讲解。\n "
        },
        {
            "link": "https://www.w3cplus.com/vue/vue-two-way-binding-object-defineproperty.html",
            "title": "Vue双向绑定的实现原理Object.defineproperty",
            "description": "\n2016年，Vue.js可谓是大放异彩，以迅雷不及掩耳之势赶React超Angular，用惯jQuery的我一下子被Vue开篇介绍的双向绑定给惊着了！一下子按捺不住好奇心，打算刨根究底，看看双向绑定到底是怎样实现的？\n "
        },
        {
            "link": "https://www.w3cplus.com/css/postcss-modules-make-css-great-again.html",
            "title": "PostCSS-modules: 让CSS变得更强大",
            "description": "\n多年来，我们一直与全局CSS作斗争。现在是时候结束它了。不管你使用哪种语言或框架，CSS命名的冲突不再是问题。我将向你展示如何使用PostCSS和PostCSS-modules在服务端自动处理它。CSS最初只是用来美化文档的一种工具。自1996年以来，许多事情发生了变化。浏览器不再是文档查看器了。聊天、工作、游戏，几乎没有任何浏览器不能做到的。现在，我们比在HTML中标记文本和使用CSS开发内容的网站要多得多。我们使用CSS来充分发挥它的潜力，创造出它很难处理的东西。\n "
        },
        {
            "link": "https://www.w3cplus.com/animations/raf-promise.html",
            "title": "DIY Web Animations: Promise + rAF + Transition",
            "description": "\nWeb Animation API非常的棒。除了能很好的支持平常动画之外。我发现还可以使用Promise、rAF和CSS Transition来重新创建它们，结果类似人体工程学。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/caret-color.html",
            "title": "如何改变表单控件光标颜色",
            "description": "\n表单大家应该不陌生，当然了，今天并不是来聊怎么做表单或者处理表单的样式网格。而是来聊聊怎么改变表单控件中光标的颜色。不知道在大家心中，表单控件的光标颜色是根据color属性来控制的。那么如果需要用CSS来改变表单控件，比如说input或者textarea元素的光标颜色，应该怎么处理呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/postcss-book.html",
            "title": "深入PostCSS Web设计",
            "description": "\nPostCSS是一种工具，一款已成长为像Sass和LESS一样主流的处理器，这一切都归功于它的强大、速度和易用性。《深入PostCSS Web设计》是使用PostCSS的完全指南，《深入PostCSS Web设计》将指导你如何编写优秀的样式，并将其运用到Web页面，同时让你的样式保持可维护性。这本《深入PostCSS Web设计》将向你展示如何利用PostCSS简化样式表的整个过程。它涵盖了给Web页面添加动态的、现代的样式特性的各种技术。随着内容的深入，你将学习如何使用PostCSS来让CSS更具模块化的特性、更易于维护。读完《深入PostCSS Web设计》，你将掌握如何给Web添加CSS样式表，以及如何创建高执行，可维护的样式表。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/understanding-scope-in-javascript.html",
            "title": "理解JavaScript中的作用域",
            "description": "\nJavaScript有一个名为scope的特性。尽管对于许多新开发人员来说，scope的概念并不是那么容易理解，但我还是会尽我最大的努力，用最简单的内容向你们阐述scope。理解scope将使你的代码脱颖而出，减少错误，并帮助您使用它做出强大的设计模式。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/solve-your-specificity-headaches-with-css-modules.html",
            "title": "使用CSS Modules解决权重的烦恼",
            "description": "\nCSS Modules与W3C无关，而是构建过程的一部分。它编译你的项目，重命名选择器和类，使它变得独一无二作用于各个组件。样式被锁在这些组件中，不能在其他地方使用，除非你有特别需求。现在我们已经习惯了Web技术来驱动App，Web App，移动端和PC端的应用程序。但与简单的静态网站不同的是，应用程序通常更动态、更复杂，而且通常包括组件，甚至超出了Bootstrap和ZURB Foundation提供的功能。当一个应用程序变得复杂起来，管理它的CSS可能是一个如地狱般的任务。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/deformable-particles.html",
            "title": "Canvas粒子系统：3D球体",
            "description": "\n前些日子在Codepen上看到了一个很惊艳的3D特效，一时惊叹，fork下来后，读了一下作者的源码，200多行，十分精简，但是内劲无穷。这里和大家分享一下作者的思路和一些基础的数学知识，\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/template-literals.html",
            "title": "ES6: 模板字符串",
            "description": "\nES6中引入了模板字符串（Template Literal），是创建字符串的一种新方法。有了这个新特性，我们就能更好地控制动态字符串。这将告别长串连接字符串的日子。要创建一个模板字符串，我们可以使用反引号（撇号）字符替找单引号'或\"。这将产生一个新的字符串，我们可以以任何方式使用它。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-modules-part-3-react.html",
            "title": "Webpack入门 以及 CSS模块化",
            "description": "\n这是讲CSS模块化系列文章的最后一篇，我将探索如何通过Webpack来建一个静态的React网站。这个静态网站将包含模板：一个主页和一个包含几个React组件的页面。我们来看看他们是怎么运作的。之前的文章中我们用Webpack快速搭建了一个工程来展示了所有依赖是如何被导入到一个文件的以及在打包过程中如何将一个唯一的classname同时在css和html中生成the basics of React。在之前的演示中，我们知道通过js来渲染我们标签，但是我们不清楚如何构建我们项目。在这篇文章中我们将用一个更真实的例子演示如何通过我们新学的Webpack知识来构建我们的项目。我把之前演示的代码放到Github上了 css-modules-react ，你可以通过这个代码开始下面的例子。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/what-next-for-css-grid-layout.html",
            "title": "CSS Grid布局未来的特性",
            "description": "\nCSS Grid布局规范现在处于候选人推荐状态。这种状态也意味着规范已完成。现在在讨论的是一些实现细节，而不是新功能。规范一些细节是有必要的，以便于浏览器能更好的实现。这对于我们开发人员也是有好处，也使开会更容易。然而这并不意味着停止了工作，而新的用例和特性不能提出Grid布局的未来功能。因此，在这篇文章中我将看看我认为网格布局未来还能做些什么。我喜欢这样去思考，不只是考虑CSS Grid，还可以考虑任何CSS规范。考虑如何更好的适应你的用例。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/variable-organization-in-sass.html",
            "title": "关于更好地组织Sass变量的想法",
            "description": "\n去年的大部分时间我写的CSS都放在一个预处理的Sass文件中，尤其是在一个.scss文件中。对我来说不错，但没有好好利用Sass提供的特性。我的SCSS文件通常比嵌套输出的CSS要小。我大量使用变量和引入不常用的混合宏，但它使用起来是最简单不过的。我想改变现状，并希望你们不要介意,如果我大胆想出如何开始创建更加模块化和可维护的Sass项目。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-grids-flexbox-and-box-alignment-our-new-system-for-web-layout.html",
            "title": "Web布局新系统：CSS Grid,Flexbox和Box Alignment",
            "description": "\nWeb布局非常困难。它如此困难的原因是自从使用CSS来完成Web布局开始就并没有真正的完成复杂的Web布局。虽然我们使用很多技术手段能实现Web的固定布局，但是这些方法在响应式设计中又出现很多局限性与不足。不过值得庆幸的是，我们有了Flexbox模块，或许还有很多读者已经开始使用CSS Grid和Box Alignment模块做Web布局。在这篇文章中，我将解释如何将这些组合在一起使用，你会发现通过对Flexbox的理解，你也能更好的理解Grid布局。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/learn-rollup-js.html",
            "title": "如何使用Rollup打包JavaScript",
            "description": "\n通过这个系列教程一步一步学习如何使用更小更快的Rollup取代Webpack和Browserify打包JavaScript文件。这周，我们要使用Rollup构建我们的第一个项目，Rollup是一个打包JavaScript(和样式，不过下周才会做)的构建工具。\n "
        },
        {
            "link": "https://www.w3cplus.com/canvas/neon-light.html",
            "title": "如何制作霓虹灯动画？",
            "description": "\n绘制好灯泡运动的圆角矩形路径，每个路径点入栈，每次渲染都基于各个路径点坐标绘制小灯泡，周而复始。非常简单，就是步骤比较繁琐，需要定位一个起始点 然后依次。上、右上圆角、右、右下圆角、下、左下圆角、左、左上圆角。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/image-effects-with-css.html",
            "title": "使用CSS处理图像效果",
            "description": "\n一直以来在大家的印象中，处理图像的效果都应该是设计师的工具，甚至这些事情应该都交给PhotoShop之类的设计软件来完成。但是随着CSS的技术发展以及浏览器更新，前端人员通过CSS也可以做一些图像的处理。今天就是想跟大家聊聊如何通过CSS来处理图像效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/react-animation-basic-knowledge.html",
            "title": "React动画的基础知识",
            "description": "\n由于 React 加持了虚拟 DOM 等诸多特性，所以在 React 上实现常规的动画效果有一些特别之处。本文不会深入探讨 React 对动画的处理逻辑，只会简单地演示如何在 React 创建动画效果，因为我也没有做过线上的 React 动画实例，谨以此文抛砖引玉，算是最基础的入门了解。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/component-lifecycle.html",
            "title": "React 初学者教程11：组件的生命周期",
            "description": "\n在开始，我们以一个很简单的视图组件以及他们要做什么开始。随着我们对 React 更多，做了更酷以及更复杂的事情，结果发现组件并非那么简单。它们帮助处理属性、状态、事件，并且经常负责其它组件的幸福。跟踪组件做的所有事情有时可能很难。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/html5-device-orientation-basic-intro.html",
            "title": "陀螺仪的基础知识",
            "description": "\n大家可能还记得前段时间淘宝造物节的宣传动画效果,让自己对CSS 360全景更充满好奇之心。最近有关于这方面的文章也是层出不穷，比如@凹凸实验室团队的@J.c就整理了一篇有关于这方面的文章。尽从效果上，就吸引了大家不少的眼球，当然大家更期待的是如何自己能实现这样的效果。那么我们来开始一起探讨这方面的事情。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/notes-css-dev-conf-2016.html",
            "title": " 2016 CSS Dev Conf会议笔记",
            "description": "\n这篇文章主要是整理了国外两场有关于CSS分享大会分享的相关主题，前面一部分是@Chris Coyier在CSS Dev Conf大会上做的相关笔记。最后在文章末尾附上了2016年CSS Conf分享的相关主题。如果你对CSS相关话题感兴趣的话，可以关注2016年12月17日在中国广州举办的第三届CSS Conf大会相关主题。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-grid-layout-terminology-part1.html",
            "title": "CSS Grid布局：图解网格布局中术语之一",
            "description": "\n如果需要彻底的对CSS Grid布局有所了解，或者想更好的掌握它，那么必须先了解清楚其相关术语。因为CSS Grid布局中的术语较多，只有掌握了这些术语真正含义，后面才能更好的学习CSS Grid布局相关的特性。那么今天就来看看CSS Grid布局中的相关术语。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/introducing-react.html",
            "title": "React 初学者教程 1：React 简介",
            "description": "\n今天的 Web 应用程序除了外观比过去更好看以外，应用程序的架构和创建方式已经和过去有很大的不同。这是一个简单的商品目录浏览应用程序，它和这种类型的其它应用程序一样，通常包含一个主页、一个搜索结果页、一个详情页等等。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/css-3d-panorama.html",
            "title": "【转载】CSS 3D Panorama - 淘宝造物节技术剖析",
            "description": "\n3D 全景并不是什么新鲜事物了，但以前我们在 Web 上看到的 3D 全景一般是通过 Flash 实现的。若我们能将 CSS3 Transform 的相关知识运用得当，也是能实现类似的效果。换句话说，3D 全景其实就是 CSS3 3D 的应用场景之一。\n "
        },
        {
            "link": "https://www.w3cplus.com/how-to-study-front-end.html",
            "title": "前端的学习",
            "description": "\n思考许久才动笔写这篇文章。那么问题来了？为什么要写这篇文章呢？其实有一定的原因。自从录制前端视频上线之后，也有一些同学问我类似的问题，而且也有同学问，应不应该购买视频，或者说参加线下前端培训班，或者说还是自己自学等等。那么今天来聊聊这些个话题。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/getting-sass-y-with-bem.html",
            "title": "如何更好的使用BEM",
            "description": "\nBEM是由Yandex团队提出的一种CSS Class 命名方法，旨在更好的创建CSS/Sass模块。他需要遵循一些特殊规定，有些人认为这些规定很冗余，但是我发现他们对于理解DOM有着很大的帮助。你可以去查看我之前的文章去了解为什么BEM如此伟大。或者你可以去查看这几篇中文文章来了解BEM(《BEM的定义》《为什么我们需要BEM》)。今天这篇文章，是我在假设你对BEM和Sass已经有所了解甚至熟悉的基础上完成的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/difference-between-types-of-css-variables.html",
            "title": "CSS变量和预处理器变量的差异",
            "description": "\n变量是CSS预处理器存在的主要原因之一。为某样东西设置变量的能力，比如颜色，在CSS中让变量保持一致，可DRY，并且易于改变是很有用的。出于相同原因，也可以使用原生CSS变量（“CSS自定义属性”）。但有一些重要的差异应该清楚。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/events-in-react.html",
            "title": "React 初学者教程10：React 中的事件",
            "description": "\n迄今为止，我们所有的示例都是只在页面加载时执行。你可能会猜到，这是不正常的。在很多应用中，特别是重 UI 类型的应用中，应用程序要做的很多事情只是对某种事情的响应。这里，某种事情可能是被鼠标点击、按键、窗口缩放、或者其它手势操作以及交互。而让所有这一切变得可能的粘合剂是事件。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/javascript-animation-algorithm-based-on-time.html",
            "title": "【转载】JavaScript基于时间的动画算法",
            "description": "\n前段时间无聊或有聊地做了几个移动端的HTML5游戏。放在不同的移动端平台上进行测试后有了诡异的发现，有些手机的动画会“快”一点，有些手机的动画会“慢”一点，有些慢得还不是一两点。通过查找资料发现，基于帧的算法（Frame-based）来实现动画会导致不同帧率的平台体验不一致，而基于时间（Time-based）的动画算法可以很好地改良这种情况，让不同帧率的情况下都能达到较为统一的速度上的体验。本文介绍的就是基于帧动画算法和基于时间动画算法的差异，以及对基于时间算法的改良。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/so-you-want-to-be-a-functional-programmer-part-5.html",
            "title": "如何成为一位函数式编程爱好者(Part 5)",
            "description": "\n踏出理解函数式编程概念的第一步是最重要的一步，有时也是最难的一步。不过也不一定，取决于你们的思考方式。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-grid-layout-using-grid-areas.html",
            "title": " CSS Grid布局：网格区域",
            "description": "\n在上一节中，了解了CSS Grid布局中的列和间距，但没有提到网格区域。到目前为止，网格项目都是安置在独立的单元格内，但我们应该打破这样的局限，让网格项目可以超出单元格的界面，实现更多有用的布局。那这一节我们来看怎么实现。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/so-you-want-to-be-a-functional-programmer-part-2.html",
            "title": "如何成为一位函数式编程爱好者(Part 2)",
            "description": "\n踏出理解函数式编程概念的第一步是最重要的一步，有时也是最难的一步。不过也不一定，取决于你们的思考方式。请仔细通读示例代码。确保自己的确看懂了。每一节都是在上一节的基础上进行的。如果你心急跳过了，对后面部分的理解就可能会出现偏差。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/conditions-for-css-variables.html",
            "title": "CSS条件变量",
            "description": "\n我将从这里说起: 在W3C标准规范中，使用CSS变量并没有任何条件。我认为这是规范文档中的一个很大的缺陷，CSS变量已经实现了很多我们之前无法实现的功能，并且我们未来可能大量使用，缺失文档描述着实让人沮丧。但是如果现在我们需要这些对CSS变量的描述怎么办？好，借助其他的CSS知识，我们可以在一些实例中略窥一二。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/from-data-to-ui-in-react.html",
            "title": "React 初学者教程9：从数据到 UI",
            "description": "\n在创建应用时，术语 props、state、组件、JSX 标记、render 方法以及其它 React 主义也许是你脑袋中最后考虑的事情。大部分时间，你是处理 JSON 对象、数组以及其它数据结构形式的数据，这些数据与 React 或者界面无关。跨越数据和最终看到的结果之间的鸿沟可能是令人沮丧的！但是不要担心。本文会通过将你将会遇到的一些常见场景都过一遍，来帮助减少这些令人沮丧的时刻。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/the-scope-in-javascript-explained.html",
            "title": "JavaScript中的作用域",
            "description": "\n很多(JavaScript)开发者都在讨论\"作用域\"，但它是什么？它们在JavaScript中的任何地方！我发现很多年轻的开发者不知道作用域是什么。他们中大多数人可以用jQuery做一些很酷的东西。但只是停留在从网上复制一些代码片段，修改一下他们懂的地方并且粘贴到一个JavaScript文件中的程度。了解什么是作用域和你能用它做什么是很重要的，我希望能帮你更好地理解它。我讲的大多数内容都来自我为一些年轻开发者们做了很多次的演讲。(JavaScript基础教程)\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/mixins-better-for-performance.html",
            "title": "为了性能，选择Mixins吧！",
            "description": "\n当我们提及预编译的时候，我经常会被问到的一个问题是Mixins 还是 @extend ? 关于这个话题我经常直言不讳，而且鉴于以下的这几条原因，我坚定的认为你应该避免使用@extend:\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/how-to-use-css-shapes-in-your-web-design.html",
            "title": "如何在Web中使用CSS Shapes",
            "description": "\n布局一般都是遵循按行和列等线性原则，Web网站的布局到今天为止很大程度上受到这些原则的影响。虽然CSS Grid的出现让布局变得更好，更灵活，但相对于印刷媒体而言，Web布局总体上还是受到很好的限制，特别是内容流上。杂志和报纸一直有很好的办法来安排内容。比如文本绕着非矩形排列。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/create-css-grid-system-with-css-variables.html",
            "title": "CSS变量创建网格系统",
            "description": "\n今天要聊的网格系统不是CSS Grid Layout，而要聊的是类似960gs。到止前为止类似于960gs的网格系统成熟的系统有很多套了。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/dealing-with-state.html",
            "title": "React 初学者教程8：处理状态",
            "description": "\n到目前为止，我们已经创建的组件都是无状态的（stateless）。它们有从它们的父组件传递进来的属性（亦称 props），但是一旦组件活跃起来，就没有什么能改变它们。一旦属性被设置了，就被当作是不可修变的（immutable）。对于很多交互场景来说，你肯定不想这样子。在一些用户交互发生，或者一些数据从服务器或者其它地方返回过来时，你想能改变组件的外观。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/so-you-want-to-be-a-functional-programmer-part-4.html",
            "title": "如何成为一位函数式编程爱好者(Part 4)",
            "description": "\n踏出理解函数式编程概念的第一步是最重要的一步，有时也是最难的一步。不过也不一定，取决于你们的思考方式。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-background-repeat-space-round.html",
            "title": "单聊background-repeat",
            "description": "\nbackground-repeat是background属性之一，对于前端而言，这是再熟悉不过的属性之一了。那么为什么今天要来聊这个background-repeat属性呢？在CSS2.1中，众所周知，background-repeat属性具有四个常见的值repeat、repeat-x、repeat-y和no-repeat。而今天要说不是这四个属性值，在CSS Backgrounds and Borders Module Level 3中，给background-repeat新增加了两个属性值round和space。在接下的中，要讨论的就是新增的这两个属性值怎么使用，他们具有什么特性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/understanding-the-css-grid-auto-placement-algorithm.html",
            "title": "CSS Grid布局：理解CSS Grid中自动排列的算法",
            "description": "\n在这个系列教程中的《列和间距》一文中了解到了在CSS Grid布局中如何实现流体网格列和列间距。也了解到了没有必要指定网格项目具体的值就可以实现网格项目的排列位置。如果显式声明网格属性，网格项目根据自动排列算法，会使网格排列变得更糟糕。在这篇文章中我们将看看这个算法是如何影响网格项目的位置排列。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-properties-in-depth.html",
            "title": "深入学习CSS自定义属性（CSS变量）",
            "description": "\n我本来觉得应该从介绍CSS中引入变量的用途开始讲起，但事实上，很多流行的CSS预处理/后处理程序已经做了很好的诠释。当然，手动地去搜索或者查找/替换依然能满足你的需求，但这就像是不在JS中使用变量一样--很痛苦。事实上，CSS变量的动态性和作用域能够为你的实践和应用提供更加强大的能力--你可以非常高效的读取、设置和更新这些变量！同时，就像Webkit的小伙伴们在审查工具中做的那样，你也可以避免在你的代码中出现重复的代码片段（冗余）。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/meet-jsx-again.html",
            "title": "React 初学者教程7：深入 JSX",
            "description": "\n你可能已经注意到，在前面的教程中我们用到很多 JSX。但是我们确实还没有认真看看 JSX 到底是什么。它实际上是如何工作的呢？为什么我们不就把它叫 HTML 呢？它到底有哪些怪癖？在本教程中，我们将回答所有这些问题。我们将做一些严肃的回溯（以及一些前溯），来深入看看为了探险，我们需要知道有关的 JSX 的什么。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/so-you-want-to-be-a-functional-programmer-part-3.html",
            "title": "如何成为一位函数式编程爱好者(Part 3)",
            "description": "\n踏出理解函数式编程概念的第一步是最重要的一步，有时也是最难的一步。不过也不一定，取决于你们的思考方式。身为程序员，我们很懒。不想在写完代码后一遍又一遍地构建，测试，发布。我们总是在寻找只写一次然后在其它地方多次复用的方法。代码复用听上去很棒但实现起来很难。代码太定制化就不能重用，太通用化的代码首先就很难用。所以我们需要的是平衡两者的方法，将小的，可重用代码块像积木一样通过组合来实现更复杂的功能。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/background-position-with-percent.html",
            "title": "你真的了解background-position",
            "description": "\nbackground属性是CSS中最常见的属性之一，它是一个简写属性，其包含background-color、background-image、background-repeat、background-attachment、background-position、background-clip、background-origin和background-size。你可能会说，这些属性再简单不过了，没有可讲的。这篇文章接下来要介绍的不是所有有关于background里面的属性，而是说说background-position属性。在详细介绍background-position之前，先要问大家，你真的了解这个属性吗？言外之意，接下来介绍是你所不了解的background-position相关细节。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/setting-up-react-environment.html",
            "title": "React初学者教程15：设置React开发环境",
            "description": "\n概述：学习如何配置 Node、Babel 和 Webpack 来高效创建 React 应用。最后要学习的是如何设置创建 React 应用的开发环境。回顾一下我们在学习创建第一个 React 应用程序的时候，讨论这种方法时说过：这种方法的负面是性能。因为浏览器除了要加载页面以外，还得把 JSX 转换为实际的 JavaScript。这个转换过程很耗时，最好是在开发期间就转换了。如果应用程序的每个用户都要为这个性能买单，这就不好了。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/will-flattening-html-css-grids.html",
            "title": "需要为CSS Grid使用扁平化HTML结构？",
            "description": "\n昨天我在An Event Apart上看了@Rachel Andrew分享的CSS Grid Layout。Grid是CSS一个强大的特性，而且离到来的一天越来越近，它将是一个强大的Web布局模式。当然，那一天还没到，到目前没有稳定的浏览器支持Grid规范。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/transferring-properties.html",
            "title": "React 初学者教程6 ：传递属性",
            "description": "\n处理属性有令人沮丧的一面，在前一个教程中我们已经看到了一点。在只处理一层组件时，将属性从一个组件传递到另一个很简单。但是如果你想将一个属性在多层组件之间传递，事情就开始变得复杂了。事情变得复杂从来不是一件好事情，所以在本教程中，我们来看看我们怎么做才能让在多层组件之间传递属性变得容易。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/things-ive-learned-css-grid-layout.html",
            "title": "【转载】原生CSS网格布局学习笔记",
            "description": "\n以下是来自Oliver Williams的帖子。 Oliver已经学习了相当长时间的原生CSS网格，可以说是在CSS网格方面有一定的发言权。在这篇文章中，他将以非同寻常的思路分析自己的CSS网格布局学习之路。我比较赞同他的想法，就是学习一门新技术的时候，把它们拆分成比较小的单元块并配上实例，一步一步的学习。这比直接学习网格布局的所有东西要好太多了。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/staggering-animations.html",
            "title": "惊艳的动画",
            "description": "\n我们采用错开动画的方式来重建这样的效果，而不是一次就控制一组动画。随着每一个项目动画延迟时间的增加，它们表现的就像是一个个独立的个体，但仍然会作为一个整体正确的移动。这样的结果感觉更加迷人且真实。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-the-mixin-directive.html",
            "title": "Sass: @mixin指令介绍",
            "description": "\n为了有效的维护和开发项目，代码的重复利用就显得尤为重要。在Sass中，除了@import和@extend可以使你的代码更加具有重复利用性，@mixin指令也同样能提高你代码的重复使用率并简化你的代码。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-grid-layout-units-of-measurement-and-basic-keywords.html",
            "title": " CSS Grid布局：列和间距",
            "description": "\n在上一节介绍了Grid的基础知识，在前一节的基础上介绍Grid的新特性，怎么样来提高间距的设置以使用fr单位和repeat()实现可伸缩性的布局。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/nth-child-sass-mixins.html",
            "title": "使用Sass混合宏来声明CSS伪类选择器",
            "description": "\nCSS3在选择器方面添加伪类选择器这方面的特性，比如:nth-child(n)、:nth-of-type(n)这样的选择器，其好处在这里就不多说了。如果你对这方面感兴趣的话，你可以阅读早前整理有关于CSS选择器方面的《CSS3 选择器:伪类选择器》一文。而今天我们要说的是在Sass中如何更灵巧的使用CSS3的一些伪类选择器。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/accessing-dom-elements.htm",
            "title": "React 初学者教程14：在React中访问DOM元素",
            "description": "\n有时我们需要直接访问 HTML 元素上的属性和方法。在 React 的缤纷世界里，JSX 代表纯粹的标记，那么为什么你会想要直接处理可怕的 HTML 呢？因为你会发现，很多时候直接通过 JavaScript DOM API 处理 HTML 元素，比用 React 的方式更简单。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/pure-svg-progress-circles.html",
            "title": " 纯SVG实现进度圈",
            "description": "\n进度圈(Progress Circles)是经典的仪表盘元素，可以将统计数据直观地展现为摘要视图。我们可以通过JavaScript和Canvas渲染，再配合CSS，图片或者利用SVG实现一个进度圈。使用SVG实现一个进度圈并没有想象中那么难，我们先从基本的开始。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/tilted-angles-in-sass.html",
            "title": "使用Sass制作倾斜角度",
            "description": "\n最近，我不得不在一个网站大量使用倾斜角度作为其设计指南的一部分。倾斜角，是指一个区域它的顶部或底部边缘不是完全水平而是倾斜的。实现这种效果有很多种方法。例如可以将base64编码的图片应用为背景，但这会使得它很难自定义（颜色，角度等）。另一种方法是倾斜或旋转绝对定位的伪元素，然而倾斜变换是我最不愿意处理的一件事。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-future.html",
            "title": "CSS新特性",
            "description": "\n前段时间有个关于CSS的话题“既然写CSS很容易，那为什么大家还是把CSS写的那么烂呢”？其实这样的话题一直都存在。不过这里我要说的不是能不能写好CSS，我想和大家一起分享几个CSS的新特性。这个也是上周在天津在线回声公司分享的一个话题。整理一下有关于PPT中的内容，希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-grid-layout-and-comics-as-explained-by-barry-the-cat.html",
            "title": "通过漫画阐述CSS网格布局",
            "description": "\nCSS网格布局非常擅长在线制作漫画，特别是你想要灵活的实现你想要的漫画风格。这篇文章中我们通过使用巴里猫（Barry the cat）来演示如何构建一个具有响应式的漫画效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/simple-todo-app-react.html",
            "title": "React 初学者教程13：用 React 创建一个简单的 Todo List 应用",
            "description": "\n概述：通过学习如何创建经典的 Todo List 应用，将所有学过的 React 技巧投入到实战中。如果说创建 “Hello, World!” 示例是庆祝你开始涉足 React，那么创建一个经典的 Todo List 应用是庆祝你接近掌握 React！在本教程中，我们要把已经学习过的很多概念和技术综合在一起，创建一个如下的应用：\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/getting-started-with-postcss-a-quick-guide-for-sass-users.html",
            "title": "PostCSS入门：Sass用户入门指南",
            "description": "\n你可能已经听说过PostCSS,它比libsass快了几乎两倍(并且比Ruby Sass快了28倍)；或者听说过它支持cssnext和CSS Modules而且可扩展功能,但你是否已经找机会尝试一下了？PostCSS最强大之处在于它是模块化并且基于插件的架构，不过这也是个缺点。如果你之前在项目中使用Sass(比如大多数的设计师和前端开发者)，你从不需要配置任何东西——Sass内置了全部实用功能，开箱即用。然而，PostCSS需要你做一些配置。你不得不从一眼看不到底的插件列表选择插件并且自己把全部插件一起配置。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/creating-complex-components.html",
            "title": "React 初学者教程5 ：创建复杂的组件",
            "description": "\n简介：通过学习如何识别和创建依赖于其它组件的组件，从而轻松创建复杂 UI。即根据组件可组合性，来创建复杂的组件。在前一教程中，我们学习了组件以及组件可以做的很棒的一些事情。我们知道组件是主要的方式，React 允许我们的界面元素像可重用的砖块一样，组件包含自己要运行所需要的所有 HTML、JavaScript 和样式。除了可重用性外，组件还带来另一个主要的优点：允许可组合性。我们可以组合组件来创建更复杂的组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/8-clever-tricks-with-css-functions.html",
            "title": "八个CSS函数的小技巧",
            "description": "\nCSS现在已经能实现比网站开发者预料到的更多的功能，并且随着时间的推移，样式表语言越来越强大，能实现许多原先需要依靠JavaScript才能实现的功能。在这篇文章中我们将会介绍CSS函数中8种有用的小技巧。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-power-of-rgba.html",
            "title": "【转载】CSS技巧-rgba函数的妙用",
            "description": "\n新出现的 CSS 颜色配置函数是一项非常有意思的功能，它给予我们在浏览器中直接操纵颜色的能力。例如，当鼠标悬停在按钮上时，可以使用color: color(black darkness(50%))改变颜色，而不需要使用 Sass 这类 CSS 预处理器。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/creating-single-page-app-react-using-react-router.html",
            "title": "React 初学者教程12：在 React 中用 React Router 创建单页应用",
            "description": "\n现在我们已经熟悉了 React 的基础知识，该提升几个档次了。下面我们要用 React 创建一个单页应用程序（即 SPA）。如同我们在 React 介绍中所言，单页应用程序与传统的多页应用程序是不同的。最大的不同之处在于在单页应用程序中导航是不会进入到一个完全新的页面。单页应用程序中的页面（通常称为视图）通常是在相同页面本身内联加载。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/css-animations-motion-curves.html",
            "title": "【转载】运动曲线提升CSS动画效果",
            "description": "\n先有UI动画，然后才会有好的UI动画。好的动画会让人惊叹“哇哦！”——因为页面看上去很流畅、很漂亮，最重要的是，自然，一点都不会让人觉得不和谐或者僵硬死板。如果你经常逛Dribbble或者 UpLabs这类网站的话，你就会明白我在说什么了。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/styling-in-react.html",
            "title": "React 初学者教程4: 在 React 中设置样式",
            "description": "\n长期以来，我们都是用 CSS 格式化 HTML 内容。用 CSS，可以很好地分离内容和表现形式。CSS 的选择器语法给我们很大的灵活性，来选择哪个要格式化，哪个会略过。你甚至找不到太多的问题来憎恨 CSS 的层叠。好了，不要告诉 React 这些。React不会积极地憎恨 CSS，但是它格式化内容时，有一个不同的视角。正如迄今为止我们所看到的，React 的核心思想之一是让应用程序的界面部分可以自包含和重用。这就是为什么组成界面的 HTML 元素和 JavaScript 装到同一个称为组件的桶中的原因。在上一个教程中我们已经品尝过组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/font-display-masses.html",
            "title": "font-display的用法",
            "description": "\n如果你已经对CSS有了一定的了解，也许你之前已经掌握了一些字体加载的方法，那么你使用过font-display吗？font-display是CSS中新添加的属性，它能实现之前类似于Font Loading API和Bram Stein's Font Face Observer这种第三方脚本实现的功能。如果这是你第一次接触这类知识，那也没有关系，我们会先简单介绍一下浏览器加载字体的默认方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-mixin-or-extend.html",
            "title": "Sass：@mixin和@extend该如何选择",
            "description": "\nMixins允许我们在项目中复用样式片段，可以传递参数这个特性使得它们非常灵活，强大。同样，我们也可以使用@extend命令让一个选择器继承其它选择器去复用样式片段。有的时候Mixin和extend好像做了同样的事情，那我们应该选择哪一个呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/transforms-on-svg-elements.html",
            "title": "SVG元素上的transform",
            "description": "\n同HTML元素一样，我们可以通过transform函数操作SVG元素。然而transform在SVG元素和HTML元素上的工作方式会有一些差别。首先，IE不支持SVG元素的CSS transform属性，但是如果只是应用一些2D变换，为了适配IE,我们可以使用SVG的transform属性。SVG的transform属性中的所有函数的参数只能是纯数字，比如说，我们不能在translate函数中使用%单位（虽说在火狐浏览器中的CSS transform属性也不能使用—此处有链接—），rotate，skew角度只能使用deg单位，我们能在CSS transform属性中可以使用的所有其它单位在这里都不能使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-layout-model.html",
            "title": "布局演变史",
            "description": "\n最近有一个关于CSS的话题“既然写CSS很容易，那为什么大家还是把CSS写的那么烂呢？”。对于这样的话题，大家或许觉得没有什么，顶多也就是各种槽点。但事实上，在天朝CSS很多时候是不被看好，相比国外的同行，很少有人在专研CSS领域。这也造成，能写好CSS的同学不多，甚至说越来越少。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/filter-primitives.html",
            "title": " HTML元素上的SVG滤镜",
            "description": "\n上周看到有一篇关于CSS滤镜效果函数的文章，其中的效果函数相对来说比较容易理解，而且上手难度低。但是，这种方式仅仅是添加CSS滤镜效果众多方式中最弱的一种。今天让我们来看一看滤镜基元，这是为图片和元素添加滤镜效果另外一种更加强大的方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/components.html",
            "title": "React 初学者教程3: React 中的组件",
            "description": "\n组件是让 React 变得美好的事情之一，它是定义人们在使用应用程序时所看到的视觉和交互的主要方式之一。在开发期间，从 React 项目的角度看，就不那么动人了。这个应用的视觉的几乎每一个部分都被封装在在一个称为组件的自包含模块内\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/oocss-vs-ooscss.html",
            "title": "OOCSS vs. OOSCSS",
            "description": "\n在这篇文章中我主要想给大家阐述在使用Sass来编写CSS和OOCSS两者之间的差异。在开始之前，我想在大家对定义语义化和演示(视觉)类名之间的差异有所了解。\n "
        },
        {
            "link": "https://www.w3cplus.com/animations/water-bubble.html",
            "title": "如何制作水球动画图？",
            "description": "\n在 echart 的 Issue 上看到有人有水球百分比可视图的需求, 并且在 pull-request 上看到有人有类似实现，但是却感觉实现的并不完美，于是想自己尝试实现。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/case-study-boosting-front-end-performance.html",
            "title": "提高前端性能的一个案例",
            "description": "\n在De Voorhoede,我们尽所能地为客户推进前端性能。虽然不是很容易就能说服客户完全按照我们的指令去做，但我们一直在尽全力和他们沟通，解释提高性能的重要性，或者将他们的性能与他们主要竞争对手进行比较。最近更新了我们的网站，除了设计上进行了大修，这也是一个将性能提高到最优的理想机会。我们的目标是有效控制，注重性能，与未来技术兼容，并将创建网站变为了一件有趣的事。以下是我们如何改进网站的具体做法。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/building-your-first-react-app.html",
            "title": "React 初学者教程2: 创建第一个 React 应用",
            "description": "\n通过前面一章的学习，我们已经了解了有关 React 的基本信息，以及它是如何帮助我们轻松创建即使是最复杂的用户界面。但是对于 React 提供的所有精彩来说，刚开始学习它可不是最简单的事情。React 的学习曲线相当陡峭，里面大大小小的障碍不少。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/why-should-you-start-learning-sass.html",
            "title": "为什么要开始学习Sass",
            "description": "\n本文不会像一些其它文章一样，教你如何开始使用Sass，我会告诉你为什么使用Sass，我到底喜欢它什么。我最初是在一个Laravel项目中，接触了Sass，Larvel是个PHP框架，内建有Elixir服务支持Sass。你可能觉得说这个玩意跟我们没啥关系，但是重点是Larvel支持Sass,使Sass非常容易上手，这就促使我去尝试使用Sass,慢慢了解到它的很多优点。之前，我总觉得，写脚本在CSS里会把本应简单的事情变复杂，然后不确定是否应该花时间去学习它。但是我慢慢发现，它的好处很多，还好当初没有放弃。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/solving-problems-with-css-grid-and-flexbox-the-card-ui.html",
            "title": "使用CSS Grid和Flexbox制作Card",
            "description": "\n“Card”这样的UI组件在现在的Web中经常可见，但我们制作这方面的UI组件方式仍然受到一定的限制。直到现在，通过CSS Grid和Flexbox的组合，可以使卡整齐对齐，响应性更好，并适应其中的内容。接下来看看我们是如何制作的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-grid-layout-quick-start-guide.html",
            "title": "CSS Grid布局：快速入门",
            "description": "\n我们将了解前沿的CSS Grid布局，从而了解CSS Grid布局是如何改变Web的布局。这篇文章是一篇快速入门的文章，将会跳过一些细节和其中的细微差别，其主要是帮助你了解前沿的CSS Grid布局。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/state-css-reflections.html",
            "title": " CSS倒影那些事儿",
            "description": "\n最近我在Codepen看到一个这样子的加载示例。使用CSS完成的具有渐变褪色倒影的、旋转的3D条形块。每一个条形块使用了一个元素，之后进行复制，这些元素形成倒影，最后添加渐变进行覆盖形成渐变褪色效果。这听起来有点像用你的左脚趾从背后抓右耳朵般不切实际。更不用说渐变覆盖方法形成褪色效果在非平面背景色不起作用了。是不是有更好的方法使用CSS可以实现这种效果呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/gpu-animation-doing-it-right.html",
            "title": "这样使用GPU动画",
            "description": "\n大多数人知道现代网络浏览器使用GPU来渲染部分网页，特别是具有动画的部分。 例如，使用transform属性的CSS动画看起来比使用left和top属性的动画更平滑。 但是如果你问，“我如何从GPU获得平滑的动画？”在大多数情况下，你会听到像“使用transform:translateZ(0）或will-change:transform这样的建议。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-es2015.html",
            "title": "如果你会了Sass，你就会了ES2015",
            "description": "\n如果你会了Sass，你就会了ES2015!...虽然不是全部，但也有很多惊人的相似之处！当学习最新的ECMAScript 规范，ES2015(以前被称为ES6)时，碰到了一些让我立刻想到Sass的特性。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/organize-your-sass-files.html",
            "title": "组织你的Sass文件",
            "description": "\n组织文件是每个项目的重要一步，特别是如果你半年重新打开这个项目的时候，你会发现，文件组织得好，对于你理解项目会有很大的帮助。如果你从未接触过Sass，你可以先阅读一下Sass指南或者点击这里阅读Sass相关的教程。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/3d-transform-and-z-index.html",
            "title": " z-index和transform",
            "description": "\nz-index和transform是CSS中的属性，但很少同学将二者联系到一起，感觉他们八杆子打不上。事实真的是这样吗？如果你也不能确认，这篇文章就值得你花点时间阅读。因为阅读完了，你会有所收获的。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/animation-performance.html",
            "title": " CSS Animation性能优化",
            "description": "\nCSS Animation是实现Web Animation方法之一，其主要通过@keyframes和animation-*或者transition来实现一些Web动效。不过今天我们聊的不是怎么制作Web动画，咱们来聊聊CSS Animation性能相关的话题。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/the-solution-to-media-queries-in-sass.html",
            "title": "解决Sass媒体查询的重复问题，优化工作流程",
            "description": "\n在Sass中有很多方法可以解决媒体查询这个问题，但是其中一些方法存在相同的问题。一开始我会还原这个问题，然后提供我的解决方案，最后列出这个方案对工作流程的好处。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/animations.html",
            "title": "Web动画",
            "description": "\n动画是使 Web 应用和网站吸引人的重要因素。 用户希望有快速响应和高度交互的用户界面。 但是，为界面设置动画未必很简单。 什么应设置动画，何时显示，以及动画应有哪种感觉？使用动画作为一种给项目增加活力的方式。动画应支持用户交互。要注意设置动画的属性；有一些属性比其他属性开销更大！那应该怎么在Web中合理的使用动画呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/who-said-javascript-easy.html",
            "title": "谁说JavaScript容易?",
            "description": "\n这里有一些JavaScript初学者应该知道的技巧和陷阱。 如果你已经是一个专家，那就随意阅读。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/so-you-want-to-be-a-functional-programmer-part-1.html",
            "title": "如何成为一位函数式编程爱好者(Part 1)",
            "description": "\n踏出理解函数式编程概念的第一步是最重要的一步，有时也是最难的一步。不过也不一定，取决于你们的思考方式。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/create-an-isometric-layout-with-3d-transforms.html",
            "title": "使用CSS 3D Transform创建Isometric布局",
            "description": "\n本教程的灵感来自于Envato的最新版本。这个页面的主页功能是展示一系列创意产品(字体、图标、图片模板等等)，而且其布局采用了一个整洁的Isometric网格布局。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/waapi-properties-intro.html",
            "title": "WAAPI属性",
            "description": "\n从上一篇文章中我们快速的了解了Web Animation API能做什么，也能使用Web Animation API制作类似CSS3 Animation实现的动效。但到目前为止，也仅仅就如此，并没有看到Web Animation API比CSS Animation有任何优势之处。那在这篇文章中，咱们来看看Web Animation API和CSS Animation明显性的区别。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/custom-sass-functions.html",
            "title": "如何编写自定义Sass 函数",
            "description": "\n如果您构建过不少网站，可能已注意到可以在一个项目中轻易的复制代码然后跨项目应用。反复复制相同的代码会浪费时间和增加错误出现的可能性。在Sass之前的系列中，我曾说mixins是样式重用和编写 DRYer代码的一个选择。Functions是实现相同功能的另一个方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/going-all-in-on-flexbox.html",
            "title": " Flexbox布局实战",
            "description": "\n在最近的一个项目中，我们终于将Flexbox广泛用于页面布局当中。通过这次实战，让我对Flexbox相关知识有了更进一步的了解，也在这方面增涨了不少的知识。接下来，我将分三个部分来解释Flexbox在Web布局中的实战。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/precise-control-responsive-typography.html",
            "title": "如何精确控制响应式排版",
            "description": "\n2014年@Jason Pamental写了一篇博客详细介绍了Web排版的缩放。@Richard Rutter在另一篇文章中介绍如何更好的表达你的排版。比如在一个Banner区，如何让文本显示的各为大气，又适合你的Web排版。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/supports-will-change-your-life.html",
            "title": "说说CSS中的@supports",
            "description": "\nCSS中的@supports属性已经不是新东西了，只不过一直以来，大家碍于浏览器对其支持度不强，而无人问冿。这两天看到两篇新文单都是介绍@supports。其中一篇是介绍怎么使用@supports来查询CSS的新特性，另外一篇是如何使用@supports来改变你的生活。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/hidden-dom-element.html",
            "title": "如何隐藏DOM元素",
            "description": "\n早在2011年整理了一篇有关于图片替换文本的方法，而前几天看到一篇有关于隐藏DOM元素的几种方法。今天这里也将继续说说如何隐藏DOM元素？\n "
        },
        {
            "link": "https://www.w3cplus.com/css/full-width-containers-limited-width-parents.html",
            "title": "如何在限宽的容器中实现全屏效果",
            "description": "\n在Web布局中，特别是在PC端中，常常可以看到这样的设计风格：内容居中，然后Banner区全屏。这也就是标题所说的效果，限宽的容器中实现全屏效果。那么问题来了，在实际中如何实现在限宽的容器中实现全屏效果。那么实际开发中以什么方式来做更为方便灵活呢？这就是这篇文章需要介绍的内容。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/html5-device-orientation.html",
            "title": "【转载】HTML5 控制装置陀螺仪 ( 三轴 )",
            "description": "\n自从几年前入手智能型手机之后，对于行动装置上特有的陀螺仪 ( 三轴 ) 侦测与感应器就蛮感兴趣的，而相关的应用除了在一些典型的 APP 里头很常见之外 ( 指南针、水平仪、星空定位...等 )，在游戏里头更是屡见不鲜 ( 赛车、跑酷、飞行、滚球...等 )，但撇除 APP 不谈，过去在网页里头要使用陀螺仪的三轴感测，几乎是不可能，应该是说沒这个必要，因为在智能行动装置尚未普及的年代，谁会搬台电脑转来转去呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/multi-line-padded-text-css-box-decoration-break.html",
            "title": "初探box-decoration-break",
            "description": "\nbox-decoration-break属性是CSS片段模块（CSS Fragmentation Module Level 3）中的一个属性。主要用来指定background、padding、border、border-image、box-shadow和clip在行内元素中如何使用。行内元素的盒模型是打断的，也就是内联盒子是多行的情况之下。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/high-performance-animation.html",
            "title": "【转载】高性能的动画",
            "description": "\n让我们直接进入主题。现代浏览器在完成以下四种属性的动画时，消耗成本较低： position（位置）， scale（比例缩放）, rotation（旋转） 和 opacity（透明度）。如果你对其他的属性设置动画，你就需要对你的冒险负责。而且你的动画将可能达不到流畅的60fps。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/sandal-parts-2.html",
            "title": "移动端重构实战系列2——line list",
            "description": "\n这个line list的名字是我自己起的（大概的意思是单行列表），要实现的东西为sheral的line list，对应的scss组件为_line-list.scss，下图为line-list的一个缩影。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/basic-knowledge-of-mobile.html",
            "title": "移动端重构实战系列1——基础知识",
            "description": "\n距离上个移动端重构系列已是两年了（不得不感叹时间是把杀猪刀）。这次将会带来实战系列，将欠下两年的债现在还上，给七年的重构赋予一次新生。既然是新的开始，先简单说下这个系列要用到的一些技术吧。同时也是对移动端重构一些技术的一个简单回顾。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/sandal-parts-1.html",
            "title": "移动端重构实战系列0——sandal 和 sheral",
            "description": "\n简单来说，sandal是基于Sass的一个移动端css的基础库，提供了一些基础的重置，常用的mixin，如flex布局，等分，水平垂直居中，常用图标等，基于它你可以非常方便快速地扩展出你需要的UI组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/gentle-explanation-of-this-in-javascript.html",
            "title": "【转载】JavaScript中‘this’关键词的优雅解释",
            "description": "\n许多时候，this关键词对我以及许多刚起步的JavaScript程序员来说，都是一个谜。它是一种很强大的特性，但是理解它需要花不少功夫。对有Java, PHP或者其他常见的编程语言背景的人来说，this仅仅被看成是类方法中当前对象的一个实例：不会多也不会少。多数时候，它不能在方法外被使用。正是这样一种简单的使用方法，避免了混淆。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/more-readable-js-without-vars.html",
            "title": "【转载】抛弃变量，编写更加可读的JavaScript代码",
            "description": "\n理解一段代码最大的阻碍是大量的变量。而变量可以引入状态，这又将成倍的增加复杂性。每一个变量都使得理解代码更加困难。一个布尔值可以有两个状态，两个布尔值有四个。如果你的方法里有十个布尔值的话，它们可以产生1024种不同的状态。这远远超出人们的理解范畴。正确划分代码的作用域以及利用常量取代变量可以大大增加代码的可读性。从长远来看，几乎在所有情况下这都是最重要的。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/6-ways-to-declare-javascript-functions.html",
            "title": "声明JavaScript函数的六种方法",
            "description": "\n一个函数一次性定义的代码块可以多次调用。在JavaScript中，一个函数有很多元素组成，同时也受很多元素影响：函数体的代码、函数的参数列表、 接受外部变量域的变量、返回值、当函数被调用时，this指上下文、 命名和匿名函数、 函数对象作为变量声明和 arguments对象(在ES6中的箭头函数中将丢弃这个)等。这些元素都会影响到函数，但具体影响函数的行为还是取决于函数的声明类型。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascript-increment-and-decrement-operatorssass.html",
            "title": "JavaScript运算符：递增和递减",
            "description": "\nJavaScript中的递增和递减运算符都是一元操作符，言外之意就是只能操作一个值的操作符。递增和递减操作符直接借鉴自C语言，各有两种版本：前置型(递增++i，递减--i)和后置型(递增i++，递减i--)。在JavaScript中，递增（递减）的前置和后置运算符对于初学者都非常容易混淆。我就属于这一类型，这次下定决心把这两者的使用和不同之处了解清楚。如果你和我一样，不仿一起来了解一二。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/chunky-monkey-javascript.html",
            "title": "JavaScript算法练习：Chunky Monkey",
            "description": "\nChunky Monkey指的就是把一个数组arr按指定的长度size分割，并且将分割的数组push到一个新数组newArr中，组成一个多维二组。今天这篇文章整理了有关于实现这种效果的方法。创建一个chunk()函数，函数中传入两个参数arr和size，其中arr是要被分割的函数，而size是指分割的长度。然后将分割出来的数组tempArr推入到一个新的数组中newArr。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/introducing-css-clip-path-property.html",
            "title": "CSS的clip-path",
            "description": "\n在Web网页中主要是以矩形分布的。而平面媒体则倾向于更多不同的形状。造成这种差异的原因是因为缺少合适的工具去实现我们平面媒体中的内容。这也就造成了很多设计师的创意发挥，就算是有创意，前端实现也将付出巨大的开发成本。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-animation-keyframes.html",
            "title": "使用Sass来定义Keyframes",
            "description": "\nCSS的Animation成为Web Animation中主要实现方式之一。使用CSS 的animation可以在Web中实现一些动画效果。而其中最为关键的还是依赖于@keyframes，让动画可以根据帧定制不同的动画效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/spring-animation-in-css.html",
            "title": " CSS如何实现弹簧动画效果",
            "description": "\nCSS Animation在Web Animation中已不是新技术，不过在制作动画的时候，或许常常纠结timing-function如何使用。一般情况之下，都会使用animation-timing-function/transition-timing-function自带的几个关键词动画函数。稍为熟悉Web Animation的同学可能会使用cubic-bezier.com帮助自己创建一些timing-function。往往这一切都只是局限于使用，而不知道其原理究竟是什么。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/recreating-the-twitter-heart-animation.html",
            "title": "重新创建Twitter点赞动效",
            "description": "\n最近，我在CodePen上看到了一个Twitter心形点赞动画。一般，如果我有时间就会研究案例代码，看是否可以进行利用或更改。在这个案例中，我很惊讶的看到演示使用的是Sprites图片。后来我学习了Twitter对其实现的原理。当然，这可以不使用图片就可以实现，不是吗？\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/seek-and-destroy-in-javascript.html",
            "title": "JavaScript算法练习：从数组中寻找元素并删除元素",
            "description": "\n今天的任务中创建一个destroyer()函数，其功能是对所给的数组根据参数删除这些元素。也就是说给destroyer()传入一个参数arr，而且这个参数是类似这样的[1,2,3,4,5,2,3,1,3],1,3，要做的事情就是从数组[1,2,3,4,5,2,3,1,3]删除所有的1和3元素。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/comprehensive-webfonts.html",
            "title": "字体加载策略大全",
            "description": "\n本指南不针对于具有优先级加载以及用例示范的font icons，或许，SVG会是一个更好地长期选择。如果你正在寻找具体的方法，这里的一些相关链接可能对你的帮助会更加直接。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/palindrome-check-in-javascript.html",
            "title": " JavaScript算法练习： JavaScript中回文(Palindromes)处理",
            "description": "\nPalindromes称之为回文。在中文文当中是指倒着念和顺着念都是相同的，前后对称，例如“上海自来水来自海上”。在英文文当中是指正着看和反着看都相同的单词，例如“madam”。而对于数字，又称之为回文数，是指一个像“16461”这样的对称的数，即这个数的数字按相反的顺序重新排列后得到的数和原来的数一样。在JavaScript中Palindromes也常出现在一些算法题中，这篇文章主要介绍如何使用JavaScript判断一个字符是不是Palindromes。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/waapi-basic-intro.html",
            "title": " WAAPI入门",
            "description": "\n动画在Web应用中不是必须的，但是使用得好能起到锦上添花的作用。早期在Web中看到的动画主要有Flash、Gif图片动画、JavaScript动画、SVG动画、APNG动画和CSS3动画等。特别是随着浏览器对CSS3属性支持力度的提高，使用CSS3制作动画的情景在Web应用中越来越频繁。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/text-align-last.html",
            "title": "CSS Text3: text-align-last",
            "description": "\n在CSS中对于text-align而言，大家并不会感到陌生，但对于text-align-last来说，知道的人我想并不会太多。那么今天我们来说一说这个属性。这篇文章详细介绍了文本对齐方式的另一个属性text-align-last。其主要作用就是用来设置块元素最后一行文本的对齐方式。其主要的值有auto、start、end、left、center、right、justify和inherit。其实很多表现行为和text-align的取值非常的类似，其不同的是控制块元素最后一行文本对齐方式。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascript-hoisting-in-details.html",
            "title": "JavaScript的变量：变量提升",
            "description": "\n在《JavaScript变量：变量声明》一文中了解了，在JavaScript中可以通过关键词var、let和const来声明一个变量。并且提到过，使用let和const声明的变量不存在变量提升；而使用var声明的变量存在变量提升。那么什么是变量提升，这篇文章主要来介绍的就是这方面的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/an-svg-animation-case-study.html",
            "title": " SVG动画案例的学习",
            "description": "\n平面设计已成为2016年可见的趋势，显然，这就是SVG用法又重新走入人们的视野的原因。好处有很多: 独立的分辨率、跨浏览器兼容性以及DOM节点的可访问性。本文中，我们将看看如何使用SVG从简单的插图创建看似复杂的动画。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/function-expressions-vs-declarations.html",
            "title": "函数表达式和函数声明",
            "description": "\nJavaScript中创建函数有两种不同的方式。函数声明这种方式已经使用很久了，但慢慢的被函数表达式这种方式在替代。在代码中更多的使用函数表达式来实现函数声明式功能，这样使用你的代码更简洁，更易维护。函数表达多被广大的开发人员使用，也是开发中的一个重要组成部分。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/which-equals-operator-vs-should-be-used-in-javascript-comparisons.html",
            "title": "JavaScript运算符：== VS. ===",
            "description": "\n@manxisuo的《通过一张简单的图，让你彻底地、永久地搞懂JS的==运算》一文中详细的阐述了JavaScript中的==运算符。其实在JavaScript中还有一个另外一个运算符===。那么这两者有何不一样呢？这篇文章就一起来看看JavaScript中==和===有何不同。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/falsy-bouncer-in-javascript.html",
            "title": "JavaScript算法练习：Falsey Bouncer",
            "description": "\n这篇文章我们主要介绍如何通过JavaScript处理falsy值。将要完成的任务是创建一个函数bouncer()，它接受一个数组arr做为参数，并且删除所有falsy值。在大数多编程语言中都知道布尔数据类型，它可以设置为true或false。而在JavaScript中，每个值都有一个固定的布尔值，称之为truthy或falsy。在JavaScript中，我们可以通过逻辑来处理，达到我们预期想要的效果，但如果使用不小心或没有理解清楚，它可能会导致一些问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/generic-css-data-types.html",
            "title": "CSS中的数据类型",
            "description": "\n在CSS中的属性值有些是使用数字的。为了让用户客户端能够确定这个值有效，就需要确保它的值是符合规范类型中的一个。这些就被称为数据类型，规范中通常写成这样<this>。有两种数据类型：特定的和通用的。特定数据类型是一个属性或者一组属性。例如<transform-function>数据类型被用在transform属性的值上。另一方面，通用数据类型是可以用在任何特定的属性上。比如<length>数据类型，可以设置一个10px的值，它可以用在margin、font-fize或者其它可以用数字值的属性。在这篇文章中，将会把所有的通用数据类型给大家介绍一下。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/truncate-a-string-with-javascript.html",
            "title": "JavaScript算法练习：使用JavaScript截断字符串",
            "description": "\n在Web中截断字符串的场景随处可见，CSS3未出现之前，截断字符串都是通过后端程序或者说JavaScript来处理。就现在的技术而言，使用CSS3的相关技术就可以实现截断字符串的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/how-well-do-you-know-display.html",
            "title": "如何理解CSS的display属性",
            "description": "\n在布局中，display属性是最重要的CSS属性之一。其最常见的属性值有block,inline,none,table以及inline-block。最近的新宠为flex,因为它是专门为布局创建的display属性。新出现的grid(最近仍比较活跃)是另外一个指定的布局属性，其很快就会广泛被使用。这篇文章比我预期的要长很多，你可以选择性进行阅读，但是我更希望你可以静下心来阅读整篇文章。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/structuring-css-in-large-projects.html",
            "title": "【转载】大型项目中的结构化CSS",
            "description": "\n写CSS很容易。写持续可维护的CSS则很难。你也许听说过不下100 次了。因为在CSS中默认都是全局的申明。如果你是个写C的程序员你知道全局变量是糟糕的。如果你是程序员你会知道，独立及可组合的模块是一个可维护系统的关键所在。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/quicksort-in-javascript.html",
            "title": "JavaScript实现快速排序",
            "description": "\n目前最常见的排序算法大概有七八种，理解和掌握各种排序算法似乎是一个合格的程序员所必须要掌握的。今天想要和大家分享快速排序算法的Javascript的实现。快速排序(Quicksort),又称为 划分交换排序(partition-exchange sort)，最早是由东尼·霍尔提出的。\n "
        },
        {
            "link": "https://www.w3cplus.com/html/a-collection-of-html-head-elements.html",
            "title": "HTML head里的元素",
            "description": "\n或许有很多标签(<link>、meta)的类型你从未见，甚至都不知道这些标签的意义何在，更何况是如何使用了。其实这些并不复杂，也没有太多的技术含量在里面，而且这些标签具体的意思是什么很容易的找到。 这篇文章是一篇基础性的文章，昨天在Github上看到@Josh Buchea整理了一份有关于HTML中<head>里的标签元素，觉得还是蛮有意义的，今天将其复制到这里。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/chrome-timeline.html",
            "title": "【转载】使用 Chrome Timeline 来优化页面性能",
            "description": "\n有时候，我们就是会不由自主地写出一些低效的代码，严重影响页面运行的效率。或者我们接手的项目中，前人写出来的代码千奇百怪，比如为了一个 Canvas 特效需要同时绘制 600 个三角形，又比如 Coding.net 的任务中心需要同时 watch 上万个变量的变化等等。那么，如果我们遇到了一个比较低效的页面，应该如何去优化它呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/curved-path-animations-in-css.html",
            "title": "【转载】CSS分层动画可以让元素沿弧形路径运动",
            "description": "\nCSS 的 animations （动画） 和 transitions（变换）擅于实现从点 A 到点 B 的直线运动，运动轨迹是直线路径。给一个元素添加了 animation 或者 transition 以后，无论你如何调整贝塞尔曲线，都无法让它沿着弧形路径运动。你可以通过自定义 timing function 属性，做出弹动的效果，但是它沿着 X 和 Y 轴相对移动的值永远是相同的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/understanding-critical-css.html",
            "title": "理解Critical CSS",
            "description": "\nCSS 资源的加载情况对浏览器渲染页面的影响很大，这是因为默认情况下浏览器只有在完成 <head> 部分 CSS 样式的加载、解析之后才会渲染页面。这种渲染方式意味着，如果 CSS 文件很大，那么用户就必须等待很长的时间才能看到渲染结果。针对这一问题，我们将在接下来的内容中讨论一种非常规的解决方案，提高页面的渲染速度，这一方案常被称为 critical rendering path。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/mutations-in-javascript.html",
            "title": "JavaScript算法练习：Mutations",
            "description": "\nMutations 对一个包含两个元素的数组，检测数组中的第二个元素的所有字母是否都在第一个元素中出现过，如果出现过，返回的是true，否则返回的是false。(其中忽略大小写)\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript.html",
            "title": "JavaScript处理数字分位符号",
            "description": "\n昨天做一个页面有一个需求，需要把服务器取过来的数字(也有可能是数字字符串)，将小数点前的数字每隔三位添加一个逗号（前面数是一个四位数的值）。比如取到的值是123456，要将其转换成123,456。搜索了一下，这叫数字分位符号。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/how-to-achieve-60-fps-animations-with-css3.html",
            "title": "使用CSS3实现60FPS动画",
            "description": "\n使用动画在移动应用程序中很容易的。如果您遵循我们的建议，移动应用程序中使用动画变得很简单。虽然现在很多人在移动应用程序中使用CSS3 Animation来制作动画，当然很多人也不这么做。很多最佳实践，还是不断的被忽视。出现这种情况主要是因为仍有许多人并不真正了解这些最佳实践存在的真正原因，因此没有大力的支持。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/motion-path.html",
            "title": "CSS的motion-path属性",
            "description": "\n在CSS中要实现一个动画按一个指定的路径运动，相对而言是较为困难的。虽然通过transform能模拟出来一定的效果，但要达到很完美的效果是非常的痛苦的，也较为困难的。那么今天给大家介绍的motion-path属性虽然 还未成为W3C中的正式规范，但这个属性能帮助大家轻易实现一个动画按指定路径运动。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/getting-started-react-jsx.html",
            "title": "开始使用React和JSX",
            "description": "\nReact是一个用来创建用户界面的一个开源库。它可以让你轻松的创建与底层数据模块保持一致的UI。这篇文章主要针对初学者，包括了React的基本知识和JSX语法。或许，开始使用React最简单的方法就是从CDN中引入一个库(文中的例子是这样做的)。或者你可以使用npm来安装或者从官方网站下载React运行所需要的文件。\n "
        },
        {
            "link": "https://www.w3cplus.com/animaton/animations-you-should-know.html",
            "title": "【转载】关于动画，你需要知道的",
            "description": "\n在浏览器里，动画实现的基本原理非常简单明了，其实就是采用定时器改变显示元素的一些属性的过程。不管是 JavaScript 操作 DOM 的动画，还是 CSS3 动画，还是 Canvas 动画，或者 SVG 动画，区别只是使用的 API、何种定时器，影响什么环境（DOM/Canvas/SVG/WebGL）。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/mathematical-intuition-behind-bezier-curves.html",
            "title": "贝塞尔曲线的一些事情",
            "description": "\n贝塞尔曲线(Bezier curves)是曲率的一种典型代表，而且在很多应用中都会运用到，比如计算机的图形学中、字体和动画。如果你以前玩过CSS，那么你可能就运到过贝塞尔曲线。例如，在CSS的时间函数(timing function)中就有一个贝塞尔曲线——x轴和y轴的距离用来确定时间。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/TypeScript-intro.html",
            "title": "TypeScript初识",
            "description": "\nTypeScript 是 JavaScript 的超集，为 JavaScript 的生态增加了类型机制，并最终将代码编译为纯粹的 JavaScript 代码。类型机制很重要吗？最近的一些项目经历让我觉得这真的很重要。当你陷在一个中大型项目中时（Web 应用日趋成为常态），没有类型约束、类型推断，总有种牵一发而动全身的危机和束缚。Immutable.js 和 Angular 2 都在使用 TypeScript 做开发，它们都是体量颇大的项目，所以我决定尝试一下 Typescript。此外我们还可以尝试 Facebook 的 Flow，比较一下两者的优劣。Typescript 对 ES6 也有良好的支持，目前组内项目使用 Babel 编译 ES6，这也就自然而然的把 TypeScirpt 和 Flow / babel-plugin-tcomb 放在了对立面，也许下一篇文章就是介绍 Flow 和 babel-plugin-tcomb。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/variable-value-data-types.html",
            "title": "JavaScript的变量：变量值的数据类型",
            "description": "\nJavaScript的每个变量都会有有一个变量值，变量值都有对应的数据类型。在JavaScript中变量有两种不同的数据类型：基本类型和引用类型。在不同的地方对这两种数据类型的称呼也略有不同。比如，基本类型又称之为原始类型（拥有方法的类型或者可变类型），引用类型又称之为对象类型（不能拥有方法的类型或者不可变类型）。不管怎么称呼，都是依据数据类型的特点来命名的。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/react-es5-createclass-vs-es6-classes.html",
            "title": "React 组件构造方法: ES5 (createClass) 还是 ES6 (class)？",
            "description": "\n写 React 组件的时候，应该使用 React.createClass 语法还是 ES6 的 class 语法？或两者都不？这篇文章解释了两者之间的一些差异，希望能帮你做决定。用 ES5 或 ES6 都可以完美地写 React 组件。使用 JSX 意味着你已经需要一个「构建」步骤，也就是 Babel 将 JSX 转译(transpile)为 React.createElement 调用。很多人充分利用这点， 仅仅向 Babel 的转译列表中添加一项 es2015，就可以自由使用 ES6 的全部特性。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/high-performance-animations.html",
            "title": "【转载】使用 FLIP 来提高 Web 动画的性能",
            "description": "\nCSS 动画已经存在很多年了，使用恰当可以很好地提高网站的用户体验，也正是由于其容易使用，就很可能出现性能低下的动画，从而降低了整个页面的运行效率。回想一下：你曾经是否使用过 CSS 来改变元素的宽度、高度或绝对位置？如果回答是肯定的，就意味着你触发了性能低下的重排或重绘计算，在某些情况下甚至可能导致页面闪烁。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-scroll-snap-points.html",
            "title": "提前思考CSS Scroll Snap Points",
            "description": "\nCSS最近介绍了一个关于scroll snap points的新功能，为触控以及输入设备的用户提供一个流式、精确的滚动体验。关于创建scroll snap效果，有许多jquery插件可供你选择，但是我们今天所讲述的不是通过安装一个插件来控制滚动的行为，而是使用原生的CSS scroll snap points来实现。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/dirty-tricks-dark-corners-front-end-pt2.html",
            "title": "前端开发中的一些黑魔法Pt2",
            "description": "\n上一篇介绍了前端开发中的九个黑魔法,比如链接的嵌套、破裂图片美化、表格列高亮显示、内联文本背景颜色设置、响应式EDM等，那么这篇文章继续根据@Vitaly Friedman在今年3月份分享了一个主题《Dirty Tricks From The Dark Corners Of Front-End》往下梳理，希望对您平时开发有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/lodash-intro.html",
            "title": "Lodash入门介绍",
            "description": "\n有多年开发经验的工程师，往往都会有自己的一套工具库，称为 utils、helpers 等等，这套库一方面是自己的技术积累，另一方面也是对某项技术的扩展，领先于技术规范的制定和实现。Lodash 就是这样的一套工具库，它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数，其中部分是目前 ECMAScript 尚未制定的规范，但同时被业界所认可的辅助函数。目前每天使用 npm 安装 Lodash 的数量在百万级以上，这在一定程度上证明了其代码的健壮性，值得我们在项目中一试。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/title-case-a-sentence-in-javascript.html",
            "title": "JavaScript算法练习:关于字符串中每个单词的首字母大写化问题",
            "description": "\n是不是有时候会出现将一个字符串中的每个单词的首字母大写化，其余字符均为小写的情况，如\"hello world\"转化为\"Hello World\"。好了接下来大家可以试验一下是否可以解决这个问题，在这里我要和大家分享几种比较容易理解的解决方案。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/finally-css-javascript-meet-cssx.html",
            "title": "JavaScript中的CSS: CSSX",
            "description": "\n想像一下，一个Web组件都在一个.js文件中，这个文件包含了一切：HTML结构、CSS样式和一些逻辑。仍然会有基本的样式表，但动态的CSS将使用JavaScript来处理。现在这样做是能做的，并实现它的一个方法称为CSSX。CSSX是我用了近一个月的业余时间写的一个项目，它是具有挑战性的、有趣的，而且在这个项目中我学到很多新东西。它的最终结果就是变成一个工具，允许你在JavaScript中写CSS。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/creat-css-polygon-wiht-border-and-clip-path-property.html",
            "title": "Sass绘制多边形",
            "description": "\nCSS画图形在Web运用中时常看到，比如三角形、五角星，心形，Ribbon等。不过以前使用CSS绘制图形一般都是借助于border来绘制，但这样的方式受到一定的限制，而且实用价值也有所限制。这篇文章将介绍使用CSS的clip-path来完成正多边形的绘制，并且借助CSS预处理器Sass给这两种方法定义对应的混合宏和函数，实现正多边形的开发。\n "
        },
        {
            "link": "https://www.w3cplus.com/html/form-validation-ux-html-css.html",
            "title": "使用HTML和CSS提高表单验证用户体验",
            "description": "\n你可以只使用HTML属性实现表单验证的效果，可以使用CSS选择器带来简洁的用户体验。但是，你需要使用一些CSS技巧让效果更好。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/merge-flatten-an-array-of-arrays-in-javascript.html",
            "title": "JavaScript学习笔记：数组合并",
            "description": "\n这篇文章主要介绍了在JavaScript中通过push()、concat()和reduce()等方法的组合，实现数组合并的功能。并且在此基础上结合《JavaScript学习笔记：数组去重》一文介绍的方法，还可以轻松的实现合并后的数组，把重复的数组项删除。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/react-beginner-intro.html",
            "title": "React的一些概念",
            "description": "\n对于初学React的同学而言，这并不是一件易事。就拿我自己来说，都不知道从何下手，应该如何去学习才能开始使用React。就算你对React不陌生，学习React也常会碰到一些瓶颈。比如说新颖的概念、开发工具的使用、抽象的名词、快速变化的生态环境等等。也就是说，一旦开始学习React，你会发觉要学的东西越来越多，甚至可能还没开始碰到React就被这些东西给吓跑了(特别是对于初学者，听到这些东东就傻眼了)。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/data-types-in-sass.html",
            "title": "Sass中的数据类型",
            "description": "\n数据类型几乎在所有编程语言当中都有，在Sass中也不例外。数据类型是根据不同的用途分的类。例如2是一个数值(number)，而SitePoint是一个字符串(string)。在这篇文章中，将涵盖Sass中所有的数据类型（共有七种数据类型），并且通过一些简单的例子来阐述这些数据类型在Sass中如何使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/functional-programming-jargon.html",
            "title": "函数式编程术语解析",
            "description": "\n函数式编程蔚然成风，越来越多的开源项目、技术交流在使用函数式编程的术语降低开发或沟通成本，这无形中对不了解函数式编程的开发者造成了一定的学习门槛，翻译本文的初衷就是要普及函数式编程的基本知识，从新的角度扩展编程思维。至于为什么要使用 JavaScript 演示函数式编程，一方面是因为 JavaScript 的特性在很多方面与函数式编程浑然天成，另一方面是因为 JavaScript 是世界上最 XX 的语言……\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/12-extremely-useful-hacks-for-javascript.html",
            "title": "12个JavaScript技巧",
            "description": "\n在这篇文章中将给大家分享12个有关于JavaScript的小技巧。希望这些小技巧能在工作中帮助你解决一些麻烦，或者说这篇文章对你有所帮助。如果你有一些优秀的JavaScript小技巧，欢迎在评论中与我们一起分享。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/use-cases-for-es6-proxies.html",
            "title": "实例解析ES6 Proxy使用场景",
            "description": "\nES6 中的箭头函数、数组解构、rest 参数等特性一经实现就广为流传，但类似 Proxy 这样的特性却很少见到有开发者在使用，一方面在于浏览器的兼容性，另一方面也在于要想发挥这些特性的优势需要开发者深入地理解其使用场景。就我个人而言是非常喜欢 ES6 的 Proxy，因为它让我们以简洁易懂的方式控制了外部对对象的访问。在下文中，首先我会介绍 Proxy 的使用方式，然后列举具体实例解释 Proxy 的使用场景。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/variables-and-scoping-in-es6.html",
            "title": "ES6中的变量和作用域",
            "description": "\n这篇文章主要是探讨如何处理ES6中的变量和作用域。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/pure-css-create-scroll-indicator.html",
            "title": "纯CSS实现Scroll Indicator(滚动指示器)",
            "description": "\nScroll Indicator称之为滚动指示器，是Web中常见的一种效果。用户滚动垂直滚动内容时，页面顶部有一个类似进度条的效果，当内容滚动到页面最低端，进度条效果填满整个进度条。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/slasher-flick-in-javascript.html",
            "title": "JavaScript算法练习：Slasher Flick",
            "description": "\n简单点说就是对所给的数组做截取操作。看上去就是对数组做数组元素的删除，可能你会想到数组中的shift()方法，可是这个方法只能删除数组的第一个元素。而我们要实现的功能是：对所给数组，根据第二个参数进行截取操作，如果第二个参数大于数组的长度，则返回一个空数组，否则将返回第二个参数作为索引值之后的所有元素组成的数组。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/es6-in-depth-arrow-functions.html",
            "title": "【转载】深入解析 ES6：箭头函数",
            "description": "\n从一开始箭头就是 JavaScript 的一部分，在第一个 JavaScript 中就建议将内联的脚本代码包裹在 HTML 的注释中，这可以防止那些不支持 JavaScript 的浏览器错误滴将你的代码显示为明文。古老的浏览器将看到两个不被支持的标签和一段注释，只有支持 JavaScript 的新浏览器才会将其解析为 JavaScript 代码。凑巧的是，这种风格的注释在 ES6 中首次被标准化。但这并不是我们将谈论的箭头。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/variable-naming-principles.html",
            "title": "JavaScript变量： 变量命名原则",
            "description": "\n变量的命名相对而言没有太多的技术含量，今天整理有关于变量命名相关的原则，主要是想告诉大家，虽然命名没有技术含量，但对于个人编码，或者说一个团队的再次开发及阅读是相当有用的。良好的书写规范可以让你的JavaScript代码更上一个台阶，也更有利于团队的再次开发和阅读代码。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/twitter-s-heart-animation-in-full-css.html",
            "title": "使用CSS制作Heart动画",
            "description": "\n几个星期前，我发现Twitter上几乎每个人的star都转向了一颗心。无疑这是一个很大的讨论的话题之一···但是我所在意的是··这个动画的实现是否只用CSS就可以实现呢(不是单一的图片或者SVG)？我知道这并不很重要，但是当这个想法出现的时候，我简直不能入睡直到可以想出一个可行的方案。经过一些实验后，我终于有了我的答案。结果并不完美(大量的SCSS / CSS -大约400行)，但是也是令人满意的(至少基于我的期望)。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/taming-react-setup.html",
            "title": "React几种基本配置方案",
            "description": "\n对于没有使用过React的同学总觉得它复杂，但在现实中，使用React并不困难。就我个人而言，学习React应该基于创建项目特定类型的设置细节之上(比如Webpack、Redux、ES6、JSX、Babel等)，而不是一下子就去忙于理解所有的设置项。在这篇文章中列出了有关于React方面的七种设置。大部分的设置我都将会向大家展示，但总的来说，这并不困难。接下来的内容从简单到复杂，介绍React的设置。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/how-three-dots-changed-javascript.html",
            "title": "【转载】改变JavaScript的三个点: spread运算符与rest参数",
            "description": "\n当在函数调用中通过arguments对象访问参数时，我总是感觉很不爽。它那硬编码的名字使得要想在内层函数(它拥有自己的arguments)中访问外层函数的arguments变得很困难。更糟糕的是它是一个类数组对象。这意味着你不能直接在它身上调用类似.map()或是.forEach()这样的方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/es6-in-depth-symbols.html",
            "title": "【转载】深入解析ES6: Symbol",
            "description": "\nES6 中的 Symbol 也是一种数据类型，但是不是字符串，也不是对象，而是一种新的数据类型：第七种数据类型。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/semantics-tags.html",
            "title": "HTML5语义化",
            "description": "\nHTML没有给我们提供大量的标签去使用。其可选择的数量就像是街边的小商店而不是沃尔玛。我们有段落，列表和标题，但是我们不具有事件，新闻故事，或者说是配方。HTML提供给我们一个元素用于字符串的缩写标记，但是没有提供我们一个元素用于数字的价格标记。显然，从各种各样惊人的网站就可以看出，这一限制并没有得到很好的解决。虽然HTML并没有提供我们一个明确的元素用于内容价格的标记，但是他现在也已经变得十分灵活以至于“足够好”。这里套用Winston Churchill经常说的一句话，HTML是尝试过的标记形式中最糟糕的一种。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/factorial-function-in-javascript.html",
            "title": "JavaScript算法练习：阶乘(Factorial)函数",
            "description": "\nFactorial称之为阶乘，维基百科是这样描述的“一个正整数的阶乘是所有小于及等于该数的正整数的积，并且有0的阶乘为1。自然数n的阶乘写作n!。”而阶乘函数是递归(Haskell)函数典型示例。在JavaScript中可能运用到递归函数。但在实际使用中，你可能没有考虑何时何地递归是有用的，或者使用不好会带来很多问题。在这篇文章中我们来看看JavaScript如何实现阶乘的功能。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/wrapping-animated-3D-marquee-text-with-pure-CSS.html",
            "title": "纯CSS实现滚动3D字幕",
            "description": "\n一直以来我都想做一个滚动文本的效果，虽然有几种方法实现，其中还有使用WebGL的方法。但我还是想使用HTML和CSS来实现这样的效果。很多年以前，在Web上实现滚动文本的动画效果一般是采用marquee标签来实现，当然也有很多同学采用JavaScript来实现类似的效果。前几天在CodePen看到有位大神使用纯CSS制作了一个3D的滚动文本效果，仔细看了一会，没想到thenewcode.com/就有介绍这个案例的文章，今天将篇文章翻译出来和大家一起分享。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/rounding-recipes.html",
            "title": "JavaScript中的随机数",
            "description": "\n在JavaScript中随机性经常都会使用到，但随机性也有许多种不同的类型，以及需要根据不同的应用程序选择不同的随机性。今天尝试了一下，在JavaScript中数值的处理也是多种多样，非常的有意思，而且有些处理让人不解。只能暂作记录，慢慢考究。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascriptss-addition-operator-demystified.html",
            "title": "JavaScript中加号操作符细节",
            "description": "\nJavaScript是一门非常优秀的语言。我喜欢它的灵活性，因为可以使用它做很多事情，比如说改变变量的类型，可以给对像添加方法或属性，也可以在不同的变量类型上使用操作符等等。然而，要灵活的用好JavaScript还是需要付出一定的代价。开发人员需要了解如何使用不同的操作符处理不同类型，比如加法(+)、等于或全等于(==和===),不等于或不全等(!==或===)等。同时许多操作符都可以使用自己的方式来处理类型的转换。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/introducing-css-scroll-snap-points.html",
            "title": "CSS Scroll Snap Points简介",
            "description": "\n介绍这个新CSS属性之前，我想要先讲一下使用JavaScript实现的一个功能—— 将一个元素锁定在滚动视窗之中。众所周知，使用JavaScript实现滚动的行为还是有些难度的。CSS Scroll Snap Points 新规范指出你仅仅使用几行简单的CSS代码就可以实现以上所述的功能。新出现的Web技术总是在不断的变化之中，这个规范也处于不断的修改之中。也存在“旧的”与“新的”属性与值。随着浏览器的不断地支持，这个新属性的前景还是不错哒~ 在规范处于中间的阶段，我将带你们获取浏览器对其最大的支持性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-features-essential-modern-web-design.html",
            "title": "现代网页设计必不可少的CSS3功能",
            "description": "\n在过去几年，CSS 的发展是很多 Web 设计者和开发人员未能想到的。CSS3 引入了新的功能，如 border-radius, box-shadow, text-shadow, text-overflow, multiple-background, transition, flexbox、animation 以及媒体查询等。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-typography.html",
            "title": "我所知道的所有的响应式网站排版",
            "description": "\n响应式排版是一个棘手的问题。我学习了很多的有关排版的问题，而且收集了一些非常棒的例子，比如使用相对单位，vertical rhythms和恰当的文本缩放排版。这些新的例子都是非常棒的，它们让我的网站更加美观，更加赏心悦目。但是，实现这些功能的过程却是非常糟糕的。在几个月的辛苦工作之后，现在我终于找到了一个可以和各位分享的一个解决方法——Typi。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/tifu-by-using-math-random.html",
            "title": "Math.random()",
            "description": "\n唐纳德·克努特曾在《计算机程序设计的艺术》（卷二）中指出：“当今使用的大部分随机数生成器都不够优秀，而且开发者倾向于拿来就用，不去了解具体的生成策略。以至于我们常常发现一些略有瑕疵、年代久远的随机数生成器会被盲目地用在一个又一个的程序中，而对于它们的局限性，却无人问津。”\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/quick-tip-the-right-way-to-use-figure-and-figcaption-elements.html",
            "title": " figure 和 figcaption 元素的正确使用方式",
            "description": "\nfigure和figcaption是两个经常在一起使用的语义化元素。如果你还没有在规范中了解过他们，没有机会在项目中使用过他们，或者说现在对他们还是一无所知，这里就给大家讲一些如何正确使用他们的小技巧。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/how-to-reverse-a-string-in-javascript-in-different-ways.html",
            "title": "JavaScript算法练习：字符串反转",
            "description": "\n今天在freeCodeCamp上面刷题，碰到一题是有关于字符串反转。反转一个字符串是JavaScript中常见的面试题之一。可能面试官会给你一个字符串“Hello Word!”,让你通过JavaScript的方法，将其变成\"!droW olleH\"。我也是初学者，利用前面所学数组相关的知识以及题目的提示,我算是过关了，后来想，是不是还有其他的方法能破此题呢？搜索了一下，还是有不少的方法，这里把这些方法罗列一下，以备后面可以使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/es6-variable-declaration-with-var-let-and-const.html",
            "title": "JavaScript变量：变量声明",
            "description": "\n这几天都在折腾JavaScript中有关于变量的基础知识，不折腾不知道，一折腾才知道还有很多未能明白。我把变量相关的知识分为：变量的声明、变量命名原则、变量值的数据类型、变量作用域和变量提升几个部分。为了能更好的理清楚相关的知识点，绘制了一张思维导图。在这篇文章主要来理清楚变量声明相关的知识点。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/stylelint.html",
            "title": "使用 stylelint检查CSS",
            "description": "\n当你书写大量的CSS代码时，可能会出现不止一个的错误。可能需要某个工具来阻止你CSS书写的错误。可能，有的时候你的错误真的是一个bug。也有可能仅仅因为草率造成的不一致或者不明确的代码风格。可能它们当中的许多看起来微不足道(取决于你的性子)，但是随着代码库的增多以及时间累积，许多人使用时就会做出有丑陋的东西。事情的后果不是你可以想象的。你尝试去控制自己。你的同事也帮助你，当你游离及时纠正你的错误。但是，你和你的同事都是错误的制造者，所以最后至少在一定程度上都不可避免的失败了。后来，你或者其他人就要解决你页面CSS错误造成的问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/optimizing-critical-path-performance-with-express-server-and-handlebars.html",
            "title": "使用Express Server和Handlebars优化Critical-Path性能",
            "description": "\n最近，我在一个React同构网站工作。这个网站建立在React上，运行于Express服务器上。一切都进行得十分顺利，但是我仍对CSS包的加载阻塞不满意。因此，我开始考虑如何在Express服务器上进行关键路径的优化。这篇文章主要是如何使用Express和Handlebars进行安装以及配置一个关键路径的性能优化的笔记。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/front-end-challenge-accepted-css-3d-cube.html",
            "title": "接受前端挑战：用CSS实现3D立方体",
            "description": "\n你喜欢挑战么？你愿意承担一项以前从没遇到过的任务并且按时完成么？如果在进行任务中，你碰到来一个似乎无法解决的问题呢？我想分享我使用CSS 3D效果的经历，那是第一次用于实际项目中，以此来激励你接受挑战。那是平常的一天，当Eugene（ CreativePeople的经理）写信给我的时候。他寄给我一个视频，说他正在为一个新项目开发一个概念，而且想知道我是否可能开发一个像视频里那样的东西。这是一个绕着一个轴旋转的3D物体（准确地说是个立方体）。对于用CSS 3D工作我已经有一些经验了，于是我的脑海里开始形成一个解决方案。我Google搜索了像“CSS 3D cube”这样的关键词来确认我的想法，随后我回复Eugene说我可以。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascript-equality-operator.html",
            "title": "【转载】让你彻底地、永久地搞懂JavaScript的==",
            "description": "\n大家知道，==是JavaScript中比较复杂的一个运算符。它的运算规则奇怪，容易让人犯错，从而成为JavaScript中“最糟糕的特性”之一。在仔细阅读了ECMAScript规范的基础上，我画了一张图，我想通过它你会彻底地搞清楚关于==的一切。同时，我也试图通过此文向大家证明==并不是那么糟糕的东西，它很容易掌握，甚至看起来很合理。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/de-emphasize-by-blurring.html",
            "title": "CSS秘密花园： 通过模糊来De-emphasize（去强调）",
            "description": "\n在上一节的“通过调节亮度去强调”中，我们看到了通过调节亮度来让Web APP上的一些部分de-emphasize的方法，使用了一个半透明的黑色覆盖层。但是，当页面上有很多东西的时候，我们需要调暗很多，才可以为其上的文本提供足够的对比度，或是把用户的注意力转移到突出显示的盒子上或其它元素上边。还有一种更优雅的方式，如下图所示，是除了调光之外（或者直接不要调光）还把其它的所有东西都模糊。这看起来更真实，因为它模仿了我们看对象的视觉创建了一个深度，也就是当我们专心看物理上离我们近的东西时的视线。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/de-emphasize-by-dimming.html",
            "title": "CSS秘密花园： 通过亮度调节去强调（De-emphasize）",
            "description": "\n很多时候，我们需要通过在元素背后添加一个半透明的深色叠加来让内容变暗，强调并提醒用户关注某个UI元素。例如，lightboxes和“quick tours”接口经常需要这种效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/pure-css-games-with-counter-increment.html",
            "title": "使用CSS的counter-increment做的游戏",
            "description": "\n我把CSS的黑魔法和把CSS推动到极限当作我的至爱。许多人没有意识到这是有多么的强大（特别是结合Sass）的预处理技术。这篇文章结合这两种至爱来做一些有意思的东西。当然它可能会或可能不会被你的下一个客户问，这样做有价值吗？但这样尝试才能真正的理解一种语言(当然，很多人说CSS不是一种语言)。但你也能使用纯CSS技术做一些简单的小游戏。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/a-complete-guide-css-grid-layout.html",
            "title": "CSS Grid布局指南",
            "description": "\nCSS Grid布局 （又名\"网格\"），是一个基于二维网格布局的系统，主要目的是改变我们基于网格设计的用户接口方式。如我们所知，CSS 总是用于网页的样式设置，但它并没有起到很好的作用。刚开始的时候我们使用表格(table)，然后使用浮动(float)、 定位(position)和内联块(inline-block)，但所有这些方法本质上来讲都是hacks，存留了很多需要实现的重要功能问题(例如，垂直居中)。虽然Flexbox可以起到一定的补救作用，但是它只可以实现简单的一维布局，并不适用于复杂的二维布局(实际上 Flexbox 和 Grid 可以一起结合使用起到最佳效果)。网格是 CSS 第一次专门创建的模块，用来解决我们之前在制作网站时使用hacks处理布局问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/how-do-i-enumerate-the-properties-of-a-javascript-object.html",
            "title": "JavaScript学习笔记：对象属性的枚举",
            "description": "\nJavaScript中对象的属性分为两种：数据属性和访问器属性。然后根据具体的上下文环境的不同，又可以将属性分为：原型属性和实例属性。原型属性是定义在对象的原型(prototype)中的属性，而实例属性一方面来自构造的函数中，然后就是构造函数实例化后添加的新属性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/styling-by-sibling-count.html",
            "title": "CSS秘密花园： 相邻元素样式",
            "description": "\n在很多情况下，我们需要给元素的兄弟元素以不同的样式风格呈现。主要的用例是提高用户体验和在大屏幕中不断增加列表荐。以前也介绍过有关于Quantity Queries相关的技术，那么这篇文章再次通过实例阐述这方面的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/taming-table-column-widths.html",
            "title": "CSS秘密花园： 驾驭列表宽度",
            "description": "\n虽然我们很久以前就停止使用表格来布局，但在网页中还是占有一席之地，比如表格数据统计、电子邮件，列表清单等等。同时，我们使用display属性，可以让元素渲染的形式和表格相似。然而，有时候看起来很方便，但有很多内容是动态的，这让布局非常难以预测。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/intrinsic-sizing.html",
            "title": "CSS秘密花园： 内容尺寸",
            "description": "\n大家都知道，如果不显式的给一个元素设置height值，它将会根据元素的内容自动调整。如果我们要想要给元素的宽度也有一个类似的行为呢？一个相对较新的规范 CSS Intrinsic & Extrinsic Sizing Module Level 3给width和height定义了一些新的关键词，其中一个非常有用的是min-content。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/holy-grail-layout-css-grid.html",
            "title": "CSS Grid构建圣杯布局",
            "description": "\nCSS 网格布局模块，虽然现在仍处于编译者的草案之中但是即将定稿。我们现在可以在一些浏览器中进行测试并可以检测其潜在的bug。CSS 网格布局是真的很复杂，相较于 Flexbox 更是如此。它具有17个新属性并且在如何使用CSS书写方面介绍了很多新概念。为了尝试如何使用萦绕在我脑海中的这些新规范，我决定创建一个圣杯布局尝试新规范工作原理。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/the-basics-of-variable-scope-in-javascript.html",
            "title": "JavaScript学习笔记： 局部变量和全局变量",
            "description": "\nJavaScript有两种变量：局部变量和全局变量。而这两个对于初学JavaScript的同学来说是一个较为麻烦的。非常容易搞错。我也看了好几天有关于这方面的教程，也还没完全整明白。今天把自己理解的记录下来，有不对之处，还请高手斧正。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/algorithm-return-largest-numbers-in-arrays.html",
            "title": "JavaScript算法练习:取二维数组中最大值的几种方法",
            "description": "\n在JavaScript中可以通过内置的Math.max()的最大值，但是要从多重数组中取出最大值，还是有一定的难度。假设你有一个数组，而且这个数组中包含了数字的子数组，而我们要做的是从数组中的每个子数组中返回其最大的那个最大数。这篇文章介绍了如何实现在二维数组和多维数组中取出最大值的几种方案。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/custom-checkboxes.html",
            "title": "CSS秘密花园： 自定义复选框",
            "description": "\n设计师总是希望能够对Web页面上的每个元素都能有更多的控制。当一个CSS经验有限的图形设计师需要创建一个网站案例时，他们很喜欢自定义表单元素，然后让开发人员来把它转变成CSS。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-fixed-layout.html",
            "title": "【转载】Web移动端Fixed布局的解决方案",
            "description": "\n移动端业务开发，iOS 下经常会有 fixed 元素和输入框(input 元素)同时存在的情况。 但是 fixed 元素在有软键盘唤起的情况下，会出现许多莫名其妙的问题。 这篇文章里就提供一个简单的有输入框情况下的 fixed 布局方案。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/introduction-css-grid-layout-module.html",
            "title": "CSS Grid布局模块简介",
            "description": "\n随着 Web 应用程序变得越来越复杂，我们需要更自然的方式，在不使用hacky解决方案的情况下，如:使用浮动和其它繁琐的技术，就可以轻松做出高级的布局。令人兴奋的是产生了一种适用于布局的新解决方案---CSS Grid布局模块。在这个介绍性的教程中，我会向大家介绍这个相对较新的 CSS 功能，我将先讨论一下当前浏览器的支持情况，之后我会用一些例子告诉大家CSS Grid布局模块是如何工作的。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/web-animations-learning-to-love-the-api.html",
            "title": "Web动画：学习使用API",
            "description": "\n如果你使用过SVG，你应该知道可以使用SMIL给SVG添加动画。CSS Transitions和keyframes动画都可以操作CSS属性来添加动画。\nrequestAnimationFrame() 使得浏览器可以在下一帧执行之前，请求一个动作。但是每一中动画技术都不是完美的，各自有各自的问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/animation-along-a-circular-path.html",
            "title": "CSS秘密花园： 沿着路径的动画",
            "description": "\n几年前，当CSS动画刚出来的时候是多么的令人兴奋，那时Chris Coyier问我，有没有什么方式使用CSS让元素绕一个圆形的路径运动。当时，它只是一个有趣的想法，但我在无意中发现有很多这方面的用例。例如，Google+添加新成员就使用了这样一个动画。当时我和Chris都没有想出一个合理的方式来解决这个问题。我们可以想出的最好方法是通过多个关键帧绘制近似一个圆形的路径，显然这不是一个好的主意，也没有任何方式能定义出来这样的圆形路径。那么我们必须得想出一个更好的方法，对吗？\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/create-an-object-methods.html",
            "title": "JavaScript学习笔记：创建对象",
            "description": "\n对象是JavaScript的基本数据类型。在JavaScript中除了字符串、数字、true、false、null和undefined之外的值都是对象。所以，学习JavaScript不把对象学习明白要继续往下学习就非常的困难。从今天开始进入对象的学习中。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/quick-tip-how-to-use-html5-picture-for-responsive-images.html",
            "title": "如何使用 HTML5 的picture元素处理响应式图片",
            "description": "\n图片在响应式网页设计中是出了名的最具挑战性的方面之一。今天我们就来看看如何使用<picture>元素来处理响应式图片.固定宽度，像素完美的网站设计已经离我们远去了。在宽屏显示器，互联网电视，多尺寸的平板电脑和智能手机的今天，我们的设计必须应付一切可能，将宽由320px向7680px转变。伴随这种多分辨率风景而至的，是需要拉伸或收缩图像，以适应这些不同的要求。这可以被理解为如下问题，矢量图形出现异常时，绝大多数具有特定像素的图像宽度并不改变。所以，我们应该怎么做呢?\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/how-to-create-an-icon-system-using-svg-symbols.html",
            "title": "使用SVG symbols建立图标系统",
            "description": "\n在实现Web项目的图标系统时，SVG是一个不错的选择。虽然使用SVG创建图标系统有多种方式。在这篇文章中，我们只看其中一种：SVG symbols。这项技术基于两个元素的使用：<symbol>和<use>。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/dev-tips.html",
            "title": "Chrome 35个开发者工具的小技巧",
            "description": "\n谷歌浏览器如今是Web开发者们所使用的最流行的网页浏览器。伴随每六个星期一次的发布周期和不断扩大的强大的开发功能，Chrome变成了一个必须的工具。大多数可能熟悉关于chorme的许多特点，例如使用console和debugger在线编辑CSS。在这篇文章中，我们将分享一些很酷的技巧，让你能够更好的改进工作流程。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/object-properties-detection-method.html",
            "title": "JavaScript学习笔记：对象属性检测",
            "description": "\nJavaScript对象可以看作是一个属性的集合，很多时候需要看某个属性是否存在于某个对象中。在JavaScript中对象属性的检测主要有以下几种方法。 in运算符、hasOwnProperty()方法、propertyIsEnumerable()方法和!==undefined。接下来看这四种方法怎么检测对象属性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/on-object-fit-and-object-position.html",
            "title": "object-fit和object-position",
            "description": "\nobject-fit和object-position是我最近最喜欢的两个CSS属性。他们使开发人员可以操作img或video中的内容，类似于我们可以用background-position和background-size操作背景内容一样。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/smooth-state-animations.html",
            "title": "CSS秘密花园： 动画状态",
            "description": "\n动画并不总是页面加载的时候就开始。往往，我们都想通过用户的操作来触发动画，比如鼠标的悬浮(:hover)或者鼠标按下时(:active)。在这种情况之下，我们可能没办法控制动画播放的实妹次数，用户可能会迫使动画停止。例如，用户有通过悬浮(:hover)触发动画：鼠标移出元素之前动画结束。在这样的例子中会发生什么呢？如果你的回答是“动画应该会呆其当前状态”或者“动画会顺利的过渡到前置状态”。默认情况下，动画就会停下来，突然跳到最初始状态。有时候可能会接受这种非常微妙的动画。但在大多数情况下它直接影响用户的体验。那么我们可以改变这种行为吗？\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/basic-of-the-javascript-variable.html",
            "title": "JavaScript学习笔记：变量",
            "description": "\n在很多语言当中都有变量，而这也是基础知识。在JavaScript中也有变量，而最近也在学习有关于这方面的知识。今天就来总结一下JavaScript中有关于变量的一些基础知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/how-to-find-the-sum-of-an-array-of-numbers.html",
            "title": "JavaScript学习笔记：数组求和方法",
            "description": "\n通过最近学习，越来越感觉JavaScript的强大与魅力之处，仅数组一个知识点就让我这样的初学者折腾了很久。折腾是折腾，但还是很有效果的，这几天的学习到的一些基本知识，就在自己的业务就用到了。顿感自信心爆棚，我也有一天能学会JavaScript。别的不多说了，咱们今天一起来玩数组的求和，看看有哪些方法可以实现数组的求和。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/create-animated-text-fills.html",
            "title": " 如何创建（动态的）文本填充",
            "description": "\n这是一篇关于如何使用不同的技术（包括CSS和SVG），为文本创建各种不同类型的（动态）填充和描边的教程。我想，未来已经在这里。我们在CSS和SVG已经有这么多令人兴奋的可能性，这些我们以前都只能是想想而已。例如，我们现在有很多方法可以用来创建包含动态填充的文本。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/interview-questions.html",
            "title": "JavaScript常见问题和解决方式",
            "description": "\n在使用JavaScript的时候常常会碰到各种奇葩的问题，这篇文章整理了近十个常见的问题，以及其对应的解决方式。不过除了这些问题之外，另外有两篇外文整理了更多的相关问题，这篇文章取于当中一些更为有意义的问题。感兴趣的同学可以看看，也可以将你碰到的一些奇葩问题在评论中一起分享。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/rem-vs-em.html",
            "title": "REM vs EM",
            "description": "\n网页字体排版的最佳实践之一就是使用相对单位，如rem和em。问题是，你应该使用哪一个呢?一直以来，rem支持者和em支持者之间都存在着争辩，认为应该使用自己支持的那个。在这篇文章中，你会找到我如何在rem和em之间做抉择.你也将了解rem和em到底是什么以及如何使用它们来构建模块化组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/typing-animation.html",
            "title": "CSS秘密花园： 文本动画",
            "description": "\n有时候我们想要模拟文本输入的动画效果，就是文本一个一个的出现。这种动画效果特别在科技网站上流行。使用的正确，让你的网站效果直接提到另一个档次上。通常要实现这样的效果都需要复杂的JavaScript脚本。尽管这只是纯粹的演示，使用CSS实现这样的效果那简直就是白日做梦。怎么可能呢？实现这个动画思路是包含文本的元素宽度从0慢慢过渡(一个字符一个字符)元素内容宽度。你可能意识到这种方法的局限性是什么：它不能在多行文本中运行。值得庆幸的是，大多数时候，只是单行文本上使用这种动画效果，比如说标题。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/circular-text.html",
            "title": "CSS秘密花园： 环形文本",
            "description": "\n尽管这不是一个常见的文本效果，有时候有一些比较短的文本需要遵循环形路径显示。这种时候，CSS就弃我们而去了。没有任何CSS属性或功能可以完成这个效果，我们唯一想到的CSS解决方案都非常麻烦，所以我们也就只是想想而已。真的没有什么办法可以实现这样的样式吗？除了使用图像，除了不影响我们文本的整体美观？\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/array-part-8.html",
            "title": "JavaScript学习笔记：数组reduce()和reduceRight()方法",
            "description": "\nreduce()和reduceRight()两个方法功能都是类似的，可以让数组调用一个回调函数callbackfn作为累加器。实际上根据这个回调函数，可以实现不同的功能，比如说，对数组项求合；将多个数组合并到一个数组等等。甚至配合数组其他的方法你还可以做更多功能的处理。如果感兴趣的话不仿尝试一二。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/animating-the-viewbox.html",
            "title": "使用viewBox添加动画",
            "description": "\n我最近在CodePen上发表了一个DEMO来庆祝新的一年，然后得到了很多积极的反馈，关于我如何使用viewBox来作为我的场景中的camera的。所以我决定来写一篇文章来介绍一下这个动画是如何创作的~\n "
        },
        {
            "link": "https://www.w3cplus.com/css/link-in-body.html",
            "title": "未来CSS文件加载方式",
            "description": "\nChrome打算改变<link rel=\"stylesheet\">的加载方式，当link出现在<body>中时，就变得非常明显了。在blink-dev的文章中，它的影响和性能尚不明确，所以我想在这里深入讲讲。\n "
        },
        {
            "link": "https://www.w3cplus.com/react/css-modules-for-react.html",
            "title": "CSS Modules 详解及 React 中实践",
            "description": "\nCSS 是前端领域中进化最慢的一块。由于 ES2015/2016 的快速普及和 Babel/Webpack 等工具的迅猛发展，CSS 被远远甩在了后面，逐渐成为大型项目工程化的痛点。也变成了前端走向彻底模块化前必须解决的难题。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/realistic-text-effects.html",
            "title": "CSS秘密花园： 逼真的文本效果",
            "description": "\n有时候，某些文本处理在Web上变得非常普遍。例如，活版文本、悬停模糊文本、凸出的（伪3D）文本等等。这些效果通常是由精心打造的文本阴影的效果、还有我们眼睛的工作原理来组合而成的，很多在一定程度上都是基于视觉错位的。一旦你知道这些效果涉及到的技巧，你就会发现这其实是很容易完成的，但是通过开发工具来逆向工程却总是不那么容易的。本节就是要创建这样的效果，这样你就不会再疑惑说，“这样的效果到底是怎么完成的？”\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/extending-the-clickable-area.html",
            "title": "CSS秘密花园：扩展可点击区域",
            "description": "\n如果你对用户体验感兴趣的话，你可能听说过费茨法则。最早在1954年由美国物理学家Paul Fitts提出，费茨法则是迅速移动到目标区域所需要的时间，是到目标的距离和目标的宽度之间的比率的对数函数。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/dragon-dance-opening-animation.html",
            "title": "手淘年货节舞龙揭幕动画实战",
            "description": "\n手淘用户这几天应该看到了年货节版本，不知道刚打开首页有没有被一阵锣鼓声、鞭炮声给吓倒。为了营造一种过年的气氛出来。PD们给年货节上了一个舞龙的揭幕动画，而这个任务就落在了小生的头上，为了将.gif动效在移动端上实现，着实费劲。那么今天就来介绍这个动画效果是如何实现的？\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-reference/pointer-events.html",
            "title": "pointer-events",
            "description": "\n你也可以让元素响应于指针事件(auto),或者阻止响应(none)。如果你阻止元素响应于指针事件，那么该元素的子节点的元素将会成为这些事件的目标。如果你单击元素，其子节点元素将会接收该单击事件。这种情况同样适用于hover和一些其他游标操作。例如，利用pointer-events:none你可以获取一个元素的子元素中的文本(可以参考下面的实例)。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/finessing-fecolormatrix.html",
            "title": "详解feColorMatrix",
            "description": "\n你见过去年年底Spotify分享的一个主题吗？他们通过图像颜色处理，达到一个令人折服的视觉审美效果。图像处理是一种非常强大的处理机制，在项目中添加一点小技巧，Web浏览器通过Web的过滤器可以动态处理图像色彩，这样将使你的项目能脱颖而出。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/javascript-shuffle.html",
            "title": "【转载】随机问题之--洗牌算法",
            "description": "\n洗牌算法是我们常见的随机问题，在玩游戏、随机排序时经常会碰到。它可以抽象成这样：得到一个M以内的所有自然数的随机顺序数组。在百度搜“洗牌算法”，第一个结果是《百度文库-洗牌算法》。扫了一下里面的内容，很多内容都容易误导别人走上歧途，包括最后用链表代替数组，也只是一个有限的优化（链表也引入了读取效率的损失）。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/custom-underlines.html",
            "title": "CSS秘密花园： 自定义下划线",
            "description": "\n设计师是很挑剔的一群人。我们总是很喜欢自定义一些东西，然后精心设计一番，使得它们和我们想要的视觉效果非常相近，让我们的设计更直观也更易于使用。毕竟，默认的东西很少有我们觉得不错的。文本下划线就是我们非常喜欢去自定义的东西之一。尽管默认的用起来不错，可是给人一种干扰的感觉，况且它在每一个浏览器中渲染的结果都不一样。尽管文本下划线从web开始普及以来，一直伴随着我们，我们从来没有真正找到更多自定义它们的方式。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/picking-the-right-cursor.html",
            "title": "CSS秘密花园： 挑选合适的光标",
            "description": "\n鼠标指针的意义并不仅仅是为了显示目前屏幕上的光标在何处，还是为了告诉用户可以进行哪些交互动作。这是在桌面应用程序中很常见的用户体验，但是在Web App中则经常被遗忘。\n "
        },
        {
            "link": "https://www.w3cplus.com/workflow/gulp-tutorial-10-generating-sprites.html",
            "title": "Gulp系列教程：生成CSS精灵图",
            "description": "\n这是Gulp系列教程的第十部分。今天我会用Gulp.js创建CSS精灵图。只是为了确保每个人都知道我在说什么：CSS精灵图是把一系列图片放到一张图上。这样可以减少请求数因而网页加载更快。CSS会把每个图标移动到正确位置。CSS精灵图不再像过去那样常用，因为SVG或矢量字体。但是我仍将它们作为不支持矢量字体浏览器的备用方案。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/blinking.html",
            "title": "CSS秘密花园： 闪烁动画",
            "description": "\n您还记得<blink>标签吗？当然，你可能做过这样的事情。它在我们行业已成为一个历史，也成为一种方化的符号。但全世界的人都鄙视他，因为它违反了样式和结构的分离原则，但最主要的是原因是国灰在90年代末网页是过度的使用它，使用大家感到很痛苦（那时候的网页都有大量的<blink>制作的闪烁效果，闪得让你头晕）。甚至发明这个标签的人Montulli也给示：\"发明<blink>标签是为互联网做过最糟糕的一件事情\"。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/array-part-7.html",
            "title": " JavaScript学习笔记： 数组迭代方法",
            "description": "\n使用数组总是会碰到数组的遍历（迭代）操作。说到迭代，可能会立马想起for语句对数组进行迭代。在ES5中新增加了五种遍历方法：forEach()、every()、some()、map()和filter(),这五个数组迭代的方法中，其中forEach()、every()和some()方法不生成一个新数组，而filter()和map()方法将会生成一个新数组（符合条件）。并且这些方法都会调用指定的函数callbackfn。那么接下来就一起了解这几个方法的使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/es6-array-methods.html",
            "title": "JavaScript学习笔记：ES6数组方法",
            "description": "\nES6给数组添加了一些新特性，而这些新特性到目前为止完全可以运用到自己的业务层。在这一节中将总结有关于ES6给数组提供一些新特性的使用方法。ES6提供的两个静态方法：Array.from和 Array.of;ES6提供操作、填充和过滤数组的方法： Array.prototype.copyWidthin、Array.prototype.fill、Array.prototype.find和Array.prototype.findIndex等等。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/fancy-ampersands.html",
            "title": "CSS秘密花园： 花式的&符号",
            "description": "\n几个漂亮的&符号，在大多数电脑上都有；从左到右分别是：Baskerville, Goudy Old Style, Garamond, Palatino（全部都是斜体）。你会在印刷文献中发现很多有不显眼的&符号。设计良好的&符号是非常优雅的，其它的符号都很少能像它这样。整个网站都在致力于寻找有最好看&符号的字体。但是，拥有最好看&符号的字体，却往往不是那个你希望应用于其它文本的字体。毕竟，真正漂亮和优雅的标题效果，总是一个好的无衬线字体和一个漂亮而且复杂的衬线符号的结合。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/native-popups-and-modals-with-the-html5-dialog-element.html",
            "title": "HTML5 dialog元素生成模态弹出窗口",
            "description": "\n近期,网页上的的许多流程都需要用户完全同意才可以完成。例如，用户可能需要删除帐户，更改他们的用户名，或确认货币交易。这种情况下，常用的用户体验(UX,User experience design)是显示一个具有两个按钮的对话框。一个是取消，一个是继续。这么多年，我们一直依靠JavaScript库实现此效果，但在本教程中，我们要用<dialog>元素实现此效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/workflow/gulp-build.html",
            "title": "【转载】使用Gulp构建网站小白教程",
            "description": "\n行业里有一种批评，说前端太浮躁，总是追逐新技术，感觉 grunt 还不熟悉，突然一夜之间满大街都在谈论 gulp 了。月影觉得不能怪技术发展太快，技术发展总是带来好处多于坏处，有时候我们确实需要鼓起勇气去“追求”技术潮流，当然理由是为了弄明白为什么有这些技术工具，而无关于什么浮躁之类的事儿。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/array-part-4.html",
            "title": "JavaScript学习笔记：数组的sort()和reverse()方法",
            "description": "\n在实际的业务当中，很多时候要对定义好的数组重新排序。在JavaScript中自带了两个方法，可以对数组进行排序操作。这两个方法就是sort()和reverse()。今天就来学习这两个方法相关的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/shuffling-array-js.html",
            "title": " 洗牌算法：给数组随机排序",
            "description": "\n洗牌算法是一个比较形象的术语，本质上让一个数组内的元素随机排列。举例来说，我们有一个如下图所示的数组，数组长度为 9，数组内元素的值顺次分别是 1~9：\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/web-animation-api-from-entry-to-the-top.html",
            "title": "【转载】Web Animation API 从入门到上座",
            "description": "\nW3C提出Web Animation API（简称WAAPI）正缘于此，它致力于集合CSS3动画的性能、JavaScript的灵活、动画库的丰富等各家所长，将尽可能多的动画控制由原生浏览器实现，并添加许多CSS不具备的变量、控制以及或调的选项。看起来一切都很棒，是不是以后我们在动画技术选型上可以一招鲜吃遍天了呢？接下来请跟我一起敲开Web Animation API的奇妙之门。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/animating-your-brand.html",
            "title": "给你的品牌标志添加动画 ",
            "description": "\n我们来讨论一下如何给我们设计的作品添加动画，使其和我们品牌标志的某些层面的内容，如字体、颜色、布局以及其它各种东西保持一致。动画是非常有趣的。给我们的设计添加动画可以使其变得有生命，同时也让我们的设计脱颖而出。动画可以是展示设计是如何组合的一起的。它们可以提供上下文帮助大家理解我们的产品。动画往往是我们放在最后的策略。我们在一个模态窗口或滑动菜单上放一个过渡，但是我们通常都不会考虑这个动画是否符合我们整体的设计。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/interactive-image-comparison.html",
            "title": "CSS秘密花园： 交互式图像对比",
            "description": "\n有时候我们需要向别人展示两幅图像的视觉差异，通常一幅是修改前的图像、一幅是修改后的。例如，把两幅图像放在一起，展示照片处理的效果。比如一些美容师的网站要展示某些美容护理的效果，某个地理区域发生灾难的结果。最常见的方案是将两张图片并排放置。但是，这样的话人的眼睛就只能注意到非常突出的差异、而察觉不到那些小的变化。如果对比不是那么重要或者两图之间的差异非常大的话，这种方法是没有问题的，但是对于其它情况呢，我们需要一些更好的方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/houdini-maybe-the-most-exciting-development-in-css-youve-never-heard-of.html",
            "title": "Houdini：也许是你从未听过的在CSS领域最令人兴奋的发展",
            "description": "\n你是否曾经试过想使用某个CSS特性但是却因为他没有被所有浏览器支持而不能用？又或者更糟糕的，他被全部浏览器支持，但是这种支持充满了bug、表现不一致甚至是不完全兼容的？如果这些事情曾经在你身上发生过——并且我打赌他们绝对发生过——那么你就需要关注一下Houdini。Houdini是一个新的W3C工作组，他们致力于让这些问题永远消失。他们计划通过引入一整套API来让开发者首次拥有扩展CSS的权利，并且会提供出一套工具来与浏览器的渲染引擎的样式与布局进行挂钩。但是这意味着什么呢？这是一个好的提议吗？这会如何帮助我们开发者在现今与未来构建网页呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/ligatures.html",
            "title": "CSS秘密花园： 连体字母",
            "description": "\n和人一样，不是所有的字形放在一起的时候都可以显得很自然。例如，对于大多数衬线字体的f和i而言。字母i上边的小点经常和f中的横线重叠，使得它们的组合看起来非常笨拙。\n "
        },
        {
            "link": "https://www.w3cplus.com/JavaScript/learning-javascript-native-functions-and-how-to-use-them.html",
            "title": "学习并运用JavaScript的原生函数",
            "description": "\n尽管 JavaScript  总是让人产生误解，但是它已经成为了最流行的编程语言之一。理解 JavaScript 的内在原理很困难。同样的，迫使 JavaScript 成为常规规范，如面向对象或函数编程，同样具有挑战性。这里我强调阐明 JavaScript 核心部分的原生函数。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/array-part-6.html",
            "title": "JavaScript学习笔记：数组的indexOf()和lastindexOf()方法",
            "description": "\n众所都之，数组项在一个数组中都有自己的位置。在JavaScript中提供了两个确定数组项位置的方法：indexOf()和lastIndexOf()。今天我们主要一起学习这两个方法是如何使用，又是如何查找出数组项在数组中的确切位置。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/scrolling-hints.html",
            "title": "CSS秘密花园： 滚动提示",
            "description": "\n滚动条主要是用来告诉用户当前显示的并不是所有的内容，滚动的话可以查看更多。但是，它们往往显示得很笨拙而且分散了用户的注意力，所以现代操作系统中已经开始对它们进行简化，通常是把它们完全隐藏起来，等到用户和可滚动的元素元素有实际交互的时候再出现。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/array-add-delete-change-check.html",
            "title": "JavaScript学习笔记：数组的增、删、改、查",
            "description": "\n数组是JavaScript中常见的一个对象，它有一些经典的操作，比如数组的增、删、改、查。在这篇文章中主要整理这方面的相关操作方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/adjusting-tab-width.html",
            "title": "CSS秘密花园： 调整tab缩进宽度",
            "description": "\n代码量重的网页，如文档或教程，在样式方面具有较多挑战。<pre>和<code>元素是我们用来显示代码块的，在用户代理端有一些默认的样式,但是，这难以满足所有代码的展示要求。其中最大的问题是，虽然tab是理想的缩进代码的方式，它们在Web上经常被避免使用，因为浏览器是用八个字符的宽度来展示它们的。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/build-a-custom-html5-video-player.html",
            "title": "生成一个自定义的HTML5视频播放器",
            "description": "\n虽然拥有特定的HTML视频元素的想法是在十多年前被提出的，但是我们才刚刚开始看到它取得的成果!忘记\"HTML5 2012\"那所有的繁文缛节;事实是，现在你可以在你的项目中使用视频元素!你只需要在盲目冒险前注意一些细节。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/6-reasons-to-start-using-flexbox.html",
            "title": "使用Flexbox的六个理由",
            "description": "\n您使用 flexbox吗?上周我在 twitter 上，问了这个问题，很惊讶地发现，不少于 50%的人回答是。之所以感到惊讶是因为，直到最近，我并不在我的任何项目中使用 flexbox ，我想我一定是唯一的一个。我不使用 flexbox 有几个原因。但是，经过一些调查研究之后，我的担忧得到明显的减弱，我已经开始了转变。所以这里有你应当开始使用Flexbox的六个理由。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/deep-in-delete.html",
            "title": "深入理解 JavaScript 中的 delete 操作符",
            "description": "\ndelete 操作符用于删除对象的属性。似乎很多同学（包括我）对 delete 操作符都是似是而非，为什么有的属性可以被删除，有的却不能被删除？为什么能够删除对象的属性却不能删除变量或函数？在 eval 和 严格模式下，delete 操作符又有哪些特性？等等。。本文将从基本概念到 ECMPScript 内部原理来学习 delete 操作符。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-reference/content.html",
            "title": "content",
            "description": "\ncontent属性与::before和::after伪元素配合使用，向网页中某个元素插入生成内容。content属性的值就是通过伪元素插入到该元素的内容。使用content属性插入的内容可以是文本字符串、 符号、 图像、 计数器(即样式列表)，或引号。同时，将多个值合并为一个，也是可能的。请参阅以下的值和一些详细的实例。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/zebra-strlped-text-lines.html",
            "title": "CSS秘密花园： 斑马条纹背景的文本行",
            "description": "\n在CSS中实现斑马条纹表格已不是什么新技术了，众所周之使用CSS3的伪类选择器就能轻松实现。但要实现文本的斑纹效果，并不是一件易事，那么这样的效果要怎么实现呢？这篇文章告诉你一种黑魔法，能轻松实现需要的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/reservation-code-farmers.html",
            "title": "码农的自留地",
            "description": "\n2015年已悄然离去，已成为昨天。回忆昨天，我有过2012年的《我和W3cplus的故事》,悄悄《走过的2013年》,随着《辞旧迎新，更上一层》,迎来了2015，可是时间的流逝，不知道不觉得就踏入了2016年。也走过了码农传说中的宿命节点35岁。这也是我为何将这篇总结命题为码农的自留地，希望自己能一直拥有这块自留地，一直耕耘下去。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/10-ways-minimize-reflows-improve-performance.html",
            "title": "提高Web页面性能的技巧",
            "description": "\n现在动辄几兆大小的页面加载量，让性能优化成了不可避免的热门话题。WEB 应用越流畅，用户体验就会越好，继而带来更多的访问量。这也就是说，我们应该反省一下那些过度美化的 CSS3 动画和多重操作的 DOM 元素是否都考虑到了在性能方面的影响。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/that-navigation-bar-design.html",
            "title": "通过建立一个导航栏了解盒子模型",
            "description": "\n在一个机构工作意味着我的工作大部分都是基于项目的。意味着每隔几个月(或更少，如果你明白我的意思)就会开始一个新的设计。有趣的是，一段时间后，我发现了每个设计师的风格和喜好。一个例子就是连续做过的三个项目中，导航UI的设计都有类似的风格。这种特殊的元素对我来说十分显眼，不仅因为我之前见过两次，而且我发现它涉及了盒子模型的各个方面。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/inserting-line-breaks.html",
            "title": "CSS秘密花园： 插入换行符",
            "description": "\n很多时候需要通过CSS插入换行符的情况，通常出现在list列表定义中,在其它的情况中也有。很多时候我们使用定义列表，是因为我们想要使用恰当的、语义标记，甚至当我们视觉上想要的只是几行name/value对，而我们通常的做法都是使用<br>之类，那么在CSS中能添加类似<br/>功能吗？感兴趣的欢迎继续阅读全文。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/frame-by-frame-animations.html",
            "title": "CSS秘密花园： 逐帧动画",
            "description": "\n通常，我们需要一个动画效果是比较难的或者说使用CSS的transition是不可能实现的。例如，一个卡通移动或一个复杂的进度条。在这种情况下，基于图像的逐帧动画是完美的，但是实现这种效果是具有挑战性的。在这一点上，你可能会说：难道我们不能使用gif动画？很多情况下，答案是肯定的，gif动画是完美的。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/calculate-the-max-min-value-from-an-array.html",
            "title": "JavaScript学习笔记：取数组中最大值和最小值",
            "description": "\n在实际业务中有的时候要取出数组中的最大值或最小值。但在数组中并没有提供arr.max()和arr.min()这样的方法。那么是不是可以通过别的方式实现类似这样的方法呢？那么今天我们就来整理取出数组中最大值和最小值的一些方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-reference/background-size.html",
            "title": "CSS属性：background-size",
            "description": "\nbackground-size属性用于指定背景图像的大小。背景图像可以被设置为覆盖该元素的整个背景区域，或者被设置为由CSS作者所定义的明确的尺寸大小。可以使用 cover 关键字将背景图像设置为覆盖整个元素的背景区域。也可以使用contain关键字将背景图像在背景区域内尽可能大的被包含。如果使用了这两个关键字中的任何一个且该图像具有固定的尺寸和比例，那么该图像的高度和宽度的固有比率将被保留。\n "
        },
        {
            "link": "https://www.w3cplus.com/workflow/gulp-tutorial-9-linting-scss-and-javascript.html",
            "title": "Gulp系列教程：检查SCSS和JavaScript的语法",
            "description": "\n这是Gulp系列教程的第九部分。今天我会使用Gulp.js来自动检测SCSS和JavaScript文件的语法错误和警告。我决定检测SCSS文件而不是CSS文件，因为检测生成的CSS没有意义。但是你也可以用gulp-csslint来检测。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/object-attribute-query-and-settings.html",
            "title": "JavaScript学习笔记：对象属性的查询和设置",
            "description": "\n前几天了解和学习了JavaScript中对象的创建，仅了解这一点皮毛是远远不够的。为了能对对象更了解，这几天一直在看对象的属性相关的知识。对象的属性也有增、删、改、查等，也有自己的相关特性。这篇文章主要了解对象属性的查询和设置。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/elastic-transitions.html",
            "title": "CSS秘密花园： 灵活的过渡",
            "description": "\n灵活的过渡和动画效果(如bounce的过渡效果)一直是一个流行的效果，给人有一个更好的感觉——在现实生活中，物体从A位置移动到B位置，很少是不灵活的移动。这篇文章详细介绍介绍了有关于CSS3动画的制作细节，让Web的动画效果更佳灵活。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/animation-performance-guide.html",
            "title": "【转载】Web动画性能指南",
            "description": "\n随着网页功能变得愈发复杂和精细，以及手机端H5发展中所遇到的硬件性能瓶颈，网页的运行时性能问题变得越来越突出。而用户对于网页运行时性能最直观的感受，莫过于UI操作的流畅程度。流畅或卡顿，爽或不爽，皆在于每个UI动画细节之间。本文旨在帮助理解动画卡顿与流畅的原因，卡顿问题的调试方法，以及从实践中总结出实现流畅动画的规律。为构建操作流畅的网页提供参考。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/array-part-3.html",
            "title": "JavaScript学习笔记：数组的push()、pop()、shift()和unshift()方法",
            "description": "\nJavaScript是一种弱类型语言，不像其它程序语言需要严格定义数据类型。在JavaScript中数组可以任意修改变动，这样也就出现了一个问题，如果边遍历数组边操作数组（比如删除当前项，则所有之后的数组元素下标都将向前移动）是一件很危险的事情。JavaScript的数组是一个拥有堆栈和队列自身优点的global对象。也就是说JavaScript数组可以表现的像栈(LIFO)和队列(FIFO)一样操作。这也是JavaScript数组强大的可操作性的体现。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/how-to-animate-box-shadow.html",
            "title": "如何实现平滑的“box-shadow”动画效果",
            "description": "\n你如何在 CSS 中设置box-shadow属性实现动画效果，既不会导致重新绘制每一帧，又不会严重影响你页面的性能？回答是:你并不能实现。因为box-shadow的动画变化会损害性能。这里有一个简单的办法可以实现上述问题效果。如果要实现最小的重新绘制，应该创建一个伪元素并对其opacity元素进行动画处理，使其以每秒60帧的动画模仿运动物体相同的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/12-steps-to-a-faster-web-app.html",
            "title": "12步创建高性能Web APP",
            "description": "\n现在，Web App 日益重视用户的交互体验，了解性能优化的方式则可以有效提高用户体验。阅读和实践下面的性能优化技巧，可以帮你改善应用的流畅度、渲染时间和其他方面的性能表现。对 Web App 进行性能优化是一份冗杂沉重的工作，这不仅是因为构建一个 Web App 需要前后端协作，而且需要多方面的技术栈：数据库、后端、前端，需要运行在多种平台：iOS，安卓，Chrome，Firefox，Edge。这太复杂了！不过，还是有一些历经实践的通用方式可以用来优化 Web App 的性能。在接下来的小节中，我们将逐步介绍相关的细节。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/hyphenation.html",
            "title": "CSS秘密花园： 断字",
            "description": "\n设计师都喜欢搞文本对齐。在一些令人惊叹的杂志或书籍设计中，文本对齐随处可见。然而，在Web上，对齐却很少使用，甚至是熟练的设计师也很少用。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/viewport-based-typography.html",
            "title": "基于视窗单位的排版",
            "description": "\n我之前有写过基于rem和em的响应式排版，并且也有写过两篇有关模块化组件的博客。在这些文章中，有关视窗单位的评论不可避免的形成了一个话题。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/remove-duplicates-from-javascript-array.html",
            "title": "JavaScript学习笔记：数组去重",
            "description": "\n话说面试常会碰到面试官会问JavaScript实现数组去重的问题，最近刚好在学习有关于JavaScript数组相关的知识,趁此机会整理了一些有关于JavaScript数组去重的方法。下面这些数组去重的方法是自己收集和整理的，如有不对希望指正文中不对之处。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/all-about-css-animations.html",
            "title": "CSS动画概述",
            "description": "\n给HTML中的内容添加动画的三种方法之一是，CSS animation【另外两种方法是：CSS transitions及JavaScript】。CSS动画相对简单。它允许你使用元素的CSS属性来添加动画。它可以让你创造出很多非常酷的效果，如移动、淡入淡出、改变颜色，等等。\n "
        },
        {
            "link": "https://www.w3cplus.com/wai-aria/wai-aria.html",
            "title": "WAI-ARIA 无障碍Web规范",
            "description": "\n无障碍设计是指产品, 设备, 服务, 或者环境是为残疾人士设计的。无障碍设计的概念意味着与一个人的辅助技术(例如, 电脑屏幕阅读器)相兼容, 确保直接访问(即独立)和\"间接访问\"。无障碍设计可以理解为 \"能够访问\", 并对一个系统或实体是有利的, 其侧重于使身体残障, 或有特殊需要, 或要依赖辅助技术的人群能够访问 Web。然后, 研究和开发无障碍设计对每个人都带来了好处。无障碍设计不应该和可用性混淆。 大多数情况下, 可用性是指产品(如: 设备, 服务, 或者环境)能在特定的环境下被特定的用户使用, 来高效地实现制定目标。无障碍设计和通用性设计是息息相关的。通用型设计是指产品的创造过程中, 产品对人们是可用的, 并尽可能最大范围覆盖各能力范围内的人群和各种情形下的操作, 即对所有人是可访问的(无论他们访问 Web 是否有障碍)。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/state-of-the-art-javascript-in-2016.html",
            "title": "2016年JavaScript技术栈展望",
            "description": "\n如果你正在筹划新的前端项目或者重构现有项目，那么你需要认识到现在的前端开发环境已经今非昔比，这其中有太多的选择了：React、Flux、Angular、Aurelia、Mocha、Jasmine、Babel、TypeScript、Flow…… 它们的本意是将开发简单化，却无形中提高了学习成本，也给未来项目的维护带来了不确定性。好在这一现象正在退热，优胜劣汰，优秀的项目慢慢沉淀下来，开发方式也越来越清晰。有些开发者正在尝试使用基于上述技术的框架进行开发，也在一定程度上减少了学习成本。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/array-part-5.html",
            "title": "JavaScript学习笔记：数组的concat()、slice()和splice()方法",
            "description": "\nJavaScript为操作已经包含在数组中的项提供了很多方法。比如push()、pop()、shift()和unshift()实现数组的增删操作、sort()和reverse()对数组项进行排序操作。今天学习操作数组的其他方法：concat()、slice()和splice()。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/myth-busting-css-animations-vs-javascript.html",
            "title": "【转载】消除疑问：CSS动画 VS. JavaScript",
            "description": "\n曾经某个时期，大多数开发者使用 jQuery 给浏览器中的元素添加动画。让这个淡化，让那个扩大，很简单。随着互动的项目越来越复杂，移动设备的大量增加，表现性能变得越来越重要。Flash 被抛弃，有天赋的动画开发者使用 HTML5 去实现过去从未实现的效果。他们需要更好的工具去开发复杂的动画序列并获得最好的性能。jQuery 并不能够做到。浏览器日渐成熟的同时也开始提供了一些解决方案。最被广泛接受的方案是使用 CSS 动画（以及 Transitions）。几年中，它成为了业内的热门话题，在各种研讨会上，“硬件加速”和“移动端友好”之类的说法总是不绝于耳。基于 JavaScript 的动画总是被当做过时的甚至是“肮脏的”。但是真的是这样吗？\n "
        },
        {
            "link": "https://www.w3cplus.com/workflow/How-to-lint-your-css-with-stylelint.html",
            "title": "使用stylelint对CSS/Sass做代码审查",
            "description": "\n对样式审查？很少人会这么做吧，但实际上开发者应该有这样的态度，尤其是不同团队多人开发时，这一点尤为重要。在本文中，我将陈述两点：一是为什么我们需要对样式进行审查，二是如何将审查工具融合到整体的构建流程中（适用于 CSS，也适用于 Sass)。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/sticky-footers.html",
            "title": "CSS秘密花园： Sticky footers",
            "description": "\n在网页设计中，Sticky footers设计是最古老和最常见的效果之一，大多数人都曾经经历过。它可以概括如下：如果页面内容不够长的时候，页脚块粘贴在视窗底部；如果内容足够长时，页脚块会被内容向下推送。这种效果不仅是无处不在，很受欢迎，而且实现起来看上去也非常容易。但实际上实现起来要比预期花的时间更多。此外，在CSS2.1中的解决方案中几乎都要给页脚设置一个固定高度。这是很脆弱的，很少是可行的。实际上实现这个效果过于复杂，而且还需要增加特定的标记和一些Hack手段。在CSS2.1中受到一些限制，但使用现代CSS，我们能把这个效果做得更好，那要如何做呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/how-to-randomize-shuffle-a-javascript-array.html",
            "title": "JavaScript学习笔记：数组随机排序",
            "description": "\nJavaScript中提供了sort()和reverse()方法对数组项重新排序。但很多时候这两个方法无法满足我们实际业务的需求，比如说扑克牌游戏中的随机洗牌。在这篇文章一起来学习如何完成洗牌的效果，以及一些有关于数组随机排序的相关知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/web-animation.html",
            "title": " Web Animation 制作指南",
            "description": "\nWeb Animation (Web动画)在Web中的运用越来越广泛，但共制作(开发)并不是件易事。这里将主要总结一下有关于Web Animation制作相关的知识，以供给初次接触动画制作的同学有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/workflow/gulp-tutorial-11-production-build-server-and-jekyll.html",
            "title": "Gulp系列教程：产品构建，预览和Jekyll",
            "description": "\n这是Gulp系列教程的第十一部分。今天我将编写生产代码构建任务，设置一个服务器来浏览生产代码并用Jekyll来创建生产站点。开发过程中我使用default这个 Gulp.js任务来运行开发服务器，构建资源和监听改变。对于生产构建过程我需要另一个入口点。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/vertical-centering.html",
            "title": "CSS秘密花园： 垂直居中",
            "description": "\n让一个元素水平居中对于CSS来说非常简单：如果是一个内联元素，我们可以在他的父元素上设置text-align:center;；如果是一个块元素，我们可以使用margin:auto;。然而，只要一想到让一个元素垂直居中，让人死的心都有了。多年来，垂直居中已成为CSS的不朽神话，也是前端专业人士群体中的一个内部笑话。\n "
        },
        {
            "link": "https://www.w3cplus.com/animation/controlling-css-animations-transitions-javascript.html",
            "title": "【转载】如何使用JavaScript控制CSS Animations和Transitions",
            "description": "\nZach邮件跟我说，上Stack Overflow这类的论坛，他经常碰到一些关于JavaScript控制CSS 动画的问题，又提供给我几个例子。我很早就打算写一些关于这方面的文章，所以很高兴让Zach提出来并促使我写了这个教程。有时候Web开发人员认为CSS的动画比JavaScript的动画更难理解。虽然CSS动画有其局限性，但它的性能比大多数JavaScript库更加高效，因为它可以借助硬件加速啊！其效果绝对可以超出我们的预期。CSS animations和transitions再加上点JavaScript就可以实现硬件加速动画，而且其交互效果比大多数JavaScript库更高效。\nSo,让我们快点开始吧！小伙伴们都等不及了！\n "
        },
        {
            "link": "https://www.w3cplus.com/css/media-query-units.html",
            "title": "媒体查询--PX,EM or REM?",
            "description": "\n你是否思考过对于媒体查询你应该使用px,em还是rem？我也产生过同样的问题，并且目前为止，我还是没有明确的答案。一年之前，我第一次创建 mappy-breakpoint 仓库时，我一直使用rem单位。之后一次和Sam Richard谈话之后，我开始转向使用em,因为我并没有发现两者之间的区别。关于媒体查询，除了em和rem,常用单位还有像素。自从现在所有浏览器存在像素缩放问题，我想知道像素是否还可以用于媒体查询。这周，我打算弄明白两者之间的区别。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/fluid-background-fixed-content.html",
            "title": "CSS秘密花园： 流体背景，固定内容",
            "description": "\n在过去的几年中，有种网页设计趋热是越来越受欢迎：这就是我所说的“自适应的背景，固定宽度的内容”。让我们思考一下这个例子中使用的margin:auto。这个margin的值等于视窗一半的宽度减去页面内容一半宽度值。因为视窗宽度我们不知道他具体有多大的值，所以他的一半宽度只能用百分比来计算(假设其祖先元素没有显式的设置宽度)，在这个示例中，可以使用50% - 450px来表达。在CSS Values and Units Level 3定义了一个calc()函数，允许我们做一些简单的数学表达式运算。\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/array-part-2.html",
            "title": " JavaScript学习笔记：检测数组方法",
            "description": "\n很多时候我们需要对JavaScript中数据类型(Function、String、Number、Undefined、Boolean和Object)做判断。在JavaScript中提供了typeof操作符可以对这些常用的数据类型做判断。但要使用typeof来判断数据是不是一个数组，就不起作用了。那在实际生产中要如何来检测数据是不是一个数组呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/javascript/array-part-1.html",
            "title": "JavaScript学习笔记：数组",
            "description": "\n数组(Array)是JavaScript最常用类型之一。初学者也最容易将数组(Array)和对象(Object)混淆，而且和其它语言中的数组又有着相当大的区别。作为一位初学者，为了能理清楚数组，把自己学习过程中做了一些笔记。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/html5-form-validation-with-the-pattern-attribute.html",
            "title": "pattern--HTML5的表单验证属性",
            "description": "\n在本教程中我们将探索 HTML 的pattern属性，用来帮助我们制定自定义表单验证的方式。表单验证对一个网站的安全性，以及可用性至关重要。验证过程就是在表单提交之前判断输入值是否匹配了正确的格式。例如，如果我们要在一个输入框内输入电子邮件地址，该值一定要是一个有效的电子邮件地址；应该以一个字母或数字开头，然后是@符号，最后以一个域名结束。HTML5规范对于一些新的input类型，如email、url、tel,也做出了一些更为简易的验证，并且也被打包成了预定义的验证。当给定的值不符合预期的格式时，这些输入类型就会抛出一条错误的消息从而阻止提交。\n "
        },
        {
            "link": "https://www.w3cplus.com/css4/css-element-function.html",
            "title": "CSS element()函数",
            "description": "\n七月份我写了一篇有关于先进的CSS filters技术,比如说backdrop-filter和filter()的特性。今天我想分享一个更牛逼的CSS特性。但是在分享之前让大家先知道，这个特性到目前为止只有Firefox浏览器支持，而且其他浏览器还没有表示要支持这个特性。当然，有可能后面会支持这个特性，但这并不影响我们一起对这个特性的探讨。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-modules.html",
            "title": "CSS模块",
            "description": "\n如果让你选出一个近期CSS发展的转折点，你很可能会选2014年11月NationJS大会上Christopher Chedeau关于“CSS in JS”的分享。那个时刻是个分水岭，一系列不同的想法像经历过高能碰撞一样在各自方向上螺旋上升。例如，React Style, jsxstyle 和 Radium 是目前在React中写样式的三个最新，最好，最可行的方法并且所有的参考资料都在它们的项目Readme中。如果发明是对于相邻可能性的一种探索，那么Christopher的责任是让许许多多的可能性更加靠近。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/structuring-grouping-referencing-in-svg.html",
            "title": "SVG中的结构化、分组和引用元素",
            "description": "\nSVG有自己结构化文档的方式。通过某些SVG元素，我们可以在文档中定义、分组以及引用对象。这些元素使得元件重用变得简单，而且还保持了代码的简洁性和可读性。在这篇文章中我们将讲解这些元素，并指出它们之间的区别，以及每个元素各自的优势。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/css-coding-tips.html",
            "title": "CSS秘密花园： CSS 编码技巧",
            "description": "\n第一篇整理了有关于W3C标准规范的阐述，让大家对W3C组织有了更进一步的了解。今天整理了第二篇文章，这篇文章主要介绍了在编写CSS时有何技巧，在实际编码中如何注重这些细节。比如CSS属性的简写、响应式设计中的一些注意事项以及我们在实际开发中要不要使用CSS预处理器等。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/the-font-face-dilemma.html",
            "title": " @font-face的困境",
            "description": "\n最近在互联风上有关于Web字体的性能表现讨论的越来越多。自定义的Web字体使用虽然还在持续增长，但是没有过多的人考虑其实际性能。基本的@font-face使用方法至使用户加载字体受到阻塞。我去了解了@font-face以及寻找问题所在，并且探索改善字体加载性能，使使用Web字体的性能更好，加载字体更流畅。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/web-standards-friend-or-foe.html",
            "title": "CSS秘密花园：Web 标准是友是敌？",
            "description": "\n《CSS Secrets》是@Lea Verou最新著作，这本书讲解了有关于CSS中一些小秘密。是CSSer值得一读的一本书，经过一段时间的阅读，我、@南北和@彦子一起将在W3cplus发布一系列相关的读后感，与大家一起分享。在这篇文章主要介绍了有关于Web标准(W3C)一些科普知识，让刚刚接触的同学对W3C有一个更完整的了解。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/using-making-sense-of-clip-path.html",
            "title": "理解Clip Path",
            "description": "\n在教学过程中的一个很重要的部分是，学生们通常都有很多非常新鲜的想法。而我们则倾向于思考要如何完成一项任务，也因此错过了很多可用的而且很酷的新技术。看看我们训练营第一个星期的项目，是一个简单的单页网站，用于演示对HTML和CSS的理解：使用语义化的标记语言和CSS来实现样式。我们的其中一个学生，Heather Banks，她曾经作为我的学生part-time参与过HTML/CSS课程，想要复制一个在Squarespace上看到的效果，周围的div元素似乎有被剪裁。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/debugging-css-keyframe-animations.html",
            "title": "调试 CSS Keyframe 动画",
            "description": "\n学会语法就可以制作 CSS 动画，但是要想做出动感、美观的动画，仅会语法是不够的。动画直接关系到用户体验，因此我们需要改进代码，从而找到正确的触发时机并掌握调试动画的方法。经过一番研究之后，我总结了一些有用的工具和方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/css-vs-svg-shapes-and-arbitrarily-shaped-ui-components.html",
            "title": "CSS vs. SVG:任意图形UI组件",
            "description": "\n在这个系列教程的前两篇文章中，我们比较了CSS和SVG创建图形文本、复选框和单选按钮的技术与效果。在这篇文章中将介绍CSS和SVG对比技术中的另一个技术——创建图形UI组件的技术。具体地说，我们将要讨论的是如何创建圆形菜单效果，因为这是非矩形UI组件的典型案例。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/smarter-sass-mixins-null.html",
            "title": "Sass 混合宏灵活传参的秘技——Null",
            "description": "\n在 Sass 混合宏中，我们可以向其传递参数列表，便于快速地配置相关属性。如果定义的混合宏定义了参数，在实际调用就需要为每个参灵敏传递一个合理的值，否则就会出现错误提示。这往往强迫开发者为非必须的变量传值，甚至重置非必要的初始值。那么，怎么样才能避免必须为每一个变量传值 呢？这就是这篇文章要介绍的相关知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/create-svg-sprite-sheet.html",
            "title": "SVG Sprite",
            "description": "\nSprite(雪碧图)在Web运用中已不是新技术，但大部分同学都还停留在位图的Sprite运用，比如.png图的合成。而这种技术对于现在的Web页面而言并不完美，比如位图在Retina屏幕带来的图标不清晰等现像，是我们技术人员必须面对的一件事情。而今天要说的，就是如何避开使用位图制作Sprite，来适应所有屏幕的显示。而这种技术就是SVG的Sprite来替代早期的位图Sprite。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/centering-css-complete-guide.html",
            "title": "CSS居中完整指南",
            "description": "\n垂直居中、水平居中或者说水平垂直居中的方案很多种，但在实际当中，不管是具体业务或者入职面试，很多同学都有失足之处。那么使用CSS实现居中效果困难吗？显然不是。实际上有许多方法可以实现居中效果，但在具体情况中，我们往往无法判断哪种方法最合适。@Chris Coyier整理了一篇有关于居中的实现方法的文章，可以说这篇文章涵盖了各式各样的居中方法，希望这篇文章能帮你解决选择困难症~\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/animated-hamburger-icons.html",
            "title": "6个Hamburger图标动画",
            "description": "\n我用了CSS和一点JavaScript来演示如何制作Hamburger 图标动画。在前面的文章中，我把我对导航栏菜单（也被成为\"Hamburger图标\"）的动画灵感发布出来。结果收到了不少粉丝的称赞，我先谢谢你们了。我决定在这方面下多点功夫，于是我写了一系列不同的动画实现方式。在这片文章中，你将会看到6个不同\"Hamburger\"动画的增强版。\n "
        },
        {
            "link": "https://www.w3cplus.com/framework/bootstrap-tabs-play-nice-with-masonry.html",
            "title": "Bootstrap选项卡与Masonry插件的完美结合",
            "description": "\nBootstrap 是最流行的前端框架之一。在你的项目中使用Bootstrap,你就可以很快的实现响应式的网页。如果你尝试将Masonry和Bootstrap提供的众多JavaScript组件之一的选项卡组件一起使用，你将会发现许多讨厌的行为。我遇到过，而本文主要关注这个问题是什么和你要如何来解决这个问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/quantity-ordering-with-css.html",
            "title": "CSS中的数量查询",
            "description": "\nCSS的数量查询是一个先进的概念，对于新手来说可能有点难或者蛋疼。然而，当我们理解清楚了CSS3的伪类选择器，并且能运用自如，那么理解文章介绍的数量查询并不是复杂的事情。而且这样的工具将会越来越多，比如CSS的预处理器和后处理器都具备了这方面的功能。有了CSS的数量查询这个新概念和功能，我们在页面中就可以根据数量来选择到匹配的元素。如果你感兴趣，不仿自己跟着这篇文章尝试一下。你会有更深入的体会。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/styling-svg-use-content-css.html",
            "title": "用CSS给SVG <use>的内容添加样式",
            "description": "\nSVG图形的一个最常见用例是图标系统，其中最常用的SVG sprite技术就是使用SVG<use> 元素在文档中任意位置“实例化”图标。使用<use>元素实例化图标或任何其它的SVG元素或图像，给元素添加样式时经常会碰到一些问题。这篇文章的目的是尽可能给你介绍一些方法来解决：使用<use>引入的内容添加样式受限的问题。但是在开始之前，我们先快速浏览一下SVG的主要结构和分组元素，然后慢慢进入use的世界中，以及shadow DOM，然后重回CSS的怀抱。我们会逐步讲解为什么给<use>内容添加样式会比较麻烦，以及有什么好的解决方案。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/creating-responsive-shapes-with-clip-path.html",
            "title": " 打破盒子模式的限制，使用Clip-Path创建响应式图形",
            "description": "\nCSS的clip-path属性是你改变传统单调的盒子布局，走向响应式设计的通行证。你将开始摆脱条条框框，自由地在您的网页上使用六边形、星形和八边形等等进行设计。一旦你真正开始使用clip-path，你可以生成的形状是无限多的，只需要简单地调整几个值即可。虽然这篇文章的重点是使用CSSclip-path完成多边形裁剪，但是所有的demo都提供了内联SVG的参考，这是为了能额外获得Firefox的支持。只要你使用过CSSclip-path创建响应图形，生成响应式的SVG裁剪图形是很容易的。我们后面再详细说说。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/keeping-css-short-with-currentcolor.html",
            "title": " currentColor让CSS更简短",
            "description": "\n其实currentColor已经出现了有一段时间了，但我是几个月前在阅读Dudley Storey的文章时才听说了currentColor的。Dudley Storey指出currentColor的浏览器 (包括IE9+)支持是非常好的。这对于我把它用于生产已经是非常足够的了，而且我非常惊讶地发现这个关键字其实非常好用：它有助于让CSS代码变得更简洁和智能。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/the-self-aware-sass-mixin.html",
            "title": "Sass 的自意识混合宏",
            "description": "\n几天前的一个晚上，我在 Up Front Berlin 上就过去几年 Sass 的某些特性谈了谈自己的使用方法。点击这里可以查看当时的幻灯片。但就我个人而言，更乐意发表几篇笔记，深入地探讨相关的问题——本文就取材自这些笔记中的一些片段。我所探讨的焦点在 map 这种数据类型上，特别是使用 @content，@at-root 和 unique-id() 等指令合并 maps 所实现的奇妙方法。其中之一就是混合宏的设计模式，这一设计模式通过使用 @extend 指令和占位符选择器来解决 Sass 的一些实际问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/centering-with-sass.html",
            "title": "使用Sass制作居中效果",
            "description": "\n虽然使用 CSS 创建居中效果需要耍一些花招，特别是垂直居中效果，但我认为由此生出的诋毁，对于 CSS 则是不公平的。实际上我们有太多的方式使用 CSS 创建居中效果了，而且作为一名前端开发者，你真的有必要对其中的原理了解一二。写这篇文章的目的不是为了向各位解释这些方法的工作原理，而是介绍将这些方法编写为 Sass mixin 的方式，继而将它们复用到各类项目中。如果你还不熟悉使用 CSS 创建居中效果的方法，我建议你仔细阅读以下这篇文章：Centering In CSS: A Complete Guide。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-images-101-part-4-srcset-width-descriptors.html",
            "title": "响应式图片101(四)：srcset宽度描述符",
            "description": "\n在响应式图片101系列教程中的第三篇中，我们学习了显示密度描述，并且总结出它们适合用于固定宽度图片，但是对于自适应图片有所不足。伸缩使图片就需要用到srcset的宽度描述符。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/twitter-fave.html",
            "title": "Twitter上的点赞动画",
            "description": "\n推特最近更新了他们的点赞按钮，使用了全新的动画，而这个动画使用一组动画来实现的而不是依赖于CSS的 transitions。今天使用CSS动画的steps方法来重建这个动画。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/spheres.html",
            "title": "CSS3制作球体",
            "description": "\n这篇文章通过示例一步一步的告诉大家如何使用CSS来创建3D球体效果。并且如何利用CSS的box-shadow和渐变来给3D球体添加一些光泽效果，让球体更具像是在一个3D空间。并且配合CSS的animation让整个球体运动起来。通过上面的示例再次证明了，运用好了box-shadow和渐变能制作出各种各样的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/svg-viewport.html",
            "title": "SVG画布，坐标系统，视窗",
            "description": "\n当你在屏幕上看SVG图像时，你是通过SVG视窗来看到画布的，所以其实你只看到了画布的一部分。画布和视窗是既相互独立又相互联系的概念，它们之间的关系很容易混淆，导致有时会有预料之外的结果。你只有弄明白了它们之间的关系，才知道如何去控制它们。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/extending-the-color-cascade-with-the-css-currentcolor-variable.html",
            "title": "使用CSS的currentColor变量扩展颜色级联",
            "description": "\n如果你有使用Sass或LESS，你可能已经在你的样式表中使用过变量了，也知道它们确实非常有用。如果你没有使用预处理器，那么你就可能会好奇这到底是怎么一回事，为什么变量会如此受欢迎，它们为何会这么有用。在这篇文章中，我们先大概讲一下为什么变量如此有用，然后再认识一下另一个特殊的变量：currentColor。\n "
        },
        {
            "link": "https://www.w3cplus.com/how-to-become-a-great-front-end-engineer.html",
            "title": "[转载]如何成为一名卓越的前端工程师",
            "description": "\n这篇文章是@勾三股四根据@Philip Walton的《How to Become a Great Front-End Engineer》一文翻译的，看了译文觉得很有启发，特意将译文转载到此与大家一起分享。希望大家能通过这篇文章找到方向，将自己打造成一名卓越的前端攻城师。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/web-icons.html",
            "title": "Web中的图标",
            "description": "\n随着时代的变迁与技术的不断的更新，在当今这个时代，Web中的图标(Icons)不再仅仅是局限于<img>。除了<img>直接调用Icons文件之外，还有Sprites(俗称雪碧图)、Icon Font(字体图标)、SVG Icon等等。今天我们就来一起探讨一下这些方法在Web中实现Icon的利弊。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/why-the-svg-filter-is-awesome.html",
            "title": "SVG滤镜的艺术以及它为什么这么棒 ",
            "description": "\n经过近20年的发展，如今的网页排版，以其高密度的显示以及OpenType功能的支持，离现实世界的印刷排版仅是一步之遥。但是平面设计还是有一个领域，我们还在不断地fall back到使用位图，而不是使用单纯的文本：字体显示，如说明性的、绚丽的、戏剧性的、俏皮的、试验性的或料想不到的艺术字母。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/svg-art-direction-using-viewbox.html",
            "title": " Art-Directing SVG图像viewBox属性",
            "description": "\nSVG的viewBox属性是SVG最强大的特性之一。掌握好这个属性可以让你的SVG技能更上一层楼。特别是考虑到几个主要的SVG sprite技术也是依赖这个属性来工作的。因为viewBox属性可以用来裁剪和扩展SVG画布，它可以用于art-directing的SVG——使用它来裁剪SVG中你想要展示的区域。在这篇文章中，我想要就我们如何使用它来提一些建议，帮助你节省一些时间来做它，然后展示viewBox属性在CSS中的重要性，希望本文能够成为一个实际案例，能帮助推动这个旧的SVGWG提案的前进。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/r-i-p-rem-viva-css-reference-pixel.html",
            "title": "Rem VS Px",
            "description": "\n在网络中充满了资源告诉你用相对长度em和rem来代替像素，因为它们会使你的设计更容易。几乎我所知道的所有的前端工程师（包括我自己）多年来都盲目的追随这些指示，这在行业中也变成了一个约定俗成的标准。最近我做了一些调查研究，完全改变了我对这两个相对单位的看法。从现在开始我将不会再使用rem并且只会在非常特殊的用例中才会使用em。在这篇文章中我将分享我的观察结果，希望可以说服你结束我们挚爱的rem单位，最终没有回退的使它进入我们的工具（鉴于IE8死的慢），但是变得毫无用处支持更受欢迎的CSS参考像素。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/9-basic-principles-of-responsive-web-design.html",
            "title": "响应式网页设计的9条基本原则",
            "description": "\n响应式网页设计是针对多屏幕问题的一个很好的解决方案，但从印刷的视角来看有点困难。没有固定的页面尺寸，没有毫米或英寸，没有任何的物理限制，无从下手。为了desktop和mobile单独使用像素设计的方法也成为了过去，因为越来越多的设备都可以打开网站。因此，我们需要弄清楚响应式网页设计的一些基本原则，接受流体网页，而不是与之相抗。为了让它保持简单，我们将着眼于布局（是的，响应式比它更复杂，如果你想了解更多，这是一个很好的开端。）\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-images-101-part-3-srcset-display-density.html",
            "title": "响应式图片101(三)：图片分辨率",
            "description": "\n自从苹果发布带retina显示屏的iPhone 4，网页设计人员一直在找一个处理高分屏的方案。于是引入了srcset和它的显示密度。首先提醒大家，显示密度是一种分辨率切换使用情况。当我们解决分辨率切换问题时，我们需要使用srcset。我们想要使用srcset的原因是它让浏览器可以选择。当使用<picture>元素提供的media属性时，实际上我们在告诉浏览器必须使用哪个图片。这对于艺术切换很有效。遇到分辨率切换的情况时，浏览器知道哪张图片显示效果最好。它可以根据网络情况或用户行为等因素来做决定。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/what-no-one-told-you-about-z-index.html",
            "title": "没人告诉你关于z-index的一些事",
            "description": "\n关于z-index的问题是很多程序员都不知道它是如何起作用的。说起来不难，但是大部分人并没有花时间去看规范，这往往会照成严重的后果。你不信？那就一起来看看下面的问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/performance-tools.html",
            "title": "性能工具",
            "description": "\n嗨，各位，又到了周末总结时间！得益于大量的 Grunt 和 Gulp 插件，我们可以轻松实现网站数据的可视化，虽然深入理解这些工具还比较困难，但分门别类的将它们列出来，也是很有帮助的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/a-visual-guide-to-css3-flexbox-properties.html",
            "title": "图解CSS3 Flexbox属性",
            "description": "\nFlexbox布局官方称之为CSS Flexible Box布局模块,他是CSS3中的一种新的布局模式。Flexbox可以控制未知容器元素的对齐方式，排列方向，排列顺序等，甚至是在未知大小的容器也能这样做。Flex容器的主要特点是能够修改其子元素（Flex item）的宽度或高度，使其在不同的屏幕尺寸中填补可用的空间。许多设计人员和开发人员发现使用Flexbox来布局更容易，可以使用更少的代码，更简单的方式实现更复杂的布局，也使整个开发过程更为简单。Flexbox布局算法基于水平或垂直的块或行内元素来布局。Flexbox布局常用于小的应用程序组件之中，而CSS Grid布局模块将应用于大规模的布局之中。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/float-center.html",
            "title": " 使用CSS伪元素模拟float:center效果",
            "description": "\n网页上实现float:left或者float:right效果并不是件困难的事情，但一直无法有一个类似于float:center的效果。就是浮动居中。就算是顶尖的CSSer要实现这样的效果也是一件非常困难的事情。那么这篇文章，将向大家展示了如何使用伪元素来模拟一个浮动居中的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/multiple-borders.html",
            "title": "CSS秘密花园：多边框",
            "description": "\nBackgrounds & Borders Level 3 还是一份草案的时候，CSS WG 就在是否支持多重边框的问题进行了大量的探讨，就像是讨论多重背景图片一样。不幸的是，当时认为多重边框的用处并不大，即使需要也可以使用border-image属性来模拟。不过，WG显然忘记了在 CSS 代码中灵活地调整边框，才是我们需要的，现在开发者只能使用一些Hack手段来模拟多重边框，比如使用多重元素的嵌套来模拟多重边框。现在，我将告诉你一些更优秀的方法，无需使用多余的标签即可实现多重边框。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/what-is-vertical-align.html",
            "title": "vertical-align",
            "description": "\nvertical-align 是 CSS 中的一个常见属性，但是当你第一次学习和使用它的时候，往往会很困惑，所以我觉得有必要深入了解它的用法。最常见的使用方式就像下面这样：img { vertical-align: middle;}。从这里可以看到，vertical-align 属性被应用到了 img 标签上。img 标签是naturally inline elements,，它们可以嵌入到文本之中，而 vertical-align 属性就是用来控制它们相对于所在行的对齐方式。在我的印象中，开发者使用 vertical-align 最大困惑就是在块级元素上设置该属性不会有任何效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/pure-css-content-filter.html",
            "title": "纯CSS实现内容过滤",
            "description": "\n内容过滤是一个在Web上常见的一个功能，特别是在电商网站上，为了让用户过滤内容，仅显示符合自己的要求的内容。当初实现这样的一个功能，需要依赖于JavaScript或者jQuery插件来完成，所幸的事，今天我们可以仅使用CSS来实现一个类似的功能，当然比使用JavaScript做的功能简单一些，但这种案例可以拓展我们的思路。感兴趣的同学，不仿自己动手做做。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/how-to-create-a-css3-progress-bar.html",
            "title": "如何用纯CSS3制作进度条",
            "description": "\n进度条经常运用于网页，即使我们意识到不是所有的东西都将瞬间被加载完成，这些进度条用于提醒使用者关于网页上具体的任务进程，譬如上传，下载，加载应用程序等。以前如果想要创建一个进度条的动画效果，没有使用JavaScript是不可能实现的。然而感谢CSS3的出现，我们现在能够在div里执行动画，添加梯度和彩色元素。事实上，HTML5为实现此目的也创建了一个特殊的进度条元素。\n当你看完这个教程，你将会知道怎样使用纯CSS创建一个有平面动画效果的进度条：无需Flash，无需图片，无需JavaScript。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/flexbox-adventures.html",
            "title": "探索Flexbox",
            "description": "\nFlexbox最大的优点是计算空间能力强，尤其是当对一个容器里未知数量的子项目进行布局时。更具体来说，当给导航栏或者网格布局时，它们所需的空间有可能远超过现在计算的数值。想象一下在CMS里面当用户增删导航栏的项目时，既不想更改样式，又要填充其空间。你甚至可以用它同时计算不同类型的单元。对于不熟悉Flexbox的人来说，在CSS里它就是一种计算并分布空间的智能布局模式，同时也解决了一些困扰多年的布局问题以及hack。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-images-101-part-2-img-required.html",
            "title": "响应式图片101(二)：图片加载",
            "description": "\n我们需要的响应式图片解决方案的主要原因之一是<img>元素功能不足。它只有一个src属性，只能加载一张图片资源，但是我们需要加载多个资源。既然如此，你可能会很惊讶怎么我们还在讨论<img>元素而不是其他新东西例如<picture>和srcset。不管采用哪种响应式图片方案，<img>元素必不可少。<img>元素在所有的内联响应式图片解决方案中都饱受诟病。我喜欢把img当做一个添加和应用所有响应式图片规则的盒子。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/translucent-borders.html",
            "title": "CSS秘密花园：透明边框",
            "description": "\n虽然在border-color上能运用rgba()、hsla()设置边框为半透明或完全透明，如果元素设置了背景颜色或背景图片的时候，会直接影响边框的透明颜色效果。特别是，要看到边框底下的内容时。造成这个现象是由于背景图片会延伸到边框底部。要解决这一问题，可以通过CSS3的background-clip来修正。@Chris Coyier早在2010年的时候就在CSS-Tricks详细介绍过这方面的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-blend-modes-part-1.html",
            "title": "CSS Blend Modes(Part1)",
            "description": "\n在现代浏览器中可以使用mix-blend-mode和background-blend-mode属性实现Photoshop中的图层的混合模式。属性值有lighten、multiply和hard-light等，这些属性在CSS中运用效果和Adobe Photoshop效果完全一样。即使每天都在Photoshop中使用它们，但了解混合模式的人相对较少。在这篇文章中，我将介绍基本的混合模式是什么，它们是如何工作的？\n "
        },
        {
            "link": "https://www.w3cplus.com/framework/grid-system-comparison-bootstrap-vs-foundation.html",
            "title": "Bootstrap3和Foundation5的网格系统比较",
            "description": "\nBootstrap和Foundation是我最喜欢的两个前端框架，尤其是在快速开发网站的原型上。它们都提供了随时可用的组件，加快了我的工作流程。除了一些细小差别，在我看来它们大部分的基本特征都是类似。在这篇文章里，我将介绍它们网格的基本构造。首先，我将会向你展示它们是如何构建的，描述它们的主要部件，以及它们对不同屏幕的大小表现出的差异。然后，我将通过一个真实例子的实践来帮助你增添知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/building-simple-app-using-ionic-advanced-html5-mobile-app-framework.html",
            "title": "一个先进的App框架:使用Ionic创建一个简单的APP",
            "description": "\n自Hybrid Mobile技术发展以来，Web开发者转到移动开发的人数大大增加了。Hybrid Mobile开发技术使得一个Web开发者能够去开发一个运行在多个平台上的移动应用。完全不用去学习相应的平台语言和使用已经存在的技术。Hybrid Mobile技术已经发展了很多，有很多不同类型的平台存在，比如说PhoneGap和Titanium。一个值得考虑的Hybrid Mobile开发新平台就是Ionic。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/how-to-keep-your-site-fast-for-mobile-friendly.html",
            "title": "如何让你的移动端网站更快",
            "description": "\nCindy Krum 最近发表了一篇非常值得一读的文章：《9 Things You Need to Know About Google's Mobile-Friendly Update》，强烈建议在阅读本文前理解一下该文的思想。已经准备好了？那我们开始吧。为了在 4 月 21 号前迅速优化为移动端网站，最简单的方法就是牺牲一些性能。但是谷歌曾经多次提醒我们，站点的响应性能是非常重要的搜索权重点，比如 2010关于桌面端 和 2013 关于移动端 的这两篇文章。在本文中，我将会讲述一下最佳实践方案，希望你在创建或重构设计时牢记这些经验。此外，建议你精读谷歌关于移动友好型站点的指导文档。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/unit-testing-for-sass-with-sassaby.html",
            "title": "使用Sassaby对Sass进行单元测试",
            "description": "\n在Wealthfront我们使用Sass编写所有CSS样式。Sass是一个强大的CSS预处理器，它使得用户可以利用编程语言中的常见特性，但是脱离了原生CSS。使用Sass变量，条件语句，循环和函数，可以让你在大型前端代码库中编写可扩展易维护的CSS。在Wealthfront我们对待测试这件事非常认真。作为使用所有Sass特性的先驱，尤其是可复用函数，我们需要一个方式来保证Sass代码的独立测试。因此我们开发并开源了Sassaby，一个为Sass编写的单元测试库。在这篇文章中我将详细描述一些引领我们至此的思考过程并且列举一些Wealthfront代码库中的例子来展示Sassaby的部分特性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/simplify-your-stylesheets-with-the-magical-css-viewport-units.html",
            "title": "CSS中如何使用视窗单位",
            "description": "\n视窗(Viewport)单位已经有了好几年了，但我们并没有看到它被经常使用。它们现在正在被所有的主流浏览器所支持并提供独特的功能使它在特定情况下非常有用，特别是那些涉及响应式的设计。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/advanced-css-filters.html",
            "title": "高级CSS filters",
            "description": "\n在iOS系统上常常能看到高斯模糊(Gaussian Blur)效果，而这种效果早期使用CSS来实现是较为痛苦的一件事情。其实，早上2011年，浏览器就开始对CSS filters规范有所支持。也就是说在2011年浏览器就可以实现Filters效果。但这种效果基本上都只运用在SVG上(只有SVG支持Filter效果)，而且只有Firefox浏览器支持，并且只能运用在HTML上。这也造就CSS要实现Filters效果是非常蛋疼的一件事情。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/watch.html",
            "title": "苹果表动画",
            "description": "\n随着苹果表的大量生产，我想，用CSS来实现拨号动画的时候到了。在这篇文章中，我们将使用keyframe动画和一点小技巧来实现苹果标表盘进度条动画。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-images-101-definitions.html",
            "title": "响应式图片101(一)：定义",
            "description": "\n过去这些年，我们写了不少关于响应式图片的文章。如今既然响应式图片已经运用在浏览器里了，似乎也是时候回顾和总结一些入门指南给那些刚刚开始探索响应式图片的同学。因此，我们推出一个新系列叫做响应式图片101，在里面我们会谈到为什么需要响应式图片以及如何选择正确的响应式图片解决方案。让我们深入学习吧！\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/pseudo-element-roundup.html",
            "title": "大放异彩的伪元素——可以做什么？",
            "description": "\n伪元素:before 和 :after可以做的东西是相当惊人的。对于页面上的每一个元素，你拥有了两个更灵活的、而且可以完成其它HTML元素都能完成的东西的元素。它们让一大堆有趣的设计成为可能，而且不会对你的语义标签产生负面影响。这里有一大堆关于这些有趣的效果的示例，你想看的话就接着往下看吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/more-control-over-text-decoration.html",
            "title": "更好利用text-decoration属性",
            "description": "\nMarie Mosley和他的朋友刚刚在Almanac改动了text-decoration的属性。你可能了解这个属性。例如，很多浏览器在链接处默认text-decoration: underline即添加下划线，当然，你也可以设置 text-decoration: none删除下划线。但你有可能不知道这个属性还可以做很多事情，并且使用各种子属性可以实现更多细致的样式。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/svg-shapes-lines.html",
            "title": "SVG基础——如何创建简单的图形和线条",
            "description": "\n上周我开始了SVG的系列探讨，并通过不同的方法将SVG嵌入到HTML页面中。因为需要让示例能够在你的屏幕上显示，所以我创建了一个绿色的矩形。创建矩形的代码并不难理解，我并不打算详细讲解，所以现在来讲一下你能够创建的其它形状吧。我之前有大概介绍了一些简单的SVG图形，但是我觉得我还是需要把它们再过一遍，因为我之前理解得也不够全面，所以再复习一遍也可以帮助我更好地理解。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/adding-appeal-to-your-animations-on-the-web.html",
            "title": "给你的网页添加动画效果",
            "description": "\n当我们使用CSS3动画时，我们经常讨论如何使用过渡，动画等实战方法。然而动画的强大之处不是集中在单个动画是如何工作的，而是多个动画结合起来，创造出令人震撼的效果。良好的动画设计可以使我们的作品脱颖而出。Disney的 动画的12个基本原则 定义“感染力”为“一个演员的迷人之处。” 它是描述如何使用虚实，风格，和动画的物质叠加起来创建生动的角色，使得观众觉得真实而有趣。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-layers.html",
            "title": "CSS分层",
            "description": "\n随着CSS的发展，使用CSS有语义化的命名约定和CSS层的分离，将有助于它的可扩展性，性能的提高和代码的组织管理。在我前面的文章中讨论很多关于CSS的问题都可以通过使用一个适当的CSS策略来避免。在这篇文章里，我将着重于讨论使用一种方法或者一个命名规则所带来的好处。这里有很多可供使用的前端方法和命名规则，每个都有自己的优缺点。在几乎所有的案例中CSS被分割成更易于管理的代码“块”。CSS的这种分割方式定义了每一种方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/wwdc15.html",
            "title": "WWDC 2015动画效果",
            "description": "\n每年，苹果都会召开一次重大的会议。WWDC(苹果开发者大会)是iOS开发者和OSX开发者学习苹果先进高科技和移动设备与桌面软件新概念的好机会。每一年的这个时候，他们都会制造出很多新创意，今年，我被一个用简单圆圈和形状制作出来的图标所惊艳，于是我决定用HTML和CSS来实现它。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/designing-simple-pie-charts-with-css.html",
            "title": "用CSS和SVG制作饼图",
            "description": "\n饼图，即使是最简单的只有两种颜色的形式，用Web技术创建也并不简单，尽管都是一些常见的信息内容，从简单的统计到进度条指标还有计时器。通常是使用外部图像编辑器来分别为多个值创建多个图像来实现，或是使用大型的JavaScript框架来设计更复杂的图表。尽管这个东西并不像它曾经看起来那么难以实现，但是也没有什么直接并且简单的方法。但是，现在已经有很多更好、更易于维护的方式来实现它。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/svg-files-from-illustrator-to-the-web.html",
            "title": "SVG文件：从Illustrator导文件到Web",
            "description": "\n可缩放矢量图形（SVG）是早在1998年就已经有的一种矢量图像格式。它总是和Web一起发展，但是直到现在才开始赶上Web发展的步伐。如今我们已经不能否认SVG和Web的相关性，所以让我们来学习一下从Illustrator导出SVG文件到Web浏览器的基础知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/introduction-css-will-change-property.html",
            "title": "关于CSS的will-change属性的介绍",
            "description": "\n在这篇文章中，我们将研究CSS中的will-change这个属性，研究它是什么，何时、如何使用它以及如何不使用它。这儿有许多关于wil-change的技术文章，所以在这篇文章中，我将参考大量的这些资源，并且在文章的末尾编辑一份列表。通过一些简单例子，这篇文章将作为重要部分的概述。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/high-performance-html.html",
            "title": "高性能 HTML",
            "description": "\n在阅读本文之前，你是怎样优化网页的呢？大多数开发者的焦点集中于 JavaScript、图片、服务器配置、文件压缩合并，甚至是 CSS。虽然 HTML 是前端技术的核心之一，但却一直没有得到应有的重视。HTML 的体积日渐臃肿。目前，全球访问量前 100 的网站每个页面大概有 40kB 的大小，类似亚马逊和雅虎这样的网站，甚至每个页面包含了数千行的 HTML 代码。最近，youtube 主页的 HTML 代码量甚至达到了惊人的 3.5K 行（翻译本文时已达到了 4.8K 行）。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-font-sizing.html",
            "title": "CSS的font-size属性",
            "description": "\n有几种不同的方法可以在CSS中声明字体大小。总的来说，这些单位分为两类——相对和绝对。**绝对单位**（大多）是固定的，并且涉及到一些物理的测量。他们一旦被声明，将不能通过改变其他元素的字体大小来改变他的大小。**相对单位**没有一个客观的测量。相反，它们的实际大小是通过父元素的尺寸来确定的。这意味着他们的大小可以通过改变相关元素的大小来改变。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html",
            "title": "理解CSS中BFC",
            "description": "\nBFC(Block Formatting Context)是Web页面中盒模型布局的CSS渲染模式。它的定位体系属于常规文档流。摘自W3C：浮动，绝对定位元素，inline-blocks, table-cells, table-captions,和overflow的值不为visible的元素，（除了这个值已经被传到了视口的时候）将创建一个新的块级格式化上下文。上面的引述几乎总结了一个BFC是怎样形成的。但是让我们以另一种方式来重新定义以便能更好的去理解。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/creating-a-collection-of-css3-animated-pre-loaders.html",
            "title": "CSS3创建加载动画效果",
            "description": "\n加载动画在网页设计中是很常见的。用户们都希望网页加载又快又流畅而不是盯着屏幕苦等，而加载动画能够在内容加载完成前给用户视觉反馈，从而能够吸引用户而不让他们直接放弃继续浏览你的网站。\n "
        },
        {
            "link": "https://www.w3cplus.com/html/how-to-use-jade.html",
            "title": "Jade的使用",
            "description": "\n如果你熟悉 Sublime Text 和 Emmet 的组合，那么 Jade 也会是你的菜。模板引擎这个术语听起来太过于高大上了，私下里我更喜欢称它们是 HTML 预处理语言，非常类似 Sass 之于 CSS —— 不过相比起 Sass 操纵 CSS 的强大力量，Jade 对 HTML 的影响只能说本本分分，没有什么激进之处，当然，这并不是坏事。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/caret-mixin.html",
            "title": " 如何通过Sass将工具转换成可用的混合宏",
            "description": "\n为了提高码农的开发效率，现在在线上有很多在线小工具，这些小工具可以帮助大家快速实现自己需要的效果，并且可以生成可用代码。前几天看到一个制作三角的小工具，尝试着使用Sass来将其转换成可用的混合宏。尝试成功，来说说怎么实现的。其实只要你有时间，很多小工具都可以用类似的方法来实现。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/getting-started-with-sass-part-2.html",
            "title": "开始使用Sass(Part2)",
            "description": "\n在本系列文章的第一部分，我简单介绍了Sass，一种CSS的预处理器。我展示了如何在Codekit中创建一个工程来编写Sass文件，并且介绍了一些Sass的语言格式，关于partials，变量，注释和错误。在第二部分，我们将要深入的研究一下变量和进行变量运算以实现垂直节奏。我也将谈谈使CSS更加容易阅读和维护的Sass的嵌套规则。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/left-and-right.html",
            "title": "实现两列等宽布局的几种方法",
            "description": "\n当你想实现两列等宽，左边一些内容，右边一些内容时，基本上都需要在一个容器的内部设置两个高度相等的列。每一面正好占用容器的一半，并且可以明显的区分他们。在CSS中有很多方法都可以实现，那么来看看如何用多种方法实现这种两列等宽布局。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/understanding-variable-scope-in-sass.html",
            "title": "理解Sass中变量作用域",
            "description": "\n在这篇文章中我们将一起深入探讨Sass的变量和变量作用域。变量作用域的描述是根据上下来定义和在哪使用变量。首先，我们将介绍Sass作用域范围。然后，将解释两个用在变量值中标签，这两个标签非常有用。最后将简单介绍可用的函数，用来检查是否存在一个变量。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-only-raindrops-on-window-effect.html",
            "title": "纯CSS写的小雨打在窗户上效果",
            "description": "\n华灯初上，窗外的雨淅淅沥沥飘打在窗户的玻璃之上。站在室内的你，望着雨中的夜色，是不是让你增添几分惆帐。似乎如此的场景只有在诗中才会出现。那么今天我们一起来用CSS技术来描绘这样的一个场景。这里仅是用CSS技术来演示这样的一个场景，可能并不太实用。然而这是一个探索CSS新功能的最佳机会。可以让你尝试使用一些新特性和新工具。并且逐渐将在工作中实践。在制作窗口雨滴效果，将使用到HAML和Sass。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/css-vs-svg-styling-checkboxes-and-radio-buttons.html",
            "title": "CSS vs SVG: 美化复选框和单选按钮",
            "description": "\n这是有关于CSS和SVG技术对比的系列文章第二篇，目的是通过示例解释两者的利弊，更好的帮助大家在Web制作中解决常见设计问题时能做出更好的选择。在上一篇文章中，我们讨论了使用CSS和SVG创建带纹理的文本效果，并得到结论是：目前阶段，使用SVG比使用CSS做更方便，更强大。在这篇文章中，我们将处理自定义的复选框和单选按钮的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/better-browser-input-events.html",
            "title": "浏览器输入事件：我们可以做的比点击更好么？",
            "description": "\n响应用户输入可以说是我们界面开发的核心。为了构建响应式Web产品，理解触摸，鼠标，指针，键盘如何和浏览器一起工作是关键。你很有可能已经在移动浏览器上经历了300毫秒的延迟或者在纠结于触摸滚动导致页面卡顿。在这篇文章中，我们将介绍事件级联并且利用这些知识来实现一个支持多种输入法的点击事件而不违反像Opera Mini这些代理浏览器事件规则。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/write-to-front-end-developer-interview.html",
            "title": "写给前端面试者",
            "description": "\n不管是刚毕业踏入社会的还是在职场久经奋战的，都经历过被面这一环节。当然也有很多同学开始在面人，为自己的团队选择优秀的血液。而我也是属于这一类，这些年都有在帮公司或朋友的团队物色人才和面试同学。今年在手淘也一样，在给同学面试过程中，让我开始在思考，而且思考了很久，所以这几天静下来写了这篇文章，希望这篇文章对于刚毕业的大学生或者还在继续参加工作面试的同学有所帮助。在这篇文章中，将不涉及任何的面试题，我只想和大家聊聊面试者与被面者之间的感受。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-layout-modules.html",
            "title": "CSS 布局模块",
            "description": "\n在众多浏览器刚刚支持 CSS 的时候，我就已经开始使用它了，并且应该算是最早采用 CSS 进行页面布局的开发者之一了。那时候，浏览器之间的兼容性虽然不好，但我仍然热衷于尝试层出不穷的新特性。最近几年在 CSS 领域，我们看到了许多重大进展。其中，web 字体、渐变、阴影和媒体查询已经成为了我们日常工作流的必备工具。CSS 布局的未来看起来一片大好。在这篇文章中，我将会介绍 CSS 规范中一些激动人心的布局模块。在未来，我们可以更有效地实现网格布局，更轻松地创建等高列或者均匀分配内容到整个页面。类似 Adobe 的公司往往熟悉布局设计的细节，借助它们的帮助来制定相关规范，我们就能更准确地控制页面在浏览器上的显示方式，同时避免对页面内容的影响。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/css-vs-svg-graphical-text.html",
            "title": "CSS vs. SVG:图形文本的效果",
            "description": "\n这篇文章是探索有关于CSS和SVG技术的系列文章第一篇，通过例子来阐述CSS和SVG相关技术的比较。因为大家对SVG有一定的偏见，这个系列文章只是为了证明SVG解决Web上的某些设计问题。因为它是自然图像。但从客观的角度来看，我们要考虑每个技术的利弊，找出何时何地使用CSS或SVG更好。在这篇文章中，我们将复习一些使用CSS或SVG创建图形文本的技术和相关影响。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/trigger-css-animation-scroll.html",
            "title": "滚动条触发CSS3动画",
            "description": "\n在这篇教程中，我将为你介绍如何在页面滚动时触发CSS动画。这种效果使用JavaScript和CSS就能做到。Jeet Grid System website 就是使用这种小技巧的例子，当你向下滚动的时候，CSS的transform、animation就被触发了。想要达到这种目的，有很多Javascript/jQuery 插件可以用，比如WOW,在这篇教程中，我将为你展示如何不适用插件做到这种效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/what-a-css-code-review-might-look-like.html",
            "title": "CSS代码审查可能会是什么样子",
            "description": "\n许多编程语言在部署之前会有代码审查。 无论是快速过一遍，或者深度审查，又或者是完整的单元测试，代码审查都会让我们在发布代码时更有自信。我开始琢磨CSS代码审查会是什么样子。 CSS有很多种书写方式，“最好的方式”通常是因项目而论。 我这样说，绝对不是要写一篇教条的文章，而是为讲CSS发布之前从何处着手审查做铺垫。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/css-vs-svg-the-final-roundup.html",
            "title": "CSS vs SVG: 最后一节(上部分)",
            "description": "\n这是CSS技术和SVG技术对比系列教程中最后一篇。本文选取了几个CSS和SVG的解决方案，而不是一个解决方案——使用CSS和SVG实现。有关于解决方案的每个细节已经有很多这方面的优秀文章，如果你感兴趣的话，可以阅读有关于这个系列的所有文章。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/viewport-vs-percentage-units.html",
            "title": "视窗单位 vs 百分比单位",
            "description": "\n在我的关于CSS字体大小的文章中，我写了关于（相对的）新的视窗单位。这些单位vw,vh,vmin,和vmax都是基于浏览器视窗(Viewport)的大小的。因为它们的实际大小是根据视窗(Viewport)大小改变的，对于响应式设计中这使它们成为很好的单位。虽然在我以前的文章中我反对使用这些单位定义字体大小，但是用它们定义布局元素是非常有用的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/a-guide-to-flexbox-new.html",
            "title": "一个完整的Flexbox指南",
            "description": "\nFlexbox布局（Flexible Box）模块(目前处于W3C工作草案)旨在提供一个更佳有效的布局方式，更好的控制项目的对齐和自由分配容器空间，即使它们的大小是未知的或动态的。因此得其名\"flex\"。本文是根据CSS-Tricks整理的一篇《A Complete Guide to Flexbox》和W3C中文兴趣小组翻译的Flexbox规范整理。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/theming-form-elements-sass.html",
            "title": "使用 Sass 美化表单控件",
            "description": "\n表单控件在网页设计中无疑是占有重要地位的。由于表单控件是用户频繁使用到的页面元素，所以有必要使用 Sass 来快速美化项目中的表单控件。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-images-part-1-using-srcset.html",
            "title": "Responsive Image:使用srcset",
            "description": "\n今天给大家介绍有关于响应式设计中的一个新东西，现在也比较流行：响应式图像。RWD不是一个新话题，但实现它的方法并不轻松，在实现过程当中充满了陷阱。尤其是当RWD涉及到图片的处理时，有很多问题还有待于解决。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/how-floating-works.html",
            "title": "float是如何工作的",
            "description": "\n虽然现在很少使用浮动，但在某些情况下，浮动是唯一可行的解决方案。偶尔会觉得很沮丧，因为我觉得浮动应该起作用但是它并没有。所以我决定研究下浮动的工作原理以及如何正确的使用浮动。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/5-useful-sass-snippets.html",
            "title": "Sass中五个有用的代码片段",
            "description": "\n使用Sass，其中最喜欢的就是Sass的mixin和function功能。他们能自动化的重复使用一段CSS代码或功能以及更好的维护CSS。这些功能让人实在是折服。但我常常发现许多开发人员为一个简单的任务创建一个复杂的系统，比如管理一个字体堆栈或颜色方案。这些设置和使用都让人感到非常的繁琐。在这篇文章中，我将解释这些自动化实现的功能。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/when-to-use-em-vs-rem.html",
            "title": "何时使用 Em 与 Rem",
            "description": "\n你可能已经很熟练使用这两个灵活的单位，但你可能不完全了解何时使用 rem ，何时使用 em。 本教程将帮你弄清楚!\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/when-responsive-images-get-ugly.html",
            "title": "当响应式图片变丑时应该如何处理",
            "description": "\n我结束了最近的“如何使用<picture>和srcset”教程，不知道你们是否也看过。给大家呈现了一些简单的知识来达到很好的教学目的，却没有让你为更多的不寻常的应用程序遇到的难看的效果做处理。我遇到过一些比较冷僻的例子和需要当心的怪异模式，也发现了一些上面说的不寻常的应用程序。可能他们可以帮到你。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/7-css-units-you-might-not-know-about.html",
            "title": "七个你可能不了解的CSS单位",
            "description": "\n我们很容易无法摆脱的使用我们所熟悉的CSS技术，当新的问题出现，这样会使我们处于不利的地位。随着Web继续的发展，对新的解决方案的需求也会继续增大。因此，作为网页设计师和前端开发人员，我们别无选择，只有去了解我们的工具集并且熟悉它。这意味着我们还要了解一些特殊的工具-那些不经常使用的，但是当需要它们的时候，它们恰恰是最正确的工具。今天，我将要向你介绍一些你以前可能不知道的CSS工具。这些工具都是计量单位，就像像素或者相对单位,但是很可能你从来没听说过它们！让我们一探究竟吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/components-in-webapp.html",
            "title": "[转载]2015前端组件化框架之路",
            "description": "\nWeb应用的组件化是一个很复杂的话题。在大型软件中，组件化是一种共识，它一方面提高了开发效率，另一方面降低了维护成本。但是在Web前端这个领域，并没有很通用的组件模式，因为缺少一个大家都能认同的实现方式，所以很多框架/库都实现了自己的组件化方式。前端圈最热衷于造轮子了，没有哪个别的领域能出现这么混乱而欣欣向荣的景象。这一方面说明前端领域的创造力很旺盛，另一方面却说明了基础设施是不完善的。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/svg-fill-stroke.html",
            "title": "SVG基础——填充和描边",
            "description": "\n过去几周我讲解了可缩放矢量图形(SVG)的一些基础知识。首先，我展示了如何在HTML中嵌入SVG，接着讲解了如何创建SVG预定义的基础图形。为了让创建的图形显示出来，我在这两篇文章中都使用了填充和描边属性。今天我想要详细讲讲填充和描边以及它们的一些相关的属性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/baymax.html",
            "title": " 使用CSS画个大白(●—●)",
            "description": "\n这一次我们将使用CSS来画个超能陆战队里面大白的头像。我们的做法是在一个元素上，使用CSS动态改变背景图的位置，并且加上一些线性效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/front-end-engineering-part-1.html",
            "title": " [转载]前端工程——基础篇",
            "description": "\n不知道你的团队如何定义前端开发，据我所知，时至今日仍然有很多团队会把前端开发归类为产品或者设计岗位，虽然身份之争多少有些无谓，但我对这种偏见还是心存芥蒂，酝酿了许久，决定写一个系列的文章，试着从工程的角度系统的介绍一下我对前端，尤其是Web前端的理解。只要我们还把自己的工作看作为一项软件开发活动，那么我相信读过下面的内容你也一定会有所共鸣。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html",
            "title": "如何更专业的使用Chrome开发者工具",
            "description": "\n顾名思义Chrome开发工具就是一个工具，它允许Web开发人员可以通过浏览器应用程序干预和操作Web页面，也可以通过这个工具调试和测试Web页面或Web应用程序。有了这个工具，你可以做很多有趣的事情。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-hero-images.html",
            "title": "Responsive Hero Images",
            "description": "\nHero images 给响应式设计提出了独特的挑战。在最近的响应式图片核查期间，我们发现了一个独特的解决方法，一个我想要分享的方法。直到几年前，我都不熟悉Hero image这个术语。一个就职于大公司的朋友用这个术语，我不得不问这个是什么意思。我不知道这是不是一个常见的描述因为我与世隔绝了。或者这可能是大公司的术语。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/striped-backgrounds.html",
            "title": "CSS秘密花园：条纹背景",
            "description": "\n和其他视觉设计相关的媒体一样，在 Web 上各类大小、颜色、角度不同的纹理也非常流行。不过，实现这些纹理的技术却并不理想。通常，我们需要创建独立的位图，如果有需求变更的话都需要重新更改文件。有些开发者使用 SVG 替代位图，但是 SVG 仍然是一种独立的文件，而且其语法也不够友好。那么是否有一种出色的方法让我们直接在 CSS 中创建纹理呢？你会惊喜的发现，我们将在文中逐步解决这一问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/front-end-trip-on-road.html",
            "title": "前端路上的旅行",
            "description": "\n从步入社会算起到今天，风风雨雨走过了15个年头，望着天空，掐指一算，从事前端已近五个年头。也算三分之一的时间在做前端，也是从事过时间最久的一份工作。问我为什么能做这么久？其实我也时常问自己，怎么就进前端这个行当，怎么就整了五年。正如网上所言，一入前端深似海。玩了五年，或许后面还会有一个五年，两个五年，或许...... 未来的路，谁与说不清楚，我只想每天走好自己想走的路。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/inner-rounding.html",
            "title": "CSS秘密花园：内凹圆角",
            "description": "\nborder-radius属性在CSS中已经不是什么新东东。大家都知道它可以帮助大家很容易完成圆角效果。有些时候，我们只希望容器的内部边框是圆角的，但是外部轮廓线要是矩形的，要完美的实现还是需要一定的技巧的。这篇文章告诉大家如何通过数学中的勾股定理来实现内凹圆角效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/responsive-typography-with-sass-maps.html",
            "title": "使用Sass Map实现响应式排版",
            "description": "\n本来要管理Rhythm排版一致不是一件易事，响应式中的Rhythm排版就更加困难。幸运的是，Sass的Map可以更好的管理和实现响应式排版。有各种各样的方法来处理响应式排版和Vertical Rhythm，并不局限于我的建议。然而，这是我很多次工作中总结出来的经验之谈。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-secrets/flexible-background-positioning.html",
            "title": "CSS秘密花园：灵活的背景定位",
            "description": "\n在 CSS 2.1 中，只能指定图片相对左上角的偏移量，或者使用关键字定位到其他的角落。如果需要让背景图距离元素四边距有一定的偏移量，相对而言是较为麻烦。在这篇文章中，作者通过background-position新特性、修改background-origin以及calc()函数等三种方法，实现了一种灵活型的背景图定位。希望这篇文章对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/CSS3-animation.html",
            "title": " CSS动画 ",
            "description": "\n本文是为帮助您入门和熟悉CSS动画而编写的，使用它们来为您带来基于Web的接口以及为艺术带来生命。虽然W3C的CSS动画规范仍在修订中，但是如今它已经有大量的内容可以供我们使用了。对我而言，CSS动画最令人激动的事情之一是，我们可以非常轻松地使用我们已经熟悉的工具来把它们添加进我们的项目中。如果您已经精通HTML和CSS，您就不需要学习新的语言或插件来为您的项目添加动态效果了。HTML和CSS已经足够，这是一个非常大的加分！无论你只是添加一点点引人注目的设计细节，还是添加非常多的动画，都没有问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/3-tricks-for-adding-texture-to-your-text-with-css-and-svg.html",
            "title": "使用CSS和SVG制作带纹理文本的三个技巧",
            "description": "\n你也许能够熟练的使用PS对文本进行图像掩埋；一个比较好的方法是在文字上添加一些纹理或者是一个背景图片。然后把这个文本存储为图像，你就可以在你的网站上使用；但是如果可以只使用HTML和CSS来产生相同的效果不是更好吗？好消息是，确实可以！CSS介绍了background-clip 和 mask-image的属性，或许你可以使用他们来创造相似的效果，就像你用PS创造出来的那样。最重要的是，你也可以使用SVG来进行文本图像剪辑。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/fun-line-height.html",
            "title": "line-height的妙用",
            "description": "\nCSS中的line-hight属性是用来控制文本行之间的空隙的。它一般情况下没有单位的设定（如：line-height:1.4;）所以这是一个按字体尺寸的比例来计算。这对印刷版来说是一个很重要的属性。线条过低就会挤在一起，线条过高就会相距甚远，这两种情况都会降低可读性。不过你可能已经知道了这一点。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-gilt-com-selenium-edition.html",
            "title": "响应式网站Gilt.com之三：Selenium Edition!",
            "description": "\n在本系列的第二篇文章中，我的同事Greg Mazurek讲了为什么在项目使用“在选择器内使用媒体查询”。采用这种模式的好处就是在未来开发中代码可维护性更强。那么，接下来我将讨论我们如何把相同的原则应用到测试实践中来。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/species-in-pieces.html",
            "title": "[转载]纯clip-path打造的3D模型渲染器",
            "description": "\nspecies-in-pieces网站的效果让前端人员眼前一亮，我在微博上发了这样的效果，聚集了不少同学的讨论。在大知乎上也有很多同学关注这个话题。@拴萝卜的棍子在前端乱炖上发表了一篇文章，剖析了相关的技术。值得大家一读，特将此文转载到小站。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/svg-basics.html",
            "title": " SVG基础——如何使用可缩放矢量图形（SVG）",
            "description": "\n每次我讲到图像的时候，我都会提到，在可能的情况下，对于位图来说，可缩放矢量图形（SVG）都是最好的选择。上次我给别人提建议的时候，我意识到我没有自己想象中的那么了解SVG。我之前写过一两篇关于SVG的文章，但也仅是我自己实践经验的一点延伸。我打算今天开始写SVG系列的文章，接下来的几个星期我会介绍一些SVG的基础知识，还会在年尾的时候增加额外的主题来重温这一年讲解的SVG。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/getting-started-with-sass-part-1.html",
            "title": "开始使用Sass(Part1)",
            "description": "\nSass是一种CSS预处理语言，当你使用Sass这门语言时，你使用编译程序来转换Sass文件，通常以SCSS文件格式书写然后转换成CSS文件。Sass通过添加方便的函数，变量以及其他类似脚本的助手使CSS能更加快速得书写和更加简单的控制。\n起初我躲避Sass是因为它好像是针对程序员的（它的文档到处充斥着程序的专业术语），但是在我学习Sass一段时间后，我发现它不是那么的复杂。它方便的运算和函数会令程序员非常满意，以及它也加入了一些很酷的东西使我们能更快的书写CSS,这使我们的工作变得更高效。\n "
        },
        {
            "link": "https://www.w3cplus.com/desgin/7-rules-for-creating-gorgeous-ui-part-1.html",
            "title": "创造夺目UI的7条规则(第一部分)",
            "description": "\n首先，这篇文档不是给所有人看的。给谁呢？急需自己设计UI的开发者、想让自己的作品看上去比Pentagon PowerPoint、漂亮的UX设计师。或者想靠自己的UI挣钱的UX设计师。如果你曾就读过艺术学校，或者已自称为一名UI设计师，你可能会感到这篇文档a.)枯燥，b.)错误，c.)气人。没关系。你的批评都是正确的。关掉Tab页，离开即可。让我来告诉你你将从这篇文章中学到什么。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-gilt-com-block-vs-in-selector-media.html",
            "title": "响应式网站Gilt.com之二：Block vs. In-selector Media Queries",
            "description": "\n在第一篇文章中，分享了如何组织一个成功的回顾总结会议。那么在此文章中，主要讨论我们工作中所用到的技术以及如何组织媒体查询。通过实战来介绍在项目中使用块媒体查询好还是在选择器中插入媒体查询方便。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/autoprefixer-css-vender-prefixes.html",
            "title": "如何处理CSS3属性前缀",
            "description": "\n今天闲来无聊，重新来说说CSS3前缀的问题。在春节前和@一丝姐姐说起Sass中有关于gradient的mixins。姐姐说：\"为什么还要用mixin呢？为什么不使用Autoprefixer？使用Autoprefixer，只需要输入一行代码，编译器帮你做了一切，还纠结个毛mixin。\"姐姐的一句话让我汗颜，我还在思考着如何让Sass来写Gradient，或者类似这样需要带前缀的CSS3属性。也这样让我在思考，那么有了Autoprefixer这样的后处理，Sass中有关于CSS3的mixins是不是已失去了他存在的意义。带着这样的为什么？我们一起来开启今天有关于CSS3前缀的探讨。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/polylion.html",
            "title": "Polylion",
            "description": "\n有时候，你最意想不到的东西，却能获得最多的关注，正如我发表在CodePen上的多边形狮子的样例。我没有做任何超级棒的代码效果，因为我认为简单的动画效果是很容易理解的，但是最后的结果却是很棒的。在这里，我想要和你们所有人分享这个动画如何以及为什么做出来的。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-bring-change.html",
            "title": "Sass带来的变革",
            "description": "\n接触Sass差不多有一个年头了，在这一年来的时间中，也花了不少心思在Sass的学习上。同时也让自己喜欢上了Sass,目前在自己的私人项目中，我一直都在使用Sass做为前端开发，用来处理CSS。同时今年自己创建了下Sass中国网站来做Sass相关的技术分享。其实，在W3cplus站点上，已经发布了近一百篇有关于Sass方面的教程(教程有自己的学习心得、有译文，也有其他同学的使用经验分享)。也自认自己是Sass在中国的推广者，其实我也更想做为Sass在中国的布道者，让更多的人了解他，学习他，使用他。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/speed-up-your-mobile-website-with-varnish.html",
            "title": "使用 Varnish 优化移动端站点",
            "description": "\n想象一下，你刚刚发布了一篇博文，并分享到了社交网络。然后，这篇文章恰巧被大V看中再次分享了出去，立即吸引了数百粉丝的目光，引导他们涌入了你的网站。看到这么多的访客量，以及它们的评论，你内心激动不已。突然之间，你的网站就挂掉了，满屏的数据连接错误……或者假想另一种情境，你一直很努力地创业。突然有一天，一个大V在社交网络表达了对贵公司的喜爱之情，字里行间满满的赞叹。关注这个大V的粉丝心动了，又涌入了你的网站。不幸的是，点击连接后却无法进入你的网站，或者进入后无法注册用户，甚至页面相应超时，无法获取产品的序列号。尽管你在社交网络上对此非常诚恳的表达了歉意，但众多的浏览者都不会再有兴趣。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/explicit-and-implicit-grid.html",
            "title": "CSS Grid布局：显式和隐式网格线",
            "description": "\n我想通过前面几篇有关于CSS Grid布局的介绍，大家对CSS Grid Layout也略有了解吧，如果你有动手写过的话，你应该可以借助网格线制作一些布局效果出来，比如说单元格布局，合并单元格布局等。是否有一种感觉，CSS Grid Layout好强大，好灵活。是不是期待浏览器厂商早一天能支持。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/getting-started-with-sass.html",
            "title": "Sass入门",
            "description": "\n你是否一直想学Sass，但却始终没有行动？你是否是Sass的使用者，但却感觉自己只是多了一个工具？那么请继续读下去，让我们一起重温Sass的特性和另外一些很酷的东西吧。Sass (Syntactically Awesome Style Sheets)是一个CSS预处理器。Sass与CSS关系就像CoffeeScript与Javascript关系。它通过添加标记到样式表中，帮助我们更轻松惬意的书写CSS。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/css-blend-modes-with-sass.html",
            "title": "使用Sass编写CSS Blend Modes",
            "description": "\nCSS Blend Modes是CSS的一个新功能，可以将一个层和元素的背景层混合在一些。常见的是将背景图像和背景颜色混合在一起。在这篇文章中，我们将来体验一上在几个项目中使用Sass编写的一个简单的混合模式的mixin。从而学习如何使用Sass创建混合模式的mixin，并且怎么使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/why-you-should-be-excited-about-css-shapes.html",
            "title": " CSS Shapes有哪些让人兴奋之处",
            "description": "\n我最近听了JEN Simmons在 Boagworld播客的关于CSS Shapes的采访，虽然我之前已经听说过CSS Shapes好久了，但是我还没有亲自尝试过。因为某些原因，这个采访强迫我坐下来好好看一下CSS Shapes的出色之处（好吧，很大一部分原因是我认为Jen Simmons太帅了，我已经收听她的The Web Ahead一年多了，真的太精彩了）。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/designing-for-print-with-css.html",
            "title": "打印样式设计",
            "description": "\n对于Web前端开发人员来说，或许有碰到过打印页样样式的设计。说起这个或许很多同学都会想起打印样式表。但真正打印样式表要如何设计，如何制作？并没有太式人深纠。也致使很多同学在让客户打印机能更好打印Web页面时非常的痛苦。在这篇文章里，我们将探索一些已有的CSS模块，它们不是在网页浏览器中使用，而是为了解决打印和分页的问题。我将解释选择器，属性和值的作用。最后我会提供一个实际例子，你可以把它作为自己试验的基础。对于这个例子，我们需要支持这些特殊CSS。我正在用的是Prince，它是一个商业软件。然而，Prince有针对非商业使用的免费版本，是实验这些例子的好工具。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/using-object-oriented-css-with-sass.html",
            "title": "使用Sass来写OOCSS",
            "description": "\n自从2008年Nicole Sullivan提出Object-Oriented CSS(OOCSS)以来。它就成为一个领先的模块系统，用来组织你的CSS代码方式之一。\nOOCSS不同于其他组织CSS代码方法，比如SMACSS或者BEM。通过将CSS代码和结构分离让你的模块可重用。事实上，我也通常将SMACSS与OOCSS混为一谈。其实John W. Long在The Sass Way上面写了很多篇有关于CSS模块化的教程。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-gilt-com-retrospective.html",
            "title": "响应式网站Gilt.com之一：回顾&总结",
            "description": "\n响应式网站听起来并不陌生，但还是有很多同学没有实战经验，可以说听其名已久，但就从未操刀。今天开始根据Gilt团队以制作响应式Gilt.com网站为例，通过一个系列来介绍Gilt团队是如何制作一个响应式网站，碰到了什么问题？又是如何解决这些问题？首先要向大家介绍的是回顾与总结。通过回顾与总结，来理清楚整个开发过程的每个环节，更为重要的是通过这样的模式在不断提高团队的整体实力。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-grid-layout-merge-cells.html",
            "title": "CSS Grid布局：合并单元格布局",
            "description": "\n《CSS Grid布局：网格单元格布局》一文中通过一些简单的实例介绍了如何给容器定义网格，并且怎么使用网格线或者网格区域来实现单元格这样的简单的布局。在文章结尾之处也提到过，这样的单元格如同表格一样，仅仅一个个独立的单元格是无法满足一些复杂的Web布局，我们需要将多个单元格合并在一起，拼装成一个稍为复杂一点的布局。简单点说，就是由单元格慢慢过渡到具有合并单元格的布局（在脑海中想想曾经爱过的table）。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-guidelin-part-7.html",
            "title": "Sass Guidelines中文版本之七：循环、排错，工具和总结",
            "description": "\n本文是Sass Guidelines中文版本最后一篇，在这篇文章中主要涵盖了Sass中的循环处理、排错以及工具方面的使用。并且对整个指南做了一个最终总结。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/svg-coordinates.html",
            "title": "SVG系列教程：坐标系统",
            "description": "\nSVG其实相当于一块画板，然后在这块画板上绘图形，而每个画板都会有一个坐标系统。比如说画板的原始起点，绘制图形的起始点坐标，终点坐标等。这一切的一切都离开不坐标，而这些坐标就组成了一个坐标系统。在这篇文章的所要介绍就是SVG中一个关键知识点——SVG坐标。简单点理解SVG坐标就是屏幕坐标点(从技术上讲，最初的viewport坐标系统)与任何SVG元素相关联的坐标点系统（当前用户坐标系统）。例如，一个<svg>中使用<circle>绘制的一个圆，他就使用了一个标准的笛卡尔坐标系统(Cartesian Coordinate System)。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/harnessing-flexbox-for-todays-web-apps.html",
            "title": "时下Web App中的Flexbox应用",
            "description": "\n虽然语法可能比较混杂，但 Flexbox 还是名不虚传的。它创造的是可伸缩的、有弹性的、可改变视觉顺序的智能盒子。它提供了简单的CSS布局方案范例让容器总是处于垂直水平居中的位置。使用盒模型来工作是非常通用的。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/revisiting-css-preprocessors.html",
            "title": "[转载]再谈 CSS 预处理器",
            "description": "\nCSS 预处理器是什么？一般来说，它们基于 CSS 扩展了一套属于自己的 DSL，来解决我们书写 CSS 时难以解决的问题：语法不够强大，比如无法嵌套书写导致模块化开发中需要书写很多重复的选择器；没有变量和合理的样式复用机制，使得逻辑上相关的属性值必须以字面量的形式重复输出，导致难以维护。所以这就决定了 CSS 预处理器的主要目标：提供 CSS 缺失的样式层复用机制、减少冗余代码，提高样式代码的可维护性。这不是锦上添花，而恰恰是雪中送炭。网上已经有不少对比目前最主流的三个预处理器 Less、Sass 和 Stylus（按字母顺序排名）的文章了，但是似乎都不是很详细，或者内容有些过时。下面我会更详细地探讨一下这三种预处理器的特性和它们的差异。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/grid-auto-flow.html",
            "title": "CSS Grid布局：网格的流动",
            "description": "\nHTML文档中有文档流，其实在CSS Grid Layout中有网格流。简单点理解就是，在一个被显式声明为网格的容器中，其所有子元素自动被认定为网格单元格，而这些网格单元格在没有被显式设置明确位置时，浏览器将会自动为这些网格单元格的位置进行计算，按照先后顺序从左向右，或从上到下排列。在这里把这种方式称之为网格的流动。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/line-base-placement-layout.html",
            "title": "CSS Grid布局：网格单元格布局",
            "description": "\nCSS Grid布局对于我等来说就是一个全新的布局，但国外很多同行朋友已对这种布局做了全面的探知。前面花了两篇内容（《CSS Grid布局：什么是网格布局》和《CSS Grid布局：浏览器开启CSS Grid Layout》）为这篇文章做足了铺垫。或许你想知道的是如何使用？各位看官不用太急，接下来通过各种实例向大家阐述CSS Grid布局，让我们一起领略其强大的魅力。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-guidelin-part-6.html",
            "title": "Sass Guidelines中文版本之六：变量、扩展、混合宏",
            "description": "\nSass Guidelines已经整理发布了五个部分，从其相关信息、简介、命名约定与注释、项目文件管理到第五部分的响应式设计与断点管理，作者都做出相关总结与推荐性建议。这篇文章是其第六个部分，主要涵盖了Sass中的变量、扩展、混合宏和控制指令等相关的知识，希望大家会喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/the-2014-css-report.html",
            "title": "2014年CSS报告——考察如何使用CSS",
            "description": "\n很少有人针对CSS的使用做一份详细的报告，今天看到Alex McPherson的《The 2014 CSS Report:Examining how CSS is being used in the wild》一篇文章，作者通过近万个网站的CSS样式文件做分析，得出这份2014年CSS使用报告。觉得很有意义，特意将其整理到站上，让大家也了解这份报告说了哪些东西。希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/bem-modifiers-multiple-classes-vs-extend.html",
            "title": "BEM修饰符:多类名 VS Sass @extend",
            "description": "\n在编写HTML结构时，多类名的运用大家都应该有使用过，虽然这样使用能给制作带来极大的方便，但也存在一定的风险。为了更好的区分，很多时候在使用BEM的命名方式，以有让多类名在同一个元素中变得更独立性，不至于覆盖样式。但在Sass中运用BEM的时候，很多时候提倡使用@extend来扩展。那么是使用多类名更好呢？还是使用@extend扩展更强呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/html5-boilerplate.html",
            "title": "HTML 5 Boilerplate 5.0 中文文档",
            "description": "\n本文是根据HTML5 Boilerplate 官方文档所译，主要介绍了HTML5 Boilerplate的架构以及涉及到的相关知识。并且详细介绍了如何在基于HTML5 Boilerplate创建自己的项目。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/source-independence-and-layering-items.html",
            "title": "CSS Grid布局：独立源与网格的层叠顺序",
            "description": "\n最近一直在学习CSS Grid布局相关的知识与使用，虽然目前浏览器对其支持度还并不十分的友好，但我始终相信有一天，浏览器会支持，Web人员也迟早有一天能在自己的布局中使用上CSS Grid。前几天花了几节内容，介绍了CSS Grid布局中的概念、测试环境、创建单元格、合并单元、网格线创建和网格区域相关的内容。可以说这些内容都是CSS Grid布局最基础和最常用的相关知识，当然，除了这些之外，还会有其他相关的知识，今天要与大家一起探讨的就是有关于CSS Grid Layout中的独立源与网格层叠顺序。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/how-to-implement-cross-browser-svg-sprites.html",
            "title": "如何实现跨浏览器的SVG Sprites",
            "description": "\nCSS Sprites对于前端人员都比较熟悉，为了让Web网站减放Http的请求数，很多同学都常使用Sprites（国内称之为雪碧图或精灵）。但随着技术的更新，位图的Sprites已无法满足我们实际的需求了。这篇译文就用另外的一种方式，向大家阐述了Sprites——如何实现跨浏览器的SVG Sprites。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-guidelin-part-5.html",
            "title": "Sass Guidelines中文版本之五：响应式设计和断点管理",
            "description": "\n响应式设计已不是新的课题，那么Sass Guidelines中为什么也会着重花一节内容来介绍响应式与断点管理相关的内容呢？记得前段时间坛子里在讨论，媒体查询在Sass中应该是嵌套在选择器中使用，还是单独提取出来使用？如果嵌套使用，编译出来会有很多个媒体查询，那么如此一来会不会影响页面等等。那么这一节中，也主要介绍这方面的，而作者更趋向于在选择器的嵌套中来写媒体查询。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/grunt-sass-with-susy.html",
            "title": " LibSass + Susy + Grunt 整合实践",
            "description": "\n我所熟悉的每一个开发者，都急切地盼望着在开发中使用上 LibSass。当 Eric 宣布 Susy 已经可以完美融入 LibSass 的时候，我激动的跳了起来，并开始思考使用 Grunt 来创建一个构建流程。本文中我将会向你演示，我是如何配置 Grunt 来整合 LibSass 和 Susy 的。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-3-4-is-out.html",
            "title": "Sass 3.4 最新特性",
            "description": "\n仅仅在 Sass 3.3 发布几个月后，官方就放出了 3.4 版本  —— “Selective Steve”。虽然名字有点怪异，但却很准确，因为新版本的诸多特性就是关于选择器的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/how-to-enable-support-for-grid-layout-in-various-browsers.html",
            "title": "CSS Grid布局：浏览器开启CSS Grid Layout",
            "description": "\n上一篇《CSS Grid布局：什么是网格布局》中简单介绍了什么是CSS Grid Layout以及一些概念和术语，为后续学习和使用CSS Grid Layout做了一些铺垫。但浏览器对CSS Grid Layout到目前为止各浏览器厂端支持程度不一致，致使无法全面使用，就算是学习做一些测试示例都还需要做一些设置。那么在这篇文章中，将向大家介绍如何让自己的浏览器支持CSS Grid Layout模块功能。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/susy-docs.html",
            "title": "Susy 2.2 中文文档",
            "description": "\nSusy 是一款进行栅格布局的辅助工具，它让开发者摆脱了冗杂的数学计算，同时降低了样式与结构的耦合程度。它的能力正如官网的简介一样强大。感兴趣的，可以阅读此文档，做进一步的了解与学习。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/normalizing-cross-browser-flexbox-bugs.html",
            "title": "解决Flexbox跨浏览器兼容Bug",
            "description": "\nFlexbox是CSS3新增的一个功能特性，对于布局有很大方便之处。但浏览器支持力度各异，而且其规范也还在不断更新之中，也造成很多同学还不敢在实际项目中使用Flexbox的缘故。Philip Walton在他的Github中创建了Flexbugs库，用来回收Flexbox相关的Bug。主要宗旨是收集Flexbox跨浏览器存在的问题和解决方案。目标是让你使用Flexobx构建一个网站能得到你想要的效果，并且能在这里找到相应的解决方案。而这篇文章就是以创建Sticky footer布局为例，介绍了如何解决Flexbox在浏览器兼容的解决方案。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/8-tips-help-get-best-sass.html",
            "title": "编写Sass的八个技巧",
            "description": "\nSass可以编译出非常优秀的CSS样式表，或者说，这就是Sass要做的事情。有效的使用Sass可以帮助你构建出干净的有效的CSS，但如果运用不好，Sass其实会让你的CSS文件变得更大，并且添加一些不必要的和重复的CSS代码。下面一些编写Sass小技巧，可以有效帮助你编写出更好的Sass。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/15-must-know-chrome-devtools-tips-tricks.html",
            "title": "15个你不得不知道的Chorme dev tools的小技巧",
            "description": "\n谷歌浏览器如今是Web开发者们所使用的最流行的网页浏览器。伴随每六个星期一次的发布周期和不断扩大的强大的开发功能，Chrome变成了一个必须的工具。大多数可能熟悉关于chorme的许多特点，例如使用console和debugger在线编辑CSS。在这篇文章中，我们将分享15个很酷的技巧，让你能够更好的改进工作流程。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/html5forms.html",
            "title": "[转载]利用 HTML5 美化表单",
            "description": "\n对表单感兴趣的人并不多，但 HTML5 引入的一些重大改进却同时方便了创建表单的开发人员和填写表单的用户。全新的表单元素、属性、输入类型、基于浏览器的验证、CSS3 样式技术以及 FormData 对象让创建表单变得更轻松，甚至可能更富有趣味性。\n "
        },
        {
            "link": "https://www.w3cplus.com/framework/semantic-markup-foundation-5-sass.html",
            "title": "使用Foundation 5和Sass制作语义化模板",
            "description": "\n在我之前的一篇文章里，我比较了一下Foundation 5 和 Bootstrap 3的栅格系统。然而这一次，我将继续深入到Foundation的基础栅格结构。这就是说，我将给你展示如何利用它预建立的Sass mixins来做出更多语义化栅格。为了说明它，我将重建上述文章中的demo页面。首先，请先让我介绍一下在这篇文章将要使用到的项目。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-you-can-get-excited-about-in-2015.html",
            "title": "2015年CSS的几大亮点",
            "description": "\nCSS是一门不断在发展的“语言”。在这篇文章中，我们一起来看看我们可以先玩起来的一些新特性。在本文中提到的一些新特性，在个别浏览器中已得到支持。但这些功能并不一定可以立即用于生产，甚至有些还是在实验阶段。但在这里你会发现很多东西，你可以开始玩——即使仅在实验阶段。其实有好几个特性在2014年的时候W3cplus就曾有介绍过，比如CSS Shapes、calc()、CSS混合模式等。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/css-shapes-reference-boxes.html",
            "title": "十个有用的Sass Mixins",
            "description": "\nSass是世界上最成熟、最稳定、强大而又专业的CSS预处理器。我使用Sass有相当长的一段时间了。发现Sass的Mixins对于任何前端开发人员都非常有用，可以帮助前端开发人员节省很多时间，而且能更好的利用。Sass中的Mixins在实际开发中能帮助我们做非常多的事情，可以说是一劳永逸。可以将所有的Mixins放置在文件中，需要的时候直接调用即可。大家可以将自己看到的，在使用的，觉得好的Mixins收集起来。慢慢的，你将会有很多优秀的Mixins，而这些Mixins就可以帮你做很多的事情，节省很多时间，让你做更多有意义的事情。\n借着这篇译文，向各位在使用Sass的同行朋友征集Sass的Mixins和Functions代码集，大家行动起来吧，让更多的同学一起分享您的成果。\nGithubSass Meister "
        },
        {
            "link": "https://www.w3cplus.com/svg/svg-paths-curve-commands.html",
            "title": "SVG 基础——使用Curve指令创建路径",
            "description": "\n上周，我开始了关于路径的探讨,主要集中在使用不同的直线指令绘制各种直线和形状。今天我想要继续进行路径的探讨，谈谈可使用的不同的曲线指令。曲线指令比直线指令需要解释的东西更多，所以我们马上开始吧。我会假设你已经阅读了上一篇关于直线指令的文章，如果你还没阅读，最好先去看那篇。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/svg-viewport-viewbox-preserveaspectratio.html",
            "title": "[转载]理解SVG的viewport,viewBox,preserveAspectRatio",
            "description": "\nviewport、viewBox和preserveAspectRatio是SVG中基础而且必须了解的几个部分，如果这几个部分没有理解清楚，对大家今后学习SVG相关知识以及使用会带来很大障碍。这几日看到张大师(@张鑫旭)写了一篇与此相关的文章《理解SVG的viewport,viewBox,preserveAspectRatio》,特意将此文转载致此。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/using-flexbox-today.html",
            "title": "今天就用Flexbox",
            "description": "\nFlexbox让我们对过去无法真正达到的对布局的掌控更进了一层，过去我们浮动、清除浮动，与inline-block间的空格斗争，强制display:table，甚至用position:absolute来撑开内容。现在我们不需要依赖这些解决方案使得内容在不支持伸缩特性的浏览器可见。Flex的特性给我们所以构建的内容增加了一系列重要工具，但不是替代之前存在的东西，而是改进我们如今的构建方式。\n "
        },
        {
            "link": "https://www.w3cplus.com/w3cplus-2014.html",
            "title": "辞旧迎新，更上一层",
            "description": "\n随着2015年的跨年钟声的响起，2014已成为我们的过去。即将要为之奋斗的是2015。其实想在2014年写这篇总结文章，但由于最近很多事情给耽搁了，其实也有点不知道做什么样的一个总结，因为总感觉2014年就这样匆匆离我而去。有些许的伤感，或许是因为年纪越来越大的缘故吧。不过跟着一群比自己小一轮甚至更多岁数的年轻人在一起共事、一起学习，还是让自己觉得，我也还是很年轻的（可以叫我叔，但别喷我）。\n今天可算是执笔开始写这篇文章了。在继续写下去之前，我要先感谢@娜姐、@裕波和@林毅一直以来让W3cplus能在社区活动中露脸。同时也要非常感谢@w3cplus的爱好者，支持者一路以来的支持与鼓励，正因为有了你们，她才能走到现在，才能成长，才能美丽动人。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/how-to-create-project-with-sass.html",
            "title": "如何在项目中使用Sass",
            "description": "\n想想学习Sass时间也有差不多一年的光景了。在这一年来的时间中，在GitHub不断阅读Sass相关的源码。也在国外涉猎了相关的知识，也让自己初步掌握了一些Sass一些基础知识与技能，当然也让自己喜欢上了Sass，并且在国内致力于Sass的推广。希望各多的前端开发者喜欢上Sass，也希望Sass能真正为前端人员带来好处。 "
        },
        {
            "link": "https://www.w3cplus.com/svg/svg-paths-line-commands.html",
            "title": "SVG基础——使用Line指令创建路径",
            "description": "\n几个星期前在谈到基本的SVG图形时，我提到路径可以作为一个更常用的方法来创建任何形状。路径比基本图形更强大和灵活，可以用来创建任何一个基本图形。使用路径你可以创建直线和曲线，也可以把它们连接起来，组成其它的形状。你可以结合两者来创建复杂的路径和子路径。路径可以被填充、描边或者用于剪裁其他元素。它们可以同时做这三种效果甚至更多。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/svg-file-structure.html",
            "title": "SVG系列教程：SVG文件结构",
            "description": "\n在《SVG简介与嵌入HTML页面的方式》简单的介绍了什么是SVG？以及SVG图形与其它格式图像相比，优势在哪。另外介绍怎么将SVG图像应用到HTML页面，让浏览器能显示。从文中了解到，SVG图形其实就是一段XML代码，在HTML页面引用是通过引用.svg文件格式，或者直接在.html文件中放置<svg>元素。而两者最大的区别就是，独立的SVG必须添加一个XML声明。那么这篇文章要和大家一起探讨的就是SVG文件(.svg)的结构。\n "
        },
        {
            "link": "https://www.w3cplus.com/design/designer-guide-to-dpi.html",
            "title": "[转载]设计师的DPI指南",
            "description": "\n本文是为“初学者”或者作为从一开始就想要学习更多跨DPI和跨平台设计知识的中级设计师准备的序言读物。没有复杂的计算和不可分析的图表，只是按照划分直截了当地将内容呈献给读者，便于读者理解或是直接运用到设计过程中。如果你发现有错误的地方，需要了解更多细节或者有任何问题或建议，请联系sgabriel.contact@gmail.com\nTwitter, G+ 或者 Facebook\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/keep-sass-simple.html",
            "title": "保持Sass的简单",
            "description": "\n还有两个月时间，我使用Sass就有两年时间了。几乎每一天，在工作中，在家里，在项目中，都有人问我，怎么更好使用Sass。很高兴他们这么相信我，每天能为他们提供帮助，我感到非常高兴。有些需求是合理的，有些需求是烦死人的。嘿嘿，我们可以从任何地方开始。也有些是抽象的。每个人都希望使用Sass能变得更简单（其他预处理器也在做这样的事情）。包括我在内，我也一直在这么做。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/using-edge-side-includes-in-varnish.html",
            "title": "基于 Varnish ESI 的缓存控制方案",
            "description": "\n对于优化移动端的加载速度，我非常坚信适用于所有用户的优化方案，才是最佳方案。做出这一判断的出发点是因为，我们无法预知用户准确的联网方式，可能他使用的并不是手机，但却在使用手机热点的信号，或者使用的是不稳定的无线信号...\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-lists-marker.html",
            "title": "试探列表中的::marker",
            "description": "\n前几天有位同学问过一个问题，<li>元素中的子元素浮动（float:left）之后，列表的项目符号会跑到浮动元素的后面。这个问题似乎在三年前碰到过，但又有那么点不一样。后来查阅相关文档，了解到，造成这个问题就是列表中的::marker造成。虽然将来能解决，但在浏览器还没有支持这个属性之前，我们也只能另寻途径，先解决问题，感兴趣的同学可以先跟我一起初探::marker。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/transitioning-to-scss-at-scale.html",
            "title": "从 CSS 到 SCSS 的规模化过渡",
            "description": "\n有些天真的看法认为， CSS 看起来很容易理解——它没有繁多的编程结构，并且还只是一种用来描述 DOM 外观的声明式语法，而不是一种可执行语言。非常具有讽刺意味的是，功能性的缺失恰让 CSS 难以推断其效果。此外，在选择器所处位置及其处于执行状态时，开发者是不能添加脚本的，从长远来看这也增加了使用 CSS 的风险。\n "
        },
        {
            "link": "https://www.w3cplus.com/7-rules-for-creating-gorgeous-ui-part-2.html",
            "title": "创造夺目UI的7条规则(第二部分)",
            "description": "\n创造夺目UI的7条规则是一个系列文章，主要包括两个部分。总共包括七个设计规则：光来自天空、黑白优先、双倍空白、学习图片上放置文本的方法、使文本突出——或不突出、 只使用好看的字体和像艺术家一样偷师。这两篇文章在国外有关于UI设计引起很大的轰动性。特意将译文发出来与大家一起分享。最后非常感谢@李诺同学的分享。希望这两篇文章能给大家带来些许帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-shapes-reference-boxes.html",
            "title": "理解CSS Shapes的引用框",
            "description": "\nCSS Shapes是用来定义内容环绕的路径，这些路径都是通过形状函数来定义，比如：circle()、 ellipse()、 inset()或 polygon()，他们都被定位在一个虚拟盒子(virtual box)中，也就是引用框(reference box)。引用框定义了形状的坐标系统，因此它影响了形状如何绘制和定位。他有四种引用框可供选择：margin-box, padding-box, border-box和 content-box。每种引用框都会产生不同的结果。请继续往下阅读，了解他们是如何工作。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/flexboxgeng-jia-you-ya-de-webbu-ju.html",
            "title": "Flexible boxes更加优雅的Web布局",
            "description": "\nFlexible boxes layout是W3C为了更好的在网页中排版和布局而设计出来的一个模块。它用来可以处理更加复杂的布局。它本质是盒模型的延伸，它可以进一步去规范容器中子元素盒模型之间的相对关系。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/susy2-tutorial.html",
            "title": "Susy 2 入门教程",
            "description": "\nSusy 是一款优秀的辅助工具，可以让开发者更得心应手地实现各式栅格布局。官方发布 Susy 2 已经有些时间了，如果你很喜欢 Susy 1，那么相信你也一定会爱上 Susy 2——新版本的配置和使用更加灵活而富有弹性。在本文中，我将会和大家分享一些创建复杂 AG 栅格布局的经验。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/better-sass-variables.html",
            "title": "抽像命名Sass变量",
            "description": "\nPhil Karlton 认为，在计算机科学中，最大的难题之一就是：命名。这一问题在给变量命名时显得尤为突出。目前，通过使用变量处理颜色、断点和字体大小，是一个很棒的实践。更进一步，你也可以通过使用 SASS Maps 和混合宏生成动态类名。这种方式在不影响用户视觉体验的基础上，还能让你的工作更有效率。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/nesting-svgs.html",
            "title": "理解SVG坐标系统和变换： 建立新视窗",
            "description": "\n在SVG绘制的任何一个时刻，你可以通过嵌套<svg>或者使用例如<symbol>的元素来建立新的viewport和用户坐标系。在这篇文章中，我们将看一下我们如何这样做，以及这样做如何帮助我们控制SVG元素并让它们变得更加灵活（或流动）。这是SVG坐标系和变换系列的第三篇也是最后一篇文章。在第一篇中，包括了任何要理解SVG坐标系统基础的需要知道的内容；更具体的是， SVG viewport, viewBox和 preserveAspectRatio属性。在第二篇文章里，你可以了解到任何你需要了解的关于SVG系统变换的内容。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-svg-clipping.html",
            "title": "CSS和SVG中的剪切——clip-path属性和<clipPath>元素",
            "description": "\nCSS和SVG有很多共同之处。CSS有很多特性都是从SVG中引入过来的。其中就有“剪切”的特性。CSS和SVG都允许我们对一个元素进行非矩形的剪切。在这篇文章中，将介绍CSS和SVG中的剪切技术。 "
        },
        {
            "link": "https://www.w3cplus.com/css/a-primer-to-background-positioning-in-css.html",
            "title": "CSS中的background-position",
            "description": "\n为元素应用背景图片大概是CSS中最常使用的特性之一，并且有很多背景属性来让我们控制元素背景的各方面表现。元素可以有多个背景图片。如果想要应用多个背景图片，你可以为元素提供一个逗号分隔的列表值作为background-image属性，而background-position属性用于指定图片的位置。这个属性很多不同的可能值，各有不同的效果，而且一些值可能对于CSS初学者来说很陌生，值得深入研究。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/build-web-layouts-easily-susy.html",
            "title": "使用Susy构建Web布局更简单",
            "description": "\nSusy 是一款用来为网站创建栅格布局的工具，它所带来的灵活和洒脱超乎想象。无论是 5 列，14 列，还是 48 列，一切都不是问题。不等宽列？So easy。我们为什么要在浩如烟海的互联网框架库中选择 Susy？它的魅力是否就是肤浅的表面呢？在过去几个月，使用 Susy 可以说是我前端开发流程中最美好的事情。它让我们摆脱了诸多的麻烦，而且我决定要写本书分享使用经验，告诉全世界它的美丽。本文将会深入的介绍使用 Susy 创建布局的方式——任何天马行空的布局都不在话下。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/vector-graphics-sass.html",
            "title": " Sass 中的矢量图形",
            "description": "\nSass 是一个非常强大的工具，我们很多人仍在研究它的极限。我们能用它做什么，我们又能将它发挥出多大的能量？在Hugo Giraudel抛出他的想法之后，我也非常兴奋地有一个想法——2D 图形引擎。这看上去令人困惑，因为 CSS 的缘故，Sass 早已是图形领域的一部分。其实这并非是为了内容而设计样式，我想利用 Sass 一个像素一个像素地渲染图像。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/svg-transformations.html",
            "title": "理解SVG坐标系统和变换： transform属性",
            "description": "\nSVG元素可以通过缩放，移动，倾斜和旋转来变换-类似HTML元素使用CSS transform来变换。然而，当涉及到坐标系时这些变换所产生的影响必然有一定差别。在这篇文章中我们讨论SVG的transform属性和CSS属性，包括如何使用，以及你必须知道的关于SVG坐标系变换的知识。这是我写的SVG坐标系统和变换部分的第二篇。在第一篇中，包括了任何要理解SVG坐标系统基础的需要知道的内容；更具体的是， SVG viewport, viewBox 和 preserveAspectRatio 属性。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/clipping-masking-css.html",
            "title": "CSS中的剪裁和遮罩",
            "description": "\n剪裁和遮罩都是用来隐藏元素的一些部分、显示其他部分的。当然了，这两者还是有区别的。区别主要在于这几方面：他们能做的东西，不同的语法，涉及到的不同技术，是新的还是旧的，以及浏览器支持的差异。但不幸的是总是有相当多的过时信息在那儿，所以一起来看看能否解决这个问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/a-vision-for-our-sass.html",
            "title": "Sass 愿景",
            "description": "\n在最近的一个 CSS 见面会上，我向与会者提问，“有人会在日常的工作流中使用 Sass 吗？”回答结果压倒性的表示肯定——保守谨慎地使用 Sass 已经成为过去式。Sass 正迅速成长为编写 CSS 的标准方式。这真是难得的好消息！Sass 包含了诸多 CSS 规范未定义的特性，比如变量、控制指令、混合宏等。这些特性赋予了开发者强有力的工具，以应对复杂和持续更迭的样式表。Sass 的灵活性和健壮性，也足以实现开发者天马行空的创意思维。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/themed-styles-with-sass.html",
            "title": "使用Sass定制个性化样式",
            "description": "\n做为前端人员，应该有碰到类似这样的项目，在同一套的结构与内容的基础上实现不同皮肤效果。那么今天这篇译文就是介绍如何使用Sass帮助你更好、更简单的编写个性化主题样式。我并不介意你是否立即阅读本文,如果你把它加入收藏夹，并且在大脑中留有印象会更好。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/svg-coordinate-systems.html",
            "title": "理解SVG坐标系和变换：视窗,viewBox和preserveAspectRatio",
            "description": "\nSVG元素不像HTML元素一样由CSS盒模型管理。这使得我们可以更加灵活定位和变换这些元素-也许一眼看上去不太直观。然而，一旦你理解了SVG坐标系和变换，操纵SVG会非常简单并且很有意义。本篇文章中我们将讨论控制SVG坐标系的最重要的三个属性：viewport， viewBox， 和 preserveAspectRatio。接下来通过三篇文章分别向大家阐述这方面相关的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/grid-area.html",
            "title": "CSS Grid布局：网格区域",
            "description": "\n在CSS Grid Layout中除了可以使用风格线实现网格布局之外，还可以使用网格区域来实现布局。在《CSS Grid布局：网格单元格布局》和《CSS Grid布局：合并单元格布局》文中都已经领略了CSS Grid Layout中gird-area实现的单元格和合并单元格的布局，但这仅是网格布局使用较为简单、基础的应用。在这篇文章中，将和大家一起探讨CSS Grid Layout中grid-area其他的功能与使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/animation-principles-for-the-web.html",
            "title": "[转载]网页动画的十二原则",
            "description": "\n作为前端的设计师和工程师，我们用 CSS 去做样式、定位并创建出好看的网站。我们经常用 CSS 去添加页面的运动过渡效果甚至动画，但我们经常做的东西不会超过这些。动效是一个有助于访客和消费者理解我们设计的强有力工具。这里有些原则能最大限度地应用在我们的工作中。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-web.html",
            "title": "指尖的流畅体验",
            "description": "\n为了建立完整的体验，我们将 Flipboard 带到 web 端。我们在 Flipboard 所做的，在每台用户使用的设备上都拥有独立的价值:整理那些来自你最关心的主题,来源以及人的最好的故事。因此把我们的服务带到web端，也是一个合乎逻辑的延伸。当我们开始这个项目后,认识到我们需要把源自移动体验的思考搬到 web 端,试图提升 web 端的内容布局和交互。我们想达到原生应用般的精致和性能,且仍能感知到真实的浏览器。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/compositing-and-blending-in-css.html",
            "title": "CSS中的合成与混合模式",
            "description": "\n如果你是一个设计师，你很可能已经遇到或者总有一天会遇到混合效果。混合在图形和印刷设计方面是使用最频繁的效果之一。你可以通过混合文字和纹理背景来给文字添加纹理，通过把图片混合营造出图片融合的错觉，并创造出广泛而丰富多彩的效果，如果对混合控制没有达到如此精细的程度是不可能创造出这些效果的。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/svg-introduction-and-embedded-html-page.html",
            "title": "SVG系列教程：SVG简介与嵌入HTML页面的方式",
            "description": "\n随着技术向前的推进，SVG相关的讨论也越渐频繁。为了紧跟时代的步伐，我也开始步入SVG相关技术的探索与学习之中。从这篇文章开始会在W3cplus站点上陆续向大家推出有关于SVG相关的教程、译文或案例等。感兴趣的同学可以跟随着教程一起了解与学习SVG相关的知识与技巧。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/look-different-sass-architectures.html",
            "title": "流行框架的 Sass 体系结构解析",
            "description": "\n为了应对项目开发中不断增长的复杂度和整体规模，开发者有必要使用恰当的逻辑，规划 Sass 文件的结构层次。遵循公认的编程规范，有助于开发者快速融入大型项目或团队的开发流程。下面就详细解析流行框架的结构层次。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/what-is-css-grid-layout.html",
            "title": "CSS Grid布局：什么是网格布局",
            "description": "\nCSS Grid现在已经被W3C纳入到CSS3的一个布局模块当中，被称为CSS Grid Layout Module。而我们较为熟悉的还是将其想像成网格或者栅格，也就是早期的960gs。不管是网格还是栅格或者现在的CSS Grid Layout Module，我想掌握这些技术对于我们将来在Web项目中实现布局只有好处没有坏处。那么从今天开始我将和大家一起探讨CSS中的网格布局。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/styling-cross-browser-compatible-range-inputs-css.html",
            "title": "用CSS创建跨浏览器的range input",
            "description": "\n这篇文章是Daniel Stern的客座文章。Daniel和我分享了一个他做的工具叫做range.css，它用来给<input type=\"range\">创建样式。这是一件比较复杂的事情，因为它需要组合一系列的标准选择和属性以及非标准的前缀选择器和属性。我邀请Daniel对所有这些内容做一个解释。随着IE10的发布，我们给range input创建样式的能力已经得到了引人注目提高。用纯CSS实现跨浏览器兼容的range input(sliders)已经成为可能。在这篇教程中，我们用基本的range input作为例子。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/invert-color-sass.html",
            "title": "使用 Sass 实现反相滤镜效果",
            "description": "\n在理清制作固定背景的反相效果后，我脑海中自然而然地想到了，使用 Sass 让不支持滤镜的浏览器实现这种效果。Sass 本身存在一个 invert 函数，但是只能模拟出 filter: invert(100%) 的效果。我们的目标是适用于任意比例。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-counters.html",
            "title": "CSS Counters",
            "description": "\nCSS Counters其实就是一计数器，早期在CSS中计数器仅存在于ul和ol元素。如果要使用在div这样的元素上，只能通过list-style-image或者是元素的backgroud-image来实现。在CSS2.1的规范中介绍了一种新技术，允许开发人员使用伪类:after、:before或者伪元素::after、::before给任何元素创建自动递增计数器——类似于列表中的项目符号(list-style-type)。更神奇的是，可以给这些计数器设置独特样式，让其在外观上更靓丽。\n "
        },
        {
            "link": "https://www.w3cplus.com/svg/getting-started-inline-svg.html",
            "title": "inline SVG 入门指南",
            "description": "\nSVG全称为“可缩放矢量图形”，它的名字暗示着它本身的特点。SVG让我们可以将一个图形从100%放大到1000%并且完全不失真。SVG是一个基于XML并可以在SVG对象中描述不同形状和路径的文件。每一个形状和路径都由一系列的点、位置、长度、半径，等等的来组成。如果你曾经使用过任何的矢量图软件 (像 Adobe Illustrator 或 Corel Draw)，你能将你创建的矢量图轻松地输出为SVG文件。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-guidelin-part-4.html",
            "title": "Sass Guidelines中文版本之四：项目文件管理",
            "description": "\n经常会有初学者问，使用Sass时要如何管理自己项目中的文件。也有不少同行朋友针对此问题做过总结与探讨，网上相关的案例也不少，比如说很好的参照案例有：Bootstrap和Foundation等。在Sass Guidelines中也特意针对 这一部分做了详细的描述。作者将文件结构按七合一模式向大家展开介绍，并且如何与组件结合在一起管理。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-guidelin-part-3.html",
            "title": "Sass Guidelines中文版本之三：命名约定和注释",
            "description": "\n通过Sass Guidelines中文版本之一：相关信息和Sass Guidelines中文版本之二：简介的阅读，我想大家对Sass Guidelines或多或少有一点了解，如果你对此规范指南感兴趣的话，那么接下来可以阅读这篇文章，这是Sass Guidelines第三部分，主要介绍了如何在Sass编写中命名和写注释。里面提供的一些细节还是值得大家编码中注意一二的。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/introducing-am-css.html",
            "title": "引进AM-CSS属性模块",
            "description": "\n在几个月之前，我阅读了Harry Roberts写的《Grouping related classes in your markup》一文。他介绍了一个很有趣的概念——用来处理CSS类名。在这篇文章中介绍了使用[]来使用相关的属性，快速选择需要的目标元素。介绍的示例中，讨论了使用类名还是属性声明更易于一目了然选择元素。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-guidelin-part-2.html",
            "title": "Sass Guidelines中文版本之二：简介",
            "description": "\n上篇Sass Guidelines中文版本之一：相关信息主要介绍了Sass Guidelines相关的信息，那么在这一节中将进入正轨，向大家开始介绍Sass Guidelines有关于Sass的相关内容。主要介绍了为什么要一份这样的指南，其原则是什么，以及Sass的一些语法书写规范围等等。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/pushing-bem-to-the-next-level-with-sass-3-4.html",
            "title": "BEM在Sass3.4中的提升",
            "description": "\nBEM在Sass3.3中就已经实现，很容易使用，不过他还是受到一定的限制。Sass3.4的出现，其选择器功能上做了进一步的优化，所以在Sass3.3中使用BEM受到的限制在这里将不在是问题，可以通过自定义的Function做一定的处理，让BEM在Sass中更为强大。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-guidelin-part-1.html",
            "title": "Sass Guidelines中文版本之一：相关信息",
            "description": "\nSass Guidelines是法国一位前端工程师Hugo Giraudel编写的一份有关于Sass相关的规范指南。有一份规范的指南能协助您更理智的，更好维护和更好扩展Sass。而且这份指南已经翻译成多个语言版本，受到Sass爱好都的一致好评。那么在我们大中华区域，我和@南北同学一起将其译成中文，希望能对大家有所帮助。如果译得不对之处，还请多多指正\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/everything-you-need-to-know-about-sass-3-4.html",
            "title": "关于Sass3.4你应该知道的一些事情",
            "description": "\nSass3.4并不是离开Sass3.3的一个开创性版本，并没有做过多的改变，但有一些小变化还是需要留意的。这些功能在Sass3.3测试版本就有显露出一些，但后面会得到更好的细化。我们来看看这些东西，这些东西对于Sass爱好者还是非常值得期待的。 "
        },
        {
            "link": "https://www.w3cplus.com/css/css-sass-scss-compass-less-bem-smacss-oocss-acss-ccss-wtfss.html",
            "title": "CSS, Sass, SCSS, Compass, Less,BEM, SMACSS, OOCSS, ACSS, CCSS, WTFSS?",
            "description": "\n大家都说CSS学和写都简单，那么写了多年CSS的同学是否有静下来思考过，自己写CSS是有较为系统的和具有一定规范的，而不是草率的写CSS。另外就是自己写的CSS在团队中，别的同学是否能看到代码就知道您写的是什么？如果没有，那不仿看看这里提到的一些概念与思想，比如：Sass 、SCSS、LESS、BEM、SMACSS、OOCSS、ACSS和CCSS等。这里列出的，你听说过、了解过或已在运用的有几个。如果是第一次听说他们，不仿进入相关小节，了解他们是什么？\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-gilt-com-the-full-screen-modal.html",
            "title": "响应式网站Gilt.com之四：Full-Screen Modal",
            "description": "\n为了把网站Gilt.com在移动端响应，我们基于特殊行动团队确定的几种响应式模式来“响应”我们网站布局。早点确定这些模式有利于帮助我们更有信心地作出响应式相关的决定。在这第四篇响应式相关博文里，我将与你分享如何发现和实现我们确定的最热衷设计模式之一：全屏Modal!\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-mixin-placeholder.html",
            "title": "Sass:Mixin还是Placeholder",
            "description": "\n在大约一年半年前使用Sass的时候，有一件事让我花了很长的时间，那就是如何区别Sass的@mixin和%placeholder。实际上，%placeholder。在当时的情况这之下，就算是概念对我来说都是黑色地带。如果你也碰到类似的情况，不用担心，因为我会尽量的引导你。今天我们就来探究，什么时候是定义好的，什么时候是定义好的。你就会明白它们服务的目的是不一样的，不能混为一谈。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-component-10-minutes.html",
            "title": "Sass编写组件",
            "description": "\n很多开发者都认识到，在网站或应用程序的开发中使一些组件非常强大，但是这些组件开发起来并不是一件易事。今天我们就一起来探讨一下如何使用Sass来开发组件。因为讲述任何东西都没有直接拿用例来介绍更好，我建议我们要采用的示例是大家在网站或应用程序开发中几乎都有用过的，一个响应用户交互的——警告信息(也有很多人称之为“通知”)。使用Sass来创建一个处理不同类型的警告信息的组件是一个很完美的示例，同时还能提高你使用Sass的技术。所以，伙计们，还在犹豫什么，赶紧动手一试吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-regions-with-shapes-for-readability.html",
            "title": "使用CSS Shapes的Regions创建更好的阅读体验",
            "description": "\n使用CSS shape我们可以使内容“流向”非矩形区域。有时我们希望能够把内容填充到一个元素中的多个不同形状的区域内。如果你读过我之前的文章,您会知道,这可以用CSS形状,使用一个图像，这个图像用alpha透明度定义了多个形状,让浏览器提取内容并浮动到区域上。我们可以发挥创意定义形状,使文本流入多个区域,不过这样很容易地使内容几乎完全丧失可读性。\n当CSSshape会造成一个严重的可访问性问题时，不推荐使用。我们乐于使用各种创造性的布局与自定义形状,但最应该让我们铭记的是,内容是可读的,所以设计师设计吸引人的布局时，必须考虑可访问性和可读性。\n为了更好地说明这一点,我们看一个例子,这个例子中CSS shape会导致非常糟糕的阅读体验。事实上,这不是CSS shape造成的,这是设计师的决定。\n "
        },
        {
            "link": "https://www.w3cplus.com/html5/node-webkit-for-photograph.html",
            "title": "Node-Webkit配合HTML5实现拍照功能",
            "description": "\n因工作原因，最近在使用Node-Webkit做一个桌面高拍仪（摄像头）应用。这个应用本身也只是一个尝试性的东西，不太具有参考价值，就不在这里提供下载了。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/basics-css-blend-modes.html",
            "title": "CSS混合模式",
            "description": "\nBennett Feely一直在向人们展示CSS混合模式的特性方面做了很好的工作。过去，在Photoshop的帮助下，静态页面可以比使用动态内容的页面显示出更丰富的设计效果，不过，在CSS混合模式获得了更好的支持以后，这种状况将会得到改善。因为这并不是一件多么枯燥的事情，我很想看到不同的实现方式。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/shape-hover-effect-with-svg.html",
            "title": "使用SVG完成悬浮时形状样式变化的效果",
            "description": "\n在这篇教程里，我们将重新创建一个类似The Christmas Experiments网站中看到的hover样式。我们将通过SVG制作出形状，然后使用Snap.svg做出hover时的动画效果。如果你已经访问过The Christmas Experiments最新版本的网站，你可能会注意到其中Christmas calendar很酷的三角状的hover效果。那个形状其实是一个带边框的三角形。今天我会向您展示，如何使用SVG和Snap.svg做出同样的效果。我们的想法是，使用一条路径创建一个SVG，用它来表示caption的形状背景，然后在hover时改变这个路径。完成这一任务有很多种创作的可能性，今天我们将做出三个不同的示例。使用SVG的好处是，我们可以根据父容器的大小调整形状的大小，使一切都成为流动的。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/managing-relationships-between-colours-with-sass.html",
            "title": "使用Sass管理颜色",
            "description": "\n在我做过的web项目中，几乎都用到了css预处理器，这样一来，变量的使用为我们带来了极大的方便，也成为了使用css预处理器的一个主要优点。一般来说，颜色、十六进制等其他一些重复性的、难于记忆的代码片段，是最先被我们用变量存储起来的。在很多Sass或者Less的项目中，我都把颜色值和变量建立起一定的关系，变量的名字同时也描述了它们的用途，这样在项目当中就会避免一些问题，比如过分的纠结于具体实现过程。 "
        },
        {
            "link": "https://www.w3cplus.com/mobile/meta-and-link-tags-for-ratchet.html",
            "title": "Ratchet教程：meta与link标签",
            "description": "\n通过《Ratchet教程：安装》一文，大家对Ratchet有了一个初步的了解。那么从这一节开始，我们一起来开始实战。通过实战来更好的学习和了解Ratchet，更希望学习了Ratchet之后，大家在制作移动页面的时候可以高呼“so easy!”在这一节中以Rathect框架模板文件头部为主导，重新罗列了和标签在移动开发中的作用与功能。详细介绍了模板中所用到的标签功能。同时搜集了部分网上有关于这方面的介绍。希望这些标签功能对大家今后的开发有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/responsive-design-vs-mobile-website-vs-app.html",
            "title": "响应式设计、移动端网站与原生应用的优点和缺点",
            "description": "\n移动端的优化最近成了一个时髦的话题，将来也会有更多关于这方面的讨论。根据Mashable在2013年8月份发布的统计，可以得知，全球所有网站流量的17.4%都是通过移动设备来的，而这个数字在2014年将会继续增长。所以，你如果不想失去一杯羹的话，是时候步入移动端的领域了。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/ratchet-case-1.html",
            "title": "Ratchet教程：案例实战一",
            "description": "\n到目前为止，有关于Ratchet系列教程在站上总共发布了八篇，从Ratchet的安装到自动化的部署与组件概览，从项目的创建到Meta与link标签的应用，当然除了这些，还介绍了Ratchet组件是的Bar组件与列表组件。可以说，通过这几篇教程，大家对Ratchet有一个基本的了解，并且可以借助于Ratchet框架实现一些简单的移动页面。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-advanced.html",
            "title": "Sass进阶",
            "description": "\n先简单的说一下 Sass 这个东西。CSS 是一些非常基础简单得语句的组合，既然简单的语句，就不可避免的有很多重复，冗余的东西。而且没有传统编程语言变量、控制语句等高级特性，所以造成了 CSS 编写低效，往往需要通过查找替换、大量复制来修改或者编写。Sass 就是用来弥补这个缺陷，为 CSS 提供额外的高级功能，使其开发更加方便快捷，更加方便管理。所以你需要使用 Sass 的语法来编写代码，然后通过 Sass 编译成具体的 CSS 代码，然后使用。所以这里就需要学习一下 Sass 的语法。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-for-web-designers-foreword.html",
            "title": "《Sass for Web Designers》之前言",
            "description": "\n回顾计算机语言的进化史，似乎每隔几年都会诞生一个新的概念以推进计算机语言的发展。从二进制升级到指令集，指令集再升级为编译语言。基于这些不断进化的编译语言，我们又创造出了web浏览器。像HTML，CSS和JavaScript这些语言都是通过浏览器来渲染的。现在，我们再次升级这个概念的时刻来临了。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-shapes-breaking-rectangular-design.html",
            "title": "CSS Shapes：打破矩形设计的限制",
            "description": "\nHTML5和CSS3的功能完全超越5年前我们在web上所能做的事。CSS Shapes Module Level 1（CSS形状模块标准1）规范有可能打破web中矩形盒模型的限制而且将网页设计提升到新的高度。它允许元素设计成不同的形状(圆形或五边形的div)，并且用更自然的方式让文字环绕着元素（文字可以环绕着你的曲线设计而不一定要有直角边界）。本文将通过一些小演示来检测CSS Shapes的可能性，并且帮助你开始探索之旅！\n "
        },
        {
            "link": "https://www.w3cplus.com/css/how-to-set-up-a-baseline-grid.html",
            "title": "如何设置基线网络",
            "description": "\n首先，当谈到排版，我们先要了解基线是什么？维基百科是这样定义)的：在排版和书法中，基线是以字终sit底线为基础，并且向两边延伸的直线。好极了，但我为什么要忽视他呢？好希望你充满激情的去设计一个非常好看的网站。我的愚见是，一个惊人的网站的基础在于他的排版。为了让网站上的所有文本流动顺畅对齐，我们就要基于一个网格线来排版，这也就有了基线网格一说，也使基线网格有用武之处。基线将确保有一个适当的行高，这是非常重要的，它适用于任何列的布局当中。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-shapes-101.html",
            "title": "CSS Shapes 101",
            "description": "\n方块套方块:这是我们网页一直以来的样子。通过使用CSS，我们一直试图摆脱这种创建几何形状的限制,但这些形状没有影响形状内的内容,或者与页面其他元素相互影响。由Adobe在2012年中期提出的新的CSS shapes 规范 改变了这一现状。它的目标是为web设计人员提供一种新的方式，来使内容流入或者环绕在任意复杂的形状上——除了使用javascript，我们从来不曾做到这点。\n "
        },
        {
            "link": "https://www.w3cplus.com/book-comment.html",
            "title": "《图解CSS3：核心技术与案例实战》",
            "description": "\n\n\n\n本书是国内著名的Web前端专家历时2载的心血之作，根据最新的CSS3撰写，融入了作者在CSS领域多年的使用经验，旨在将本书打造成为CSS3领域最权威和实用的专业著作，供没有经验的读者系统学习，供有经验的读者参考备查。\n本书理论知识系统全面，详细讲解了选择器、边框、背景、文本、颜色、盒模型、伸缩布局盒模型、多列布局、渐变、过渡、动画、媒体、响应Web设计、Web字体等主题下涵盖的所有CSS3新特性，所有这些都巧妙地融入到案例中，而不是枯燥的理论讲解；讲解方式直观易懂，以图解的方式巧妙地展示了这些新特性；实战性强，既为每个知识点精心设计了小案例，也有综合性的大案例，所有案例都非常详尽，有功能需求分析、设计思路和完整代码，还有最终的效果展示。\n\n\nKindle电子书互动出版网京东网当当网亚马逊签名版本豆瓣书评\n\n "
        },
        {
            "link": "https://www.w3cplus.com/css/meta-tags-html-basics-best-practices.html",
            "title": "在HTML中使用meta标签的基础知识和最佳实践",
            "description": "\n元数据通常被理解为‘描述数据的数据’，在web页面中的用途之一就是使用<meta>标签。meta标签的内容一般都是表示关于HTML页面的信息，其作用是不可以被其它标签取代的。另外，meta标签还可以模拟一个HTTP响应头部（例如重定向到不同页面），同时，它还拥有像http-equiv和charset这样的属性 ，在Mozilla开发者社区中有对元数据详细的文档说明。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-regions.html",
            "title": "Css3 Regions如何工作？",
            "description": "\n在Web页面中布局要做到类似于报纸和杂志那样的生动，自由。对于任何前端人员来说都是一件头痛的事情。而偏偏很多时候设计师碍于前端人员无法实现，而不能更好的自由发挥其创意。为了使页面布局更加灵活到如印刷媒体一般,一个新的CSS3模块出现了——CSS3 regions。相比通常的在多个元素中放置内容，此模块允许内容流在页面的指定区域(regions)放置。让我们看看这个模块是如何工作的。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-3.3-source-maps.html",
            "title": "实战Sass3.3的Source Maps",
            "description": "\n新发布的Sass 3.3版本，将Source Maps正式纳入了Sass中。这也成为Sass新版本的一大亮点，一大新功能。让广大Sass爱好者可以直接在浏览器中更容易调试自己的代码和Debug相关操作。其实早在2013年七月份Umar Hansa在《Developing With Sass and Chrome DevTools》就详细介绍了如何使用Sass的Source Maps功能帮助大家在浏览器中更好的调试SCSS(或Sass)代码。今天将老调重谈，通过图解的方式向大家介绍如何在Chrome和Firefox浏览器中实现Sass3.3的Source Maps特性。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/beginner/how-to-structure-a-sass-project.html",
            "title": "【Sass初级】如何组织一个Sass项目",
            "description": "\nSass最有用的一个特性就是可以将你的样式表分隔成很多个单独的文件。然后，你可以在主样式文件中通过@import引入你所需要的.scss文件。但是你应该如何组织你的Sass项目呢？有没有分离样式文件的一个标准呢？Hugo Giraudel早前写过一篇关于这方面的教程《管理Sass项目文件结构》,今天我们一起看看John W. Long对Sass项目文件组织有何看法或经验，值得我们去学习。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/so-you-want-to-play-with-list-maps.html",
            "title": "使用list-maps将你的Sass技术水平提高到另一层次",
            "description": "\n一直以来Sass的能定义变量都是其核心功能。但随着项目的越来越庞大，越来越让你感觉管理项目的变量，和调用变量是件蛮麻烦的事情。但随着Sass3.3的出现，随着map功能的出现，我们不应该还仅停留在以前最古老的基础上使用Sass的变量，我们应该使用map的特性来管理和调用变量，让新功能帮助大家做更多的事情。特别的Lunelson的List-map中的map和list的功能的结合，将让你的Sass技术水平提高到另一个层次。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/install-ratchet.html",
            "title": "Ratchet教程——安装",
            "description": "\nRatchet是一款使用HTML、CSS和JavaScript用来制作移动网页或App的前端框架。目前最新版本是Ratchet v2.02。从今天开始我们一起来看如何使用Ratchet框架以及现成的组件制作移动网页或者app。首先向大家介绍Ratchet的环境配置与及安装。并向大家展示了使用Ratchet制作的一个简单的移动页面效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-icons.html",
            "title": "移动端重构系列7——图标",
            "description": "\n每个网站都离不开小icon的运用，因此这些icon可以让你的网站起到画龙点睛的效果。在移动端的页面上使用icon更能显出这样的功效。那移动端上运用icon又要怎么使用呢？还PC页面上使用方法一样吗？如果不是，又将怎么使用？请继续往下阅读...\n "
        },
        {
            "link": "https://www.w3cplus.com/css/viewports.html",
            "title": "viewports剖析",
            "description": "\n在这个迷你系列的文章里，我将解释viewports和多种重要的HTML标签元素的宽度是如何工作的，例如<html>标签。同样也会解释window和screen的宽度问题。第一部分主要关于桌面（pc）浏览器，基本目的在于为移动端（mobile）浏览器上，本话题的讨论创建舞台。绝大多数web开发人员已经对pc的概念有了直观的认识。mobile拥有相同的概念，但是更加复杂。如你所知，一个友好的预热将极大的帮助你理解mobile浏览器。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/foundations-sassy-styles-explained.html",
            "title": "初学Foundation之Foundation的Sass样式解释",
            "description": "\n在本教程我们将学习包含在Foundation前端框架中的灵活的Sass样式以及能够用来做些什么。Sass比CSS版本提供更多自定义特性集合，再加上有快捷方式可以简单又快速地运用在样式项目上，例如顶部工具栏。\n如果你需要搭建起Sass的Foundation开发环境，可以参考文章“使用Sass和Compass配置Foundation”（参见上篇译文：初学者学习foundation：使用sass和compass来搭建foundation开发环境）或者是Zurb官方文档。你可以通过在控制台输入命令行方式来搭建环境，然后使用Compass和Bourbon（一个简单却轻量级混合Sass库），或者只是从Github上下载单独Sass文件，然后放置这些文件在你的工程上，然后通过“import”来引用需要的文件。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/beginner/variable-naming.html",
            "title": "【Sass初级】定义好的变量名",
            "description": "\nSass中的定义变量是非常的强大的，你可以在一个地方定义好变量，在项目的多个地方使用这个定义的变量。它允许你在集中的一个地方做变化，而不需要在项目和多个文件中使用查找替换的方式来做修改。但是选择一个好的变量名是一件比较困能的事情。如果你不小心，在项目中变量很容易失控。最常见的就是你会忘记了在项目中定义了什么变量名，因为你很难记住你定义的所有变量名，这样有可能会给你在项目开发中带来不必要的挫折。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/better-solution-managing-z-index-sass.html",
            "title": "使用Sass管理z-index更好的解决方案",
            "description": "\nz-index在一个Web的应用可以说简单也可以说是复杂。特别是一个复杂的系统上要管理好多个z-index并不是件容易的事情，不过通过Sass这样的预处理器来管理会让你变得容易与简单很多。而且有关于如何使用Sass更好的管理z-index的值文章介绍如雨后春笋般的涌现，比如Jackie Balzer的Sass z-index Management for Complex Layouts，Doug Avery的Sass and z-indexes: a (slightly) better way以及Chris Coyier去年发布的Handling z-index等。今天Sass大师Hugo Giraudel在前几篇文章的基础整理了一篇使用Sass管理z-index更好的解决方案，我想这篇文章会让你受益无穷。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider.html",
            "title": "移动端重构系列13——页面切换",
            "description": "\n在前面几篇教程当中，说到切入切出的动画，一般用在panel、popup、modal等组件上的效果。但在移动端上常常会要处理页面之间的切换效果。简单的理解，类似PC端上Web页面中的Slidershow效果，也就是大家说的图片轮播效果。只不过这种效果在移动端上略做处理。接下的主要向大家介绍这方面的实现方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-slider-animation.html",
            "title": "移动端重构系列6——切入切出动画",
            "description": "\n使用APP的时候，总是能看到很多切入切出的动画效果，甚至是比这个更炫的效果。那么在H5这样的网页上，我们要怎么做这样的效果，有没有CSS实现的方法，或者说怎么让动画效果更细腻呢？在这一节中，将和大家一起探讨切入切出动画的制作。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-3.3-maptastic-maple.html",
            "title": "Sass 3.3——MAPTASTIC MAPLE",
            "description": "\n今天我们非常高兴向大家宣布Sass 3.3 (又称为MAPTASTIC MAPLE)正式发布了。有超过500个提交和35+新特性，可以说他是一个效的发布。为了更容易理解一些，我在本文中总结了一些Sass 3.3的新特性，下面我们依次来了解：\n "
        },
        {
            "link": "https://www.w3cplus.com/blogs/spring/mongo-db.html",
            "title": "学习MongoDB心得",
            "description": "\n其实写这个 MongoDB心得 的初衷和我当年整理的 js大脑图 比较一致,而且确实对于我个人而言，每个时间段还是希望要有一些整理性质的东西输出出来，分享给需要的人。这个系列题目和我自己目前在写的 yc (a fancy node develop platform) 一样，架子都很庞大，但是我还是会坚持写下去，希望感兴趣的同学多多关注。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/create-radial-progress-bar-with-jQuery-and-css3.html",
            "title": "利用jQuery和CSS实现环形进度条",
            "description": "\n进度条是Web页面中常见的一种组件，早前在《CSS3制作 Progress Bars》一文中介绍了使用CSS3制作水平进度条。但往往我们很多时候需要使用到圆形进度条。那么今天在这篇文章中由@我是霍小惑同学向大家介绍如何使用jQuery和CSS3实现圆形进度条效果。整个教程图文并茂，非常容易理解。在这里非常感谢@我是霍小惑加入w3cplus与大家一起分享。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/compose-to-a-vertical-rhythm.html",
            "title": "构建一个垂直规律",
            "description": "\n排版中的空间就如音乐中的时间。它是无法区分的，但少数的时间间隔比任意数量的选择更有意义。印刷商Robert Bringhurst曾经说过：“常规时间为音乐提供了更好的节奏”。所以在排版中提供有规律的空间比没有规律的要更具有可读性，不会让读者变得迷惘和丢失方向。在Web排版中，垂直规律(Vertical Rhythm)指的是文本的排版和间距，引导读者往下阅读主要包括三个因素：文字大小，行高和外距或者内距。所以这些因素要让垂直规律保持不变。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/pure-css-create-equal-height-column-layout-and-certical-horizontal-centers-and-sticky-footer.html",
            "title": "再谈等高列布局、水平垂直居中与置顶页脚",
            "description": "\nCSS中的等高布局、水平垂直居中以及置顶页脚(Sticky Footer)这几个效果(我喜欢把他们说成是CSS效果，而不喜欢说其是问题)并不是常陌生，而且很多同学都似乎有碰到过，也经常体验过。甚至在很多前端面试中也常被考官问到，有的时候还直接被考官给秒杀了。早前在水平垂直居中系列、八种创建等高列布局和如何将页脚固定在页面底部几篇文章中也或多或少介绍过。今天老调重谈，用几种新方法和大家探讨这几个效果，希望能帮助大家开拓思维。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/responsive-webfont-icons.html",
            "title": "响应式网页字体图标",
            "description": "\n响应式设计中主要面对的问题之一是如何缩放图标来适应用户界面，不仅仅是针对于物理尺寸，而且还需要根据屏幕的尺寸和每英寸的像素比例来显示。一般情况之下，都是通过内联块元素<img>标签来添加图标。另一种常见的技术是依赖于网格图标和状态——CSS Sprites，并将其保存为.gif或.png文件。然而，更糟糕的是图片根据响应式内容不断的放大，对于位图图像会产生锯齿，而且会越明显。更糟糕的是，CSS Sprites(雪碧图)制作的图标更无法轻意的缩放。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-maps-memoization.html",
            "title": "探索Sass3.3中的Maps(二)：Sass Maps和Memoization",
            "description": "\n在介绍Sass Maps的博客系列中，第一篇文章主要介绍了Sass3.3 引入了Sass Maps，而在第二部分（这篇文章），我将向大家阐述Sass Maps更强大用途之一：memoization。Memoization技术已经常期用于其他语言当中，以来提高性能。它涉及到一个函数结果的缓存，是这样的，如果一个函数使用相同的的参数调用两次，那么缓存的副本可以用来替代需要再次计算的值。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/custom-table-views-with-ratchet-part2.html",
            "title": "Ratchet教程：自定义列表(二)",
            "description": "\n在上一篇教程——《Ratchet教程：自定义列表》中介绍了如何依赖于Ratchet框架构建属于自己的列表。比如常见的“纯文本列表”、“带图片的列表”、“带提示信息的列表”以及“带箭头的列表”等。但我们很多时候列表不只这些风格，比如说带有Icon图标的列表就是常见的一种，比如说带有按钮和切换开头的列表等。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/background-placeholders-with-gradients.html",
            "title": "使用CSS3 Gradients创建图片占位符",
            "description": "\n图片占位符，我们最常用的方案就是留空白区域，或者使用空的div标签来模拟，甚至使用一张背景图片来做。但这些方案都不是一个完美的方案，那么什么是完美的方案呢？今天我们通过CSS3的渐变来实现图像的占位符功能，这种方案既让你的代码更为干净，而且还可以帮你减少HTTP的请求数。最后还通过使用Sass让你实现自动化功能。感兴趣的同学请点击阅读正文。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-uniform-and-center.html",
            "title": "移动端重构系列5——等分，居中等",
            "description": "\n等分，居中效果对于你来说是不是已经不是一件难事了，那么移动端的等分和居中这样的效果又要怎么来处理呢？用table还是flexbox这样的CSS3属性呢？或者说还有更好的方案，那么作者将带领你去体会移动端上是怎么实现等分、居中这些效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/understanding-responsive-web-design-cross-browser-compatibility.html",
            "title": "响应式设计：跨浏览器兼容性",
            "description": "\n在上一篇文章中，我阐述了在响应式设计中处理图像3种方案的观点，讨论了最好的解决方案,采用合适图像尺寸服务于各种尺寸的屏幕。那么，本文接下来将从另外一个角度来聊管理图像，那就是跨浏览器的兼容性。在整个网页开发过程中，尤其你想创造一个响应式的结构——一个web开发人员必须去面对一个最重要及最频繁的问题就是兼容各种浏览器。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sassy-z-index-management-for-complex-layouts.html",
            "title": "Sass管理复杂的z-index",
            "description": "\nz-index本身就是一个棘手的事情，在一个复杂的布局中管理z-index的顺序（层级）更是困难。不同的层叠顺序和内容，要跟踪他们的数字增加是很难的事情——而且他们来自CSS文件，忘了他吧！因为z-index可以造就一个UI元素可见或不可见，使您的网站的用户界面工作秩序是很微妙的。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/create-buttons-with-ratchet.html",
            "title": "Ratchet教程：Buttons组件",
            "description": "\n按钮（Buttons）在Web页中的地位不用多说，大家都知道他是非常的重要。那么继Ratchet框架中“Badges组件”之后，要给跟大家一起聊的是Ratchet框架中的Buttons组件。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/converting-your-css-project-to-sass.html",
            "title": "将你的CSS项目转换成Sass",
            "description": "\n在过去的一年里，我花了很多的时间在学习Sass知识以及提高Sass的技术水平。在与别人的交谈中，我发现从CSS项目转到CSS预处理器时，都有这样的担忧：我不知道从哪里，从什么时候开始，将CSS项目转换成Sass。有大量的文档和技术诀窍介绍使用Sass和Compass来创建一个新的项目，但考虑到如何将一个CSS项目转换成Sass项目对部分同学有所帮助的时，我整理了这样的一个教程。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/how-to-make-your-own-icon-webfont.html",
            "title": "如何制作自己的网页字体图标",
            "description": "\n网页字体图标到现在来说并不是一个新话题，大家都知道是通过@font-face来实现的。虽然有很多地方介绍如何制作属于自己的网页字体图标，但大部分都还是需要收费。让你我们这等屌丝无法接受。除了这些之外，其实还有一些制作矢量图的软件可以实现自己的图标。在这篇译文中，就详细介绍了如何使用Inkscape软件制作出自己的网页字体图标。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/a-more-modern-scale-for-web-typography.html",
            "title": "Web排版的缩放",
            "description": "\nRWD不是在新的话题。而在Web设计中，页面的排版又是设计元素中重要的部分之一。而我们平时对于Web页面更为关注的是如何布局？如何实现实现设计图效果？一旦你实现了设计的转换，并不关注其排版风格。但在RWD中，排版风格的一致化给用户带来的体验并不是很好，那么在RWD中如何让用户阅读具有一个更好的体验，我们就必须考虑在不同设备之下其排版风格的变化。那么今天在本文中我们将要讨论的是如何在响应式设计中实现不同的排版本风格，我想这个话题也是众多Web前端人员想讨论的，如查您感兴趣，欢迎进入一起讨论。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/understanding-responsive-web-design-how-to-manage-images.html",
            "title": "响应式设计：响应图像",
            "description": "\n这是《Understanding Responsive Web Design》系列教程中的第五篇。本文中，我将展示当一个web开发人员在创建响应式网站时都会遇到的典型问题：对图像的处理。或许你已知道，移动终端开发者面临的挑战是多不胜数的，使得图像适应多种屏幕尺寸无疑是最大的困难之一。现在有三种方案可供开发人员去选择开发响应式图像：与浏览器‘对抗’、放弃它、或者依赖服务器。接下来，我们去了解每种方案的优点与缺点。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/custom-table-views-with-ratchet.html",
            "title": "Ratchet教程：自定义列表",
            "description": "\n我把Ratchet框架组件中的“Table Views”称为列表。实在找不出更易理解与形象的词语，当然你也可以直接将其称为“Table Views”。我们就不纠结这个了。那么从这一节开始，我想和大家一起探讨Ratchet框架中的列表制作。当然是构建适合自己的列表。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/12-little-known-css-facts.html",
            "title": "12个很少被人知道的CSS事实",
            "description": "\nCSS不是一门很复杂的语言，但是即使你已经写css很多年了，也很有可能遇到一些新玩意儿-某些属性从来没用过，某些值从来未曾考虑，或者某些规范细则你从来不知道。我经常会遇到一些css小细节，所以我想在这片文章中和大家分享，需要承认的是，这篇文章中的很多东西并不具有实操价值，但也许你可以留作后用。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-reset-style.html",
            "title": "移动端重构系列4——重置样式",
            "description": "\n重置样式(reset)我想对于前端人员来说并不是陌生的东西，而且这样的重置样式有人喜欢用，也有人不喜欢用。偷懒的同学喜欢直接使用Normalize.css，勤快的同学喜欢在此基础上做一些调整，或者干脆写一个适合自己的重置样式。那么在移动端开发有没有必要要这样的一个重置样式呢？那我们就带着这样的一个问题开始我们今天的学习。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-popup.html",
            "title": "移动端重构系列12——popup",
            "description": "\n上一节介绍了移动端中Modal的制作，那么在实际开发当中，除了有Modal这样的弹出窗之外还有另一种弹出效果。这种效果常常被称为“Popup”。俗称“气泡”。那么在这一节中将向大家介绍移动端中的Popup实现方法。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-selector-variables.html",
            "title": "选择器使用Sass变量？",
            "description": "\nSass中最大的特点之一就是可以设置变量，可以给变量赋值，此值可以是字符串，可以是值，也可是以列表，甚至是map。在样式中可以引用这些变量，甚至在Sass指令中也可以调用这些变量。大常看到最多的一个示例就是颜色的运用，通过给颜色设置一个变量，需要更换成别的颜色时，仅仅改一个值就行了。有人探讨将变量用到选择器中。那么选择器中使用变量真的好吗？如果你不清楚是好还是不好，不仿看看这篇文章。你或许会找到你需要的答案\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/create-badges-with-ratchet.html",
            "title": "Ratchet教程：Badge组件",
            "description": "\n通过Ratchet教程的案例实战一练习之后，我想大家对Ratchet框架有了进一步的了解，或者已经能使用Ratchet框制作一些移动端的页面（也称为H5网站）。其实Ratchet框架中不仅仅包括这些东东，他还具备其他的组件。那么今天我们继续来了解Ratchet框架中的Badges(标签)。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/intermediate/avoid-nested-selectors-for-more-modular-css.html",
            "title": "【Sass中级】模块化CSS更要避免选择器嵌套",
            "description": "\n我们之前介绍了选择器嵌套过深将会带来的有关风险。该基本规则可以很好的帮助你避免一些错误选择器的嵌套。但实际上，采用此概念有一个很大的好处，让你的选择器更为干净。但当你避免嵌套主要选择器时，又将会发生什么呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/getting-into-sass-control-directives.html",
            "title": "了解Sass的控制命令",
            "description": "\n在CSS中没有逻辑的概念，所以很多程序员不太喜欢。而在CSS的预处理器语言中植入了类似程序语言的功能。比如说一些指令“@if”、“@for”、“@each”、\"@while\"等。而在Sass中也同样具有这些指令。借助这些指令可以让你编译出比\"@extend\"和\"@mixin\"更精简的CSS。那么在这篇文章中主要用来帮助一些从未接过这些指令的同学有所帮助和了解。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-blend-modes-could-be-the-next-big-thing-in-web-design.html",
            "title": "Web设计中的CSS混合模式",
            "description": "\n作为一名前端人员，对一些制作软件并不陌生，而里面的图层混合模式都略有所知。而这些混合模式要是直接应用到Web页面中，将会带来网页制作的一个变革。在2014年开始，在互联网上已经开始在讨论这个东东，并且有一个专业的名词“CSS混合模式”。而这个模式在SVG规范中得到支持，并且在CSS规范中也开始提上议程。在不久的将来，这个新特性就能在各大主流浏览器上得到应用。在文中主要介绍了CSS混合模式将是Web设计中一个重大的变化。并且我们也将陆续向大家推出CSS混合模式相关教程，希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-web-design-grid-layouts.html",
            "title": "响应式设计：自定义网格布局",
            "description": "\n在前面的文章中，我已介绍了“流布局”的特性和描述了如何使用响应式字体。在本文中，我将介绍一种应用广泛及非常著名的网格布局。网格系统其实早已应用在印刷媒体上，只是在web和mobile上的应用才发展一段时间。 "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/using-sass-maps.html",
            "title": "使用Sass Maps",
            "description": "\nSass的第三个版本给我们带来了新的数据类型，叫做map。虽然你可以不知道这个名称，但在其他的语言中我们使用过map，通常就是关联数组。换句话说，Sass的map就是用关键名匹配对应值的一个数组。不清楚为什么在CSS中为什么要使用(Sass也是CSS)，因此这篇文章将告诉你为什么？这个列表虽然不能面面俱到可以随意查找和分享其他用例。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-box-reflect.html",
            "title": "使用CSS3制作倒影",
            "description": "\n在Web制作中，有些时候需要实现一些倒影的效果。比如说，你看到一个美女，你想从另一个角度来看这个MM的风姿。在早前要实现这样的效果我们都必须借助于类似于Photoshop这样的制作图软件来实现，然后通过引入一张image。那么除了图片，我们有没有别的方法能实现呢？值得庆幸的是，到目前为之，CSS3有一个属性可以实现。那么今天我们要给大家介绍的就是这个属性的应用。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-mobile-layout.html",
            "title": "移动端重构系列3——整体布局",
            "description": "\n如果你阅读了创建空白页这篇文章，说明你创建移动端项目具有一个最基本的模板页面。在实际项目当中，仅有空白的内容肯定不切合实际，总是需要有内容的，有内容总是需要布局的。这一点和PC页面是一样的，在移动端页面上也同样离不开布局。那么今天要跟大家探讨的就是移动端上的页面布局。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/tips-help-level-up-sass.html",
            "title": "提高Sass水平的小技巧",
            "description": "\n在写CSS的时候有一些小技巧，这些小技巧可以帮助你写出更好的CSS，也能让你的代码更简单、更整洁和更好的维护。那么在Sass编写的时候有没有这样的小技巧呢？回答是肯定的。在Sass编写过程同样有很多小技巧，这些小技巧同样能帮助你更好的编写Sass代码，同样能让你的代码变得更整洁，更好维护。今天这篇译文就介绍了编写Sass的一些小技巧，在你编写Sass过程中可以使用这些技巧，让你的Sass水平更往上提高一层。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-for-web-designers-chapter-4.html",
            "title": "《Sass for Web Designers》之Sass和媒体查询",
            "description": "\n在这本书中，我想要把主要精力都集中在讲解Sass的基础使用，和证明Sass并不会和你的工作流程脱节。但在最后一章中，我想讨论一些使用Sass结合媒体查询的高级技术和一些我每天工作中用到的将复杂CSS简化的例子。只要你能想到的，Sass就可以办到。使用变量和一些mixin会让你的生活变得更轻松。如果你想的话，Sass完全不局限于这些简单的功能。下面这个例子再一次举重若轻的展示了Sass的建立兼容高清屏幕的响应式网站。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/intermediate/spriting-with-sass-and-compass.html",
            "title": "【Sass中级】使用Sass和Compass制作雪碧图",
            "description": "\n作为一名Web开发人员，在关注浏览器性能的时候，雪碧图(\"image spriting\")这样的技术诞生了，旨在减少HTTP的请求数。事实证明，更少的请求数（当文件大小没有显著的区别时）对于一个页面的加载速度有明显的区别。“Image Spriting”的工作原理是一堆的图像（称为“sprites”,精灵）合并成一张大的图像（国内称为雪碧图），以达到减少HTTP的请求数。然后通过巧妙的显示雪碧图中需要呈现的图像。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-web-design-fluid-layouts.html",
            "title": "响应式设计：流体布局",
            "description": "\n前两篇文章中关注响应式web设计的清晰概念和如何响应式地使用字体之后，让我们来深人研究一下流布局。在此文中，我将演示当下是真正需要流布局的，以及当你可以选择不一定是响应式的不同解决方案。让我们接下来学习一些特定技术与应用。理解灵活的布局对你的项目很有帮助，理解和考虑到其他可行的解决方案是否是一种很好的选择。事实上，只有深入了解每种方案的优缺点，你才能有效地选择某种布局方案。布局类型有4种：固定宽度布局，流体布局，弹性布局和混合布局，一起来逐个分析吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/custom-bottom-nav-bars-ratchet.html",
            "title": "Ratchet教程：构建自己的底部Bar",
            "description": "\n在《Ratchet教程：构建自己的顶部Bar》一文中详细介绍了如何依赖于Ratchet框架，构建属于自己的顶部Bar。在上一篇文章中说过，Ratchet框架除了顶部Bar之外，还有底部Bar和标准Bar。在实际开发中，也常常需要制作底部Bar。在这篇文章中，我们依旧借助Ratchet框架，构建一个自己需要的底部Bar。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/exploring-maps-in-sass-3-3-part-1.html",
            "title": "探索Sass3.3中的Maps(一)",
            "description": "\nSass的数据类型可以说是一个大家庭了，其数据类型中的数字、字符串、列表、颜色和布尔型，涵盖了大多数我们的需求。但是，正如一个框架开始的演变，在这个数据类型中还缺少一个关键性的工具：关联数组。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-for-web-designers-chapter-3.html",
            "title": "《Sass for Web Designers》之Sass的用法",
            "description": "\n在这一章中，我将分享在我项目中每天使用到的一些Sass的特性。我还特别为这本书建立了一个虚拟项目来保证我们谈论的Sass的功能是在一个真实环境中进行的。这个项目就叫做Sasquatch Records–一个很简单的专注于神话，晦涩难懂的，牲畜类等超自然音乐风格的唱片公司网站。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/styling-with-strings.html",
            "title": "使用字符串(STRINGS)设置样式",
            "description": "\n今年在墨尔本(澳大利亚)举办的CSSConf中，我有一个主题需要演讲——\"Styling With STRINGS\"。该讲座主要介绍的是在组件中如何使用Flexbox、currentColor和em，在浏览器中快速实现Web应用程序所需要的风格。其实这篇文章更是向大家介绍了如何通过修改一个属性就能修改整个组件的大小、颜色。并且简单介绍了如何让你把修改好的文件能直接放置在你的本地目录中。虽然描述短小，但涉及的知识点还是蛮有意思的，希望这篇译文能对你今后的工作略有帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/architecture-sass-project.html",
            "title": "管理Sass项目文件结构",
            "description": "\n多次被问及Sass在项目中运用的时候要如何管理自己的文件？或许每个人都有各自的想法，也略有不同，也有各自的经验。今天根据Hugo Giraudel的《Architecture for a Sass Project》一文所译，向大家介绍了如何在Sass项目中管理自己的文件。主要目的是告诉大家怎么去想，并不是告诉大怎么做。我想这一点更切合实际。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/source-maps-101.html",
            "title": "Source Maps 101",
            "description": "\n在今天的现代化工作流程中，经过编译、压缩或者其它优化过程之后，我们在开发环境下所写的代码与最终的产品代码有着很大的不同。指出产品代码和原本代码之间确切的映射，就是source maps发挥其作用之处。在本篇入门教程中，我们将举一个简单的项目，通过在各种JavaScript编译器中运行它，找出浏览器中source maps加入为目的。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/Sass-control-directives-if-for-each-while.html",
            "title": "Sass控制命令：@if,@for,@each和@while",
            "description": "\nSass的控制命令是创建库和重复使用代码库的一个基础，使用好Sass，需要掌握好Sass的控制命令，只有掌握了这些，你才能进入Sass的下一个层次的学习。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-for-web-designers-chapter-2.html",
            "title": "《Sass for Web Designers》之Sass的工作流程",
            "description": "\n现在我们知道了什么是Sass，那我们就开始使用它来创建样式吧。我们的第一个任务就是在你的电脑上安装Sass。我在第一章提到过Sass是用Ruby编写的程序，并且使用Ruby来编译成CSS。所以，在我们使用Sass之前，我们需要安装Ruby。\n "
        },
        {
            "link": "https://www.w3cplus.com/html/jade.html",
            "title": "jade学习",
            "description": "\nCSS有CSS预定处理器语言，其实在HTML中也和CSS一样，他也有很多预处理器语言，比如今天要跟大家介绍的Jade就是其中的一种。感兴趣的同学欢迎进入正文。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/understanding-placeholder-selectors.html",
            "title": "理解Sass的选择占位符%placeholder",
            "description": "\nSass中提供多种方法来共用相同的CSS代码。你可以使用@include定义好的@mixin在你的CSS样式中插入新的CSS样式，你也可以使用@extend定义好的CSS类选择器，向你的CSS样式中插入新的CSS样式。在Sass3.2中引入了一个新的特性——选择器占位符“%placeholder”，能过@extend可以得到更有效的输出。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/custom-top-nav-bars-ratchet.html",
            "title": "Ratchet教程：构建自己的顶部Bar",
            "description": "\n如果你有跟着《Ratchet教程：创建项目》一文走下来，你已成功的完成了使用Ratchet框架构建移动端项目。接下来就是在这个项目中添加自己需要的内容。那么今天我们要做的就是：构建自己的顶部bar。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/simple-grids-with-css-multi-column-layout.html",
            "title": "CSS Multi-Column实现网格布局",
            "description": "\n网格系统不再是新话题。而CSS3的Multi Column还是个新东东。可是使用Multi Column来实现网格布局还是很有意思的一个东东。那么在这篇文章中David Bushell带领大家使用Multi Column实现网格布局，希望大家感兴趣。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-for-web-designers-chapter-1.html",
            "title": "《Sass for Web Designers》之为什么要使用Sass",
            "description": "\n我不信任Sass。我从来都是手写样式表的！我不需要额外的工具来帮助我简化工作。我不想要把复杂的事物添加到我的工作流程中，不要来烦我。无论是以上哪种想法，现实是Sass（和其他的CSS预处理器）可以成为一个强有力的助手，一个任何样式书写者都可以轻松把它插入到每日的工作中去的工具。在使用了Sass一段时间后回过头来看，我很庆幸自己这么做了。我想要分享我是怎么来使用Sass来提高效率的，比我前10年维护CSS的过程要轻松许多，这就是我想要写这本书的理由。最初，由于我对Sass有一些误解导致了我放弃了它。我担心我要完全改变我书写和管理CSS的方法。有时，CSS也是很脆弱的，作者想要保护他们的作品不被轻易复制是可以理解。我能得到保佑吗？阿门。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-modal.html",
            "title": "移动端重构系列11——弹窗modal",
            "description": "\n弹出窗是页面与用户沟通的一种有效方式，我们常把这种效果称为Modal效果。在移动端这样的弹窗效果也是常见的效果之一。如果你将功能划分成每个组件，那么Modal将是你这些组件中的核心组件之一，因为任何网站都有可能离不开这样的弹窗效果。那么我们今天就一起来学习如何在移动端实现Modal的效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/making-embedded-content-work-in-responsive-design.html",
            "title": "Web中内嵌内容实现响应式效果",
            "description": "\n在响应式设计的网页布局中有一些元素没有发挥好，直接损坏响应式设计的布局。其中之一就是iframe元素，因为有时候你需要在页面中嵌入外部资源，比如说YouTobe的视频，这个时候就需要用到iframe元素。在这篇文章中，我将会向您介绍如何使用CSS将嵌套进来的内容具有响应式的效果，比如说视频、日历等能随着浏览器的视窗自动调整。那于在网站上嵌入外部视频，而你又不想添加额外的标签，我们也将会介绍如何使用JavaScript来替代CSS，让其在响应式设计的网站中能自动调整。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/intermediate/dynamically-change-text-color-based-on-its-background-with-sass.html",
            "title": "【Sass中级】如何根据背景颜色动态修改文本颜色",
            "description": "\n设计选择文本颜色(前景色)一般都是在背景颜色的基础做选择。如果背景颜色是亮色，文本颜色就是暗色；如果背景颜色是暗色，文本颜色就亮色。因为这是亮色和暗色的配合，文本更容易阅读。那么我们如何利用Sass在背景色的基础上选择合适的文本颜色呢？\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-sidebar-menu.html",
            "title": "移动端重构系列10——侧边栏导航",
            "description": "\n移动端有一个效果常见到，那就是侧边栏的滑出和滑入。默认的时候有一个小图标，当用户触摸这个图标的时候，侧边栏就会滑入，再次触摸的时候就会滑出。在这节中，主要介绍这种侧边栏的实现。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/responsive-web-design-tips-and-notes.html",
            "title": "响应式设计：概念与运用",
            "description": "\n一些读者或许好奇的是，人们为什么对“响应式web设计”（RWD）的关注度快速提高，开发人员都把此技术作为自己必备的技能之一，深入去学习理解这项新技术。这名称也常常作为前沿移动终端技术被提起。我们不会空谈概念，会把定义说清楚，并使用代码例子演示这项技术。如果你花一些时间来测试和了解真实的现代网络和移动技术，你就会体会到响应式web设计的好处在哪了，实现一个响应式设计可能比你想象的还要简单。现在我们都感受到Internet的变化是如此之快，促使这变化正是不断涌现的各种移动终端设备。有最近的研究表明，在未来3到5年内，通过接入网络的移动设备将超越桌面电脑设备。要适应这么快速转化也给开发人员面临巨大压力与挑战，对能力有了新的要求。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/beginner/getting-started-with-sass-and-compass.html",
            "title": "【Sass初级】开始使用Sass和Compass",
            "description": "\n如果你的朋友、同事或网友有跟你说过Sass或者Compass，或者两者，那太棒了。现在怎么办？在这篇初学者指南中，我首先带领大家使用Sass和Compass。我将告诉大家如何完成安装和创建一个测试项目。怎么使用Sass编译CSS，甚至还会告诉大家有关于Sass中的\"mixin\"。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/icon-fonts-vs-svg.html",
            "title": "Inline SVG vs Icon Fonts",
            "description": "\n当你为一个网站建一套图标系统的时候，你有几种选择。如果你知道图标需要是像素画图片的时候,你可能会用到css sprites也就是雪碧.而如果图标需要是矢量图的时候(现在已越来越普遍)，你有两种选择，他们是svg和图标字体。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/creating-repeatable-style-pattern-sass-placeholders-vs-mixins.html",
            "title": "用Sass的占位符和混合宏创建可复用的样式",
            "description": "\nSass的最大好处之一就是具有创建可重用代码块的能力。我经常用%placeholders或者@mixins创建可重用代码模块。占位符（%placeholders）和混合宏（@mixins）之间有很大不同。简而言之：当你需要传递变量时使用混合宏（@mixins）,若不需要，则使用占位符（%placeholder）。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/how-to-create-mobile-project-width-ratchet.html",
            "title": "Ratchet教程：创建项目",
            "description": "\n通过前面几篇Ratchet教程的介绍，我想大家对Ratchet有一定的了解，或许都蠢蠢欲动，想自己动手制作一个移动项目出来。是的，我也有这样的冲动，刚好五一这几天以Ratchet框架为基础，帮朋友处理了一个移动端的项目，今天我就以主站W3cplus为例，整一个移动端的W3cplus。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-create-page.html",
            "title": "移动端重构系列2——新建空白页面",
            "description": "\n在《移动端重构系列》第一篇中，主要向大家介绍了移动端开发之前需要做哪些准备工作。从这篇文章开始，将带领大家开始动起手来，首先做的第一件事情，就是创建一个空的移动端页面。\n "
        },
        {
            "link": "https://www.w3cplus.com/responsive/understanding-responsive-web-design-how-to-manage-fonts.html",
            "title": "响应式设计:使用响应式字体",
            "description": "\n排版是响应式Web设计最重要的内容之一，如果你想内容能在所有尺寸屏幕上友好地显示，那就绝对有必要地为移动设备优化字体。幸运的是，实现弹性字体的过程并不是那么困难。当我讨论弹性（在这种情况下，是一种指导原则），我们不能忽视指定字体来适应我们响应式网站。我们可能使用不用单位标准来实现这个目标，包括pixel(像素)，em，rem或者是百分比。那么选择一个正确的标准对设计一个可塑的，响应式的交互界面是至关重要的。在这关于响应式Web设计的系列中，我将讲解如何响应式地管理动态字体，也会逐个分析上面所提到的每个单位标准，对比各自的优缺点。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/srcset-sizes.html",
            "title": "Srcset和sizes",
            "description": "\n四年前，ETHAN MARCOTTE发布了一篇文章(《Responsive Web Design》)之后的第13天，Steve Jobs发布了iPhone，突然有了流体和视网膜（Retina）图像一说;也突然有了相关争论。我们面对实现流体图片又名视网膜又名响应式图片的第一反应就是使用制作响应式布局的工具：媒体查询!浏览器无法知道它加载的网页是什么，但他可以意识到他们的渲染环境，比如说视窗大小，用户屏幕的分辨率等诸如此类的事情。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-scroll-with-swipe.html",
            "title": "移动端重构系列9——图片滚动",
            "description": "\n在上一节中介绍了移动端的滚动实现，但我们更多看到的效果是图片的滚动，也就是常说的slidershow效果。在这一节中，主要针对图片滚动效果做一定的介绍。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/ratchet-components.html",
            "title": "Ratchet教程：自动化部署与组件概览",
            "description": "\n今天是关于Ratchet教程中的第三篇。在正式表这篇文章之前，首先要非常感谢好友@文彬提供这么优秀的教程。下面我们跟随文彬的教程往下了解。ratchet是一个移动框架，可以用来快速搭建移动项目。本文将介绍grunt服务器搭建，ratchet组件的使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/compass-image-sprite.html",
            "title": "使用Compass生成雪碧图",
            "description": "\nCSS雪碧图是将几个图片拼合成一张图片，以此来减少HTTP请求的方法，并且可以提升网站加载性能。除了使用传统方法在Photoshop中手动拼合，还有一些简便的方法和便捷的工具来帮助我们完成这项工作。但是，以我处理CSS雪碧图的经验来说，没有哪种方法比使用Compass的Sprite函数更轻松容易的了。现在就让我们来看看他是如何工作的。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-preparatory-work.html",
            "title": "移动端重构系列1——前期准备工作",
            "description": "\n移动网站现在是主流，但很多同学对于移动端的开发，还并不太了解或者没有深入。或许有很多外在的原因和内在的因素在限制，但不管是什么原因，如果你喜欢的话，你就应该动手开始实战，如果你不知道如何开始，从今天开始跟随@结一同学一起完成《移动端重构系列》。今天给大家带来的是这个系列的第一篇——前期准备工作。告诉大家做移动开发需要做哪些准备工作。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css-blend-modes.html",
            "title": "实战CSS混合模式",
            "description": "\n去年年底看到Dudley Storey在他的一篇文章《2014年前端将会发生什么》一文中提到，如何在Web页面中实现类似于Photoshop制图软件中图层混合模式的效果，特别的激动。从而也知道CSS混合模式这样的一个概念，觉得特别有意思，加上这段时间看到相关的讨论，我也有点手痒痒，今天也将试试这一神技，给我们Web的效果带来什么样的变化。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/whats-great-sass.html",
            "title": "Sass有什么优势",
            "description": "\n或许你已经听过一个叫作Sass的东东？可能你已经了解它，并且你能像大师一样写出一些函数？对于不清楚我在讲什么的读者或者客户，你们可以想想web开发过程，你们的期望和站点用户的体验想要怎样的。无论如何，我都要给大家分享一下，为什么我认为Sass是一个很好的东西。对于那些不熟悉web前端开发的人，Sass和CSS或许只是一些让人感觉凌乱的词语，但就是这些词语，对于幕后的开发过程是很重要的，而这些过程，形成了一个美丽的、响应式的网站。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/getting-to-know-css-blend-modes.html",
            "title": "开始了解CSS混合模式",
            "description": "\n如果你曾经广泛地使用过图片编辑应用软件（例如，Adobe Photoshop，Pixelmator，GIMP等），那么你可能对混合模式比较熟悉。如同名称中所暗示的，混合模式是指将上层的图像融入下层图像时采用的各种模式。根据您所选择的模式，你会看到不同的融合后的效果。这些混合模式，现已 Compositing and Blending Level 1说明文档被添加在CSS中。混合模式被用来指定一个特定的颜色将如何融合到背景层的颜色中。其结果可能十分有趣。\n "
        },
        {
            "link": "https://www.w3cplus.com/mobile/mobile-terminal-refactoring-scroll.html",
            "title": "移动端重构系列8——滚动",
            "description": "\n原生滚动的属性为：-webkit-overflow-scrolling:touch;，如果是走高富帅的苹果路线，是没问题的，谁让这是人家亲生的呢；如果是安卓的话，我真不知道是支持还是不支持，说不支持吧好像有点缓动效果，说支持吧好像把这条属性砍掉也一样，感兴趣的可以自己测试下（添加或删除这个属性对比下）\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/beginner/the-inception-rule.html",
            "title": "【Sass初级】嵌套选择器规则",
            "description": "\n众所周知Sass是一种高效、可靠而又精确的工具，给了我们很多自由空间，让开发者减少使用CSS的一些痛苦，当然，这也意味着一种新的责任到来。在CSS中，我们都知道所有代码都在一个“根级别”的选择器中，每个CSS的样式声明都写嵌套的话，那意客味需要写很多的代码。今天我要带领大家进入到Sass的最基本原则中。这就是所谓的“基础规则(Inception rule)”。此规则可以帮助你避免一些常见错误(使用Sass的常见错误)，不管是你Sass的初学者，还是中级或者高级Sass开发者。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/advanced/inverse-trigonometric-functions-with-sass.html",
            "title": "【Sass高级】Sass中的反三角函数",
            "description": "\n有可能你会认为数学在CSS中用不上，但实际上，在写CSS时运用一些数学可以帮你做一些令人惊讶的事情。数学（尤其是三角函数）可以帮助你模拟一个真实的世界。如果你想做这样的事情，你需要了解复杂的三维变换。如果你只是想在朋友面前展示一下你的才华，这将是一件非常有兴趣的事情。在这篇译文中，将带大家领略Sass编写反正弦，反余弦和反正切等三角函数（因为在Compass中没有这几个函数功能），并且通过这些函数完成一个旋转的三十二面体案例效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-maps.html",
            "title": "Sass Maps",
            "description": "\n对于一位程序员来说，对数组并不会陌生。但对于前端人员（像我这样不算前端的前端）对于数组，只是听过，看过，但不知道如何使用？然而在Sass3.3版本中开始引入一个新的数据类型maps，他长得跟数组非常的相似。但也让我极其的苦逼，因为我不懂数组呀，不知道如何下手开始使用Sass的map功能。 "
        },
        {
            "link": "https://www.w3cplus.com/css/responsive-html-emails-a-different-strategy.html",
            "title": "实现Responsive邮件的不同策略",
            "description": "\n电子邮件变得相当的重要，它在我们身边随时出现。所以我们重新在思考FogBugz邮件通知的制作，我们知道我们必须在随时随地都能阅读，这意味着移动端上要做很多的优化。在这篇文章中有很丰富的资源。Campaign Monitor提供了一份响应式设计指南，文中一步一步教您如何设计与制作响应式邮件(\"EDM模板\")。Ros Hodgekiss早在2011年8月份就在Smashing Magazine发表了一篇From Monitor To Mobile: Optimizing Email Newsletters With CSS。MailChimp 发表了移动电子邮件的最佳实践相关技巧。如果你不想阅读这么多文章，那你么可以花点时间阅读Litmus团队根据自己产品总结的一些响应式邮件制作的经验。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/getting-started-with-grunt.html",
            "title": "开始使用Grunt",
            "description": "\nGrunt是一个任务管理器，能大大提高您运行前端开发工作流程。使用大量的Grunt插件可以自动执行任务，例如编译Sass和CoffeeScript，优化图像和验证您的JavaScript代码与JSHint。在过去你可能使用类似CodeKit或Hammer来处理这些任务。我认为这两种应用程序是伟大的(过去广泛的使用他们)，但Grunt比他们更优秀，他可以定制任务。有很多插件可以帮助你优化图片和在你的工作流中加入CSS样式。在这篇文章里你将学习如何设置Grunt和配置Compass & Sass，JSHint和CSS连接的任务。我们开始吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-2d-transform.html",
            "title": "CSS3 2D Transform",
            "description": "\n在一个二维或三维空间，元素可以被扭曲、移位或旋转。只不过2D变形工作在X轴和Y轴，也就是大家常说的水平轴和垂直轴；而3D变形工作在X轴和Y轴之外，还有一个Z轴。这些3D变换不仅可以定义元素的长度和宽度，还有深度。我们将首先讨论元素在2D平面如何变换，然后我们在进入3D变换的讨论。CSS3 2D变换让Web设计师有了更多的自由来装饰和变形HTML组件。同时让设计师有更多的功能装饰文本和更多动画选项来装饰Div元素。在CSS3 2D变形中主要包含的一些基本功能如下。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/introducing-ink-our-new-responsive-email.html",
            "title": "Ink框架快速创建响应式EDM模板",
            "description": "\nEDM是\"Email Direct Marketing\"的缩写，即电子邮件营销，简称为邮件营销。是利用电子邮件与受众客户进行商业交流的一种直销方式。从字面上来说，EDM似乎和前端人员没有太大的关系，可要是说起\"EDM模板\"，我想很多前端人员都知道，同时也很烦感制作这样的页面，原因大家都懂的。\"EDM模板\"都是使用表格来制作，并且都是通过行内样式来控制页面的渲染风格，致使很多效果在\"EDM模板\"中有限制，而且在制作时有很多限制条件，同时还要兼容众多版本的客户端邮件系统。不比处理IE兼容简单。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-overlay-techniques.html",
            "title": "CSS Overlay技巧",
            "description": "\n设计模式通常是一组最佳实践和技术，主要目的是用来解决一些最常见的设计“问题”，通常是在上下文中提出的设计原则。这些原则之是一“停留在页面”的原则。这一原则是建立在页面刷新都打破用户的心中想要的流程基础上，造成所谓的“变盲”，我们需要用户无论保时何地可以避免打破这种视觉流程。我们可以在保留用户在网页和模型的过程中做出明智的选择。一个方式，让用户在同一页面上试图让内容在当前页面的背景下，通过展示一个“迷你页面”，或一个弹出的对话框。这个轻量级的层就是我们所说的一个“浮层”。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/transform-basic-property.html",
            "title": "Transform-style和Perspective属性",
            "description": "\n在《CSS3 Transform——transform-origin》一文中主要介绍了CSS3 Transform属性中的属性的使用，其实在属性中，属性仅是其中之一，要彻底理解属性，这是不够的，必须的理解其他属性的应用。今天将和大家一起探讨中和相关属性的使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/transform-origin.html",
            "title": "CSS3 Transform——transform-origin",
            "description": "\n在CSS2.1中，我们的页面都是静态的，网页设计师也习惯把它作为页面效果的设计工具。但往往有些页面效果不只是静态的，比如说，如何实际移动一些元素？如何更改元素的外观——旋转或缩放？多年来，Web设计师为了给修改页面的外观，都依赖于图片、Flash或JavaScript才能完成。不过，CSS3将要改变设计师这种思维，进入CSS3时代，借助CSS3就可以轻松倾斜、缩放、移动以及翻转元素。在2011年05月在站上发表了第一篇有关于CSS3 Transform教程，现已时隔近两年，有很多东西都有变化，而且理解也略有不同，接下来将会分几篇教程，向大家介绍CSS3 Transform相关的知识。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/foundation-for-beginners-buttons-and-dropdowns.html",
            "title": "初学Foundation之按钮和下拉功能",
            "description": "\n按钮在Web是非常的常见，也是Web页面中重之重的组件。在实际制作中可以运用不同的标签，但对于样式方面，其实也差不多。在Bootstrap提供一套成熟稳定的按钮组件，同样，在Foundation框架中同样为Web开发者提供了类似Bootstrap的一套按钮组件，包括单个按钮、群组按钮、下拉按钮等等。在Foundation框架系列教程中，今天主要向大家介绍Foundation中的按钮使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/imitating-calc-fallback-fixed-width-sidebar-in-responsive-layout.html",
            "title": "calc()制作自适应布局　　　",
            "description": "\nCSS中自适应布局是一种常见的布局方式，但当浏览器视窗缩小一定程度的时候，内容会挤跨，特别是侧边栏。CSS3中新增加了一个calc()特性，可以让浏览器根据表达式自动计算，真正达到自适应的布局效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/grunt-tutorial-configuring-tasks.html",
            "title": "Grunt教程——Gurnt任务的配置",
            "description": "\n在《Grunt教程——初涉Grunt》和《Grunt教程——安装Grunt》中得知，Grunt项目中都是通过Gruntfile.js来配置任务。可以说，Gruntfile.js文件在任何一个Grunt项目中都是必不可少的，从这也可以看出这个文件的重要性。欲要搞清楚Grunt怎么工作，就必须要先了解Grunt是如何通过Gruntfile.js配置任务，帮助你实现你需要的功能。如果你还不知道Gruntfile.js是什么，建议您先阅读Grunt了解一下，如果你觉得这样麻烦，也不必过于担心，你也可以通过下面将要介绍的内容，深入的了解Gruntfile.js，并学习如何配置。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/create-font-awesome-font-icons-with-sass.html",
            "title": "Sass制作Font Awesome图标",
            "description": "\nFont Awesome是Dave Gandy通过字体制作的几百个icons图标。在前端界享有盛名。使用@font-face制作的图标可以随意的放大，并通过CSS中字体相关的CSS对图标进行美化，比如说可以改变图标颜色、大小和增加阴影等，但他也存在一定的弊端。为了使用部分图标，不得不加载所有图标的样式。如果你使用Sass将可以改变这一切，今天这篇文章就是介绍了Sass如何通过几个Mixins和Function等特性来实现按需开启需要的图标。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/building-a-circular-navigation-with-css-transforms.html",
            "title": "用CSS变形创建圆形导航",
            "description": "\n在这个教程中，我会教你使用CSS变形制作圆形导航。 我会带你一步步地创建样式，讲解背后的数学知识和简单的逻辑，让你对这技术有清晰的认识。正如我提到的，使用CSS变形创建样式，会用到相关的基础数学知识。但是不必担心， 用到的数学非常简单，我会带你一步步地客克服它。我要指出原技术属于Ana Tudor。我把它修改成我想要效果，这也是我希望你的在教程结束时去做的：对这技术有深入而且清晰的认识，开始查阅资料并且构建自己的样式。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/responsive-email-design-2.html",
            "title": "响应式电子邮件设计",
            "description": "\n自从Ethan Marcotte在2010年5月25日发布的《A List Apart》文章开始，响应式网页设计(RWD)讨论的热度并没有减少，但在相同的时间内我们构建电子邮件的方式并没有太多的改变。值得庆幸的是，在过去的一年，人们开始使用RWD和运用类似的方法来设计电子邮件。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/cargo-cult-css.html",
            "title": "崇拜CSS",
            "description": "\n公认的拥有一个编写和管理CSS的方法比什么都要更好。尽管如此，一些开发人员的实践是不利于语义化质量和长期的可维护性。我们要讨论一些被提倡的\"CSS框架方法”的问题和作为Web开发人员，我们如何可以更好的解决这些问题。今天最流行的CSS开发框架技术当属OOCSS，尽管还有其他类似的技术存在，如BEM。这些方法试图对CSS采用面向对象的编程原则。尽管样式语言和面向对象的软件设计原则在概念之间存在一定的问题，这些微妙的东西对于一个欠缺经验的开发人员来说可能不会立即显现出来。最令人不安的是，这些方法已经可以广泛的看到博客给其冠以\"最佳实践\"的评价。“abscence”的证据来阐述使用这些方法的好处——选择高流量网站只是一小部分——这反应了我的观点，他们代表了一种误导和盲目的崇拜。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/stop-using-so-many-sass-variables.html",
            "title": "停止使用很多的Sass变量",
            "description": "\n变量是Sass中很重要的一个部分，不过如何更好的使用好Sass中的变量也是一个很关键的知识点。从定义变量到使用变量，也延伸出类似于定义类名以及使用多类名的问题。Sass中的变量需要语义化定义变量名吗？需要定义多个变量名吗？在您使用Sass过程中是否也探讨过类似的问题？如果没有，我们就以这篇文章开始吧，一起探讨这个很有意义的问题。本文根据Ben Smithett的《Stop using so many Sass variables》所译，初步探讨了Sass中变量名的定义以及是否多用更多的变量名。希望大家能喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-px-to-em-with-mixin-and-function.html",
            "title": "Sass基础——PX to EM Mixin和@function",
            "description": "\nCSS单位是一个很意思的东西，到目前为止，CSS的单位不仅仅局限于em,px,pt,com,in...，还出现了新的单位,比如rem，vw，vh，vmin和vmax等等。在CSS-trick有对这些单位进行描述（可以点击这里阅读中文）。在这么多的单位中，其中px与em两者的互转是最令同学们头痛的。简值是一言难尽，理不清呀！今天我们一起来动手探讨如何使用Sass的mixin和function来实现px向em转换。用来解决这个头痛而又麻烦的事情。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/859.html",
            "title": "浏览器开发工具的秘密",
            "description": "\n《浏览器开发工具的秘密》是涂鸦码农抽空根据Secrets of the Browser Developer Tools全站翻译了，主要讲了Chrome, Opera, Firefox, Safari主流浏览器的调试技巧，内容很多，适合各个阶段的码农学习。绝对是干货，特意将此文转载到小站。 "
        },
        {
            "link": "https://www.w3cplus.com/css/CSS-Level-4-And-More-Whats-Coming-In-2014.html",
            "title": "2014年前端将会发生什么",
            "description": "\n在过去的几年中，Web开发者被迫接受了几大变化：HTML5的兴趣，预处理器的出现和JavaScript框架，结合一个庞统的一系列技术的变革，推动了整个设计的趋势。在很短的时间内，移动和响应式设计，扁平化(Flat Design)用户界面和深层次的交互页面成为标准做法。那么在2014年Web前端又将会发生什么？如果您对这个话题感兴趣的话，欢迎进入一起讨论与分享。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/front-end-web-development-quiz.html",
            "title": "Web前端开发测试题",
            "description": "\nDavid Shariff通过网站提供了Web前端开发中CSS、HTML和JavaScript三部分的测试题。到发稿之日共有8320人参与了这个测试，可平均得分是53.8%，这个分数并不能说明什么，我只想以这些题向大家介绍自己对这些题的个人理解。在此要特别感谢@99提供所有试题的翻译，也要非常感谢@民工精髓对JavaScript试题的分析。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/automating-your-workflow-with-grunt.html",
            "title": "使用Grunt实现自动化工作流",
            "description": "\n最近我一直在通过自动化任务完成在日常生活中的工作流。我也想在跨团队开发中有一套实现项目的标准化，设置一个项目结构和确保必要的正确无误的任务。CodeKit对于我来说已经很好了，但很多地方仍然有一些问题；能够更多的实现跨平台自动化而不需要为不同的应用程序配置不同的项目结构。他被叫作Grunt。这一篇关于Grunt的基础教程，而且这样的教程在站上也有多篇，我一直在重复的做这样的一件事情，想通过不同的优秀文章，实例来加深对Grunt的理解与实战。今天根据markgdyr的《Automating your workflow with Grunt》所译，和大家一起学习如何使用Grunt实现自动化工作流，减少你每天重复多次而又乏味的任务。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/foundation-for-beginners-the-top-bar.html",
            "title": "初学Foundation之顶部工具栏",
            "description": "\nWeb页面顶部工具栏是现代Web页面的一部分，特别在移动端页面下，通过顶部工具栏的”三横“直线的ICON效果，点击来控制显示和隐藏菜单。当然在顶部的工具栏中通常还放有其他的Web元件。那么在Foundation框架中也提供了这样的一个插件，让你很方便的实现这样的功能与效果。今天这篇文章，我们主要就是针对Foundation的顶部工具栏进行介绍，希望这篇文章能帮助大家更好的理解Web页面顶部工具栏的功能与效果。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/foundation-for-beginners-joyride-interchange-tables-and-panels.html",
            "title": "初学Foundation之Joyride，交互，表格和面板",
            "description": "\n让我们继续为基于Foundation的项目添加更多的功能，如将学习Joyride插件，该插件帮助引导用户来使用你的站点；还会学习价格表格、标准表格和交换功能：一种新奇响应式图片工具。我们通过一些模版示例，你还可以下载源码来学习如何实现这些特性的。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/two-handy-and-advanced-sass-features-and-their-limitations.html",
            "title": "Sass两个先进特性与局限性",
            "description": "\nSass是一门优秀的CSS预处理器语言，他有很多自己独特的特性，但具有这些独特的特性基础上，他有很多功能又有所限制。今天根据KrasimirTsonev的《Two handy and advanced SASS features and their limitations》一篇文章进行翻译，给大家介绍了Sass中插值和列表两个特性，以及这两个特性的极限性。KrasimirTsonev在文中分享了他在使用Sass的插值和列表的一些发现，同时也想知道你是否碰到KrasimirTsonev在文章所介绍的Sass限制性，以及您又是如何绕过他们的。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/beginners-guide-to-perceived-performance.html",
            "title": "让手机站点像原生应用的四大途径",
            "description": "\n在移动设备上构建设计良好的网站慢慢变得越来越容易。不论使用什么方法(响应式设计、自适应等),如果你了解你所做的,创建一个美观的网站不是问题。但你的用户可能仍然要求网站有原生app的体验。完成这样的体验是一个挑战。大多数时候,当人们谈论“app”或“原生”的感觉,他们讲的的不是一个网站的视觉体验。他们所讨论的，是用户界面如何对他们的行为进行反馈，以及这种反馈是怎样呈现的。99根据Kyle Peatt的《A Beginner's Guide to Perceived Performance: 4 Ways to Make Your Mobile Site Feel Like a Native App》所译，带大家一起体验让手机站点像原生应用的四大途径。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/7-habits-of-highly-effective-media-queries.html",
            "title": "七个高度有效的媒体查询技巧",
            "description": "\n随着移动设备以及用户终端种类的不断增加，响应式设计在Web是运用越来越广泛。而响应式设计中媒体查询又起着举足轻重的作用，可以说离开了媒体查询，响应式设计就没有了他的灵魂。换句话说，响应式设计做的优秀不优秀，看媒体查询的使用就能知道。到目前为止，智能移动设备的普及化，我们的响应式设计应该考虑移动先行。那么移动先行如何实现呢？媒体查询又对其有什么使用呢？欲想了解，烦请阅读根据Brad Frost的《7 Habits of Highly Effective Media Queries》译文，让你把媒体查询运用的更灵活。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/foundation-for-beginners-the-grid-system.html",
            "title": "初学Foundation之网格系统",
            "description": "\n在学习Foundation系列文章中的上一篇，我们大概讲述了可以用这个框架来干什么，框架本身又可以做什么和如何自定义符合自己需求的框架。那么此文章就将深入地研究学习“网格系统”，过程中我将使用实例来演示。到最后，为了做出一些震撼的效果，我们还会学习对各种内容都可以实现滑动效果的插件：Orbit:Javascript插件。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/grunt-tutorial-installing-grunt.html",
            "title": "Grunt教程——安装Grunt",
            "description": "\n在上一节《Grunt教程——初涉Grunt》一文中介绍了Grunt是什么，今天我们主要一起来学习和探讨Grunt如何安装。俗话说，巧妇难为无米之炊，要想正常的使用Grunt，首要条件你要在自己的电脑环境中具备运行Grunt的环境。别的先不说了，我们切入正题。Grunt和Grunt插件应该作为项目依赖定义在你项目的package.json中。这样就允许你使用一个单独的命令:安装你项目中的所有依赖（在中定义好的Grunt和Grunt插件在使用时会自动安装相关依赖，正如我们已经了解到的，这些依赖定义在中了）。当前稳定的和开发中的Grunt版本始终都列在wiki页面上。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/getting-started-with-html-emails.html",
            "title": "开始制作HTML Email",
            "description": "\n向用户发布最新的更新、业务或产品，HTML电子邮件是一个最好的方式，但他们有点棘手。电子邮件客户端对CSS的支持不一致。因此我们必须借助于老的技术，如使用表格和内联CSS。今天，我将不可的大家一起创建一个简单的HTML电子邮件。作为Web开发人员，编写HTML电子邮件是一件非常具有挑战性的任务，我们也必须得处理。幸运的是，当我的第一个客户要求我设计和编写一个HTML电子邮件的通知，他耐心的陪我渡过整个编写过程，让我明白了编码HTML电子邮件的一切。你可能不会有我那么幸运，所以本教程可以帮你做好一切的准备。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/create-css-grid-using-calc.html",
            "title": "使用calc()创建CSS网格",
            "description": "\n网格系统对于Web前端人员来说不是一个陌生的话题了，在w3cplus上介绍网格系统的教程并不少，不过这些网格系统都有其类似之处。在HTML中为了能应用好网格，都需要添加一些类名，而在样式中，不管你用了几列网格，都有一大串的样式代码。这让一个有代码洁癖的人员来说，总觉得不爽。幸好，CSS预处理器的出现，如Sass。可以让你的代码变得更简单一些，但和以前的网格也极其类似。有时试想，有没有更好的呢？今天看到Sebastian Ekström的Create a CSS grid using calc()觉得很有意思，通过calc()和Sass的结合，生成需要的网格。希望此篇文章对大家有所启发。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/interview-question-css.html",
            "title": "有关于CSS的面试题和练习",
            "description": "\n前端面试总是有很多同学讨论，面试官会问什么样的面试题？被面的人怎么回答面试问题？但很少有人会从面试题中深挖有价值的知识，换句话说有很多同学只是面对着如何回答面试官的问题，却忽略面试官想通过试题了解你的信息。当然，如果你处在一个需要面试别人有关于CSS方面技巧和知识，一时想起来还真有点难。根据Chris Coyier的《Interview Questions and Exercises About CSS》所译，整理在一起，提供给大家参考。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/complete-guide-table-element.html",
            "title": "表格元素的完全指南",
            "description": "\nHTML的表格的每一个元素都做了比较完整的讲解，并附有大量的demo，带领大家一步步地全面地了解表格，并且讲解了表格的适用范围、语义化等相关问题，希望大家能透过此文对表格有一个全面的认识。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/843.html",
            "title": "《献给你，我深爱的ECMAScript》结束篇",
            "description": "\n\n\t结束篇该说点什么呢？\n\n\n<!--//--><![CDATA[// ><!--\n\n<!--//--><![CDATA[// ><!--\n\n/*468*60，创建于2014-3-16*/\nvar cpro_id = \"u1490106\";\n\n//--><!]]]]><![CDATA[>\n\n//--><!]]>\n\n终于第一版的beta结束啦。。。。 也许还是那份热情 & 冲动让我完成了这个系列。\n感谢每一个来看过这个《献给你，我深爱的ECMAScript》系列的同学。\n最想感谢w3cplus的所有人，还有大漠，没有w3cplus这个平台，很多人可能只能从我的博客里面看到一些零散的东西。\n最近看电视剧，有一个很有意思的话题：10年后你在干什么，会怎样？ "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/how-to-scale-and-maintain-legacy-css-with-sass-and-smacss.html",
            "title": "如何使用Sass和SMACSS维护CSS",
            "description": "\n项目的维护与管理一直以来就是团队中最让人烦恼的事情，特别是对于一个有一定历史的网站，很多团队想动却又不敢轻意的去动，大多数都是采用在原来的基础上迭代开发，致使代码越来越难以维护。也为此产生恶性循环。今天根据Ben Smithett的《How to Scale and Maintain Legacy CSS with Sass and SMACSS》所译，学习如何通过Sass这样的CSS预处理器和SMACSS这样的思想结合在一起，更好的开发和维护一个项目的CSS。希望对大家有所帮助与启发。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/mixins-for-semi-transparent-colors.html",
            "title": "Sass中半透明颜色的Mixins",
            "description": "\n在The Sass Way上看到一篇John W. Long写的《Mixins for Semi-Transparent Colors》文章。文章中详细的介绍了如何使用Sass来定义一个半透明颜色的mixins，觉得很有意思，认真学习之后，结合CSS中的半透明，以及Sass中的半透明做了一点总结，与大家分享。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/flexible-images.html",
            "title": "Flexible Images",
            "description": "\n玩过响应式设计的同学或多或少都会在一些媒体上纠结，比如说图片，视频等自适应问题。而且有关于这方面的解决方案各有各的说法，似乎是没有一种方案是绝佳的，这样一来让人倍感头痛。这或许就是前端的烦恼吧。我也一样，虽然整响应式设计蛮久的了，但对于图片方面的自适应处理还真没有找到一个好的方案，这回痛下决心，仔细找了一些相关教程阅读了一回。那么今天将整理一下，网络上有关于图片自适应（此处我称之为弹性图片）解决方案，希望这篇文章能帮助大家解决图片在响应式设计中给大家带来的烦恼。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/float.html",
            "title": "float深入剖析",
            "description": "\n\n\tfloat是什么？\nfloat即为浮动，在CSS中的作用是使元素脱离正常的文档流并使其移动到其父元素的“最左边”或“最右边”。下面解释下这个定义中的几个名词的概念： "
        },
        {
            "link": "https://www.w3cplus.com/css/say-hello-to-the-html-email-boilerplate.html",
            "title": "HTML Email Boilerplate",
            "description": "\n处理HTML电子邮件将是考验人的耐心。看似小格式问题无法避免地出现，你认为自己：“我是一个优秀的Web开发人员，我甚至擅长HTML5/CSS3，我可以很好的解决这些问题”。几杯咖啡时间之后，你开始发狂，你在开始考虑给大家做什么，提供一个{这里填写空白的电子邮件客户端}。HTML Email Boilerplate可以做出很好的说明。Boilerplate为您提供一些例子和有用的技巧，保证您的电子邮件设计尽可能的在电子邮件客户端正常渲染。您可以使用Boilerplate做为您创建电子邮件的起点。或者，如果你是高级用户，你可以选择里面你需要的片段做为您需要的。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/user-sass-reduce-repetitive-code.html",
            "title": "使用Sass减少重复性代码",
            "description": "\n在Web开发中，每一位写CSS的同学不管使用什么方式进行开发，都必须面对CSS代码中有很多重复性代码。就算你使用OOCSS或者大家讨论激烈的模块化开发，都会有一些代码使用不上。这样直接的后果就是让你的文件变得臃肿，并且难以维护。但是使用Sass，他可以让你避免这些问题。今天我们就通过Sass的@each、@for和@function等方法，来解决这个问题，帮助你减少重复性的代码，甚至是无用的代码，真正做到按需生产。\n "
        },
        {
            "link": "https://www.w3cplus.com/blog/position-and-z-index.html",
            "title": "你对Position的了解程度有多少?",
            "description": "\n一篇关于 position 定位和 z-index 的基础文章，阐述了 position 定位和 z-index 之间的关联，非常值得新人阅读，老鸟也不妨回顾一下。文中还提到了 z-index 在IE 6 7下的一个BUG。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/organize-that-sass.html",
            "title": "组织Sass文件",
            "description": "\nSass是CSS的一个预处理器，他和CSS一样，需要组织好你的.scss或者.sass文件。在一个项目中如何组织Sass文件将是一个很重要的部分，因为文件组织的好与坏直接关系到您开发所需的时间，特别对于一个大型项目来说得显得重要。今天简单的向大家展示一下如何组织Sass文件。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/ecmascript-lesson-6.html",
            "title": "《献给你，我深爱的ECMAScript》之Array篇",
            "description": "\n本文主要说说ECMAScript的Array相关 "
        },
        {
            "link": "https://www.w3cplus.com/css/html-email-boilerplate.html",
            "title": "HTML Email Boilerplate源码阅读",
            "description": "\n这篇文章主要是来阅读HTML Email Boilerplate模板的源码，以及扩展其相关的知识点，帮助大家更好的理解EDM模板的设计与开发。首先这是一个HTML电子邮件模板，这里的代码及示例代码是创建一个没有设计或布局的模板。他主要作用就是帮助你避免一些最常见的电子邮件客户端(如，Gmail,Outlook和Yahoo邮箱等)渲染时引起的主要问题。虽然不是可以直接插入使用（你知道的，你必须要做一些事情。），但它提供了一些非常有用的例子和代码片段，这些都可以帮助你设计和开发的HTML电子邮件在邮件客户端上能得到更好的渲染。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/rem-px-browser-function-sass.html",
            "title": "Sass函数功能——rem转px",
            "description": "\n性能对于Web前端开发人员是必备的一项技能。CSS3和HTML5的新特性帮助我们改善了应用程序，但有时这些特性并没有得到很好的支持。这就是优雅降级。你想在新的浏览器中使用这些特性，但不能忽视对传统浏览器的支持。我最近开始在做一个新的项目，他必须要支持IE8。由于级联问题的嵌套，使用EM单位时不好把控，所以我决定在这个项目中开始使用有用的rem单位，这样更容易理解和维护。这种方法的主要问题是IE8不支持rem单位。最后，我们需要针对于这种情景创建一个后备方案：使用px单位做降级处理。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/design-based-media-queries.html",
            "title": "基于设计的媒体查询",
            "description": "\nResponsive（响应式设计）对于今天来说并不是一个新东西，在互联网上有关于响应式设计的教程铺天盖地。而且国外有关于这方面的Web应用也是非常的多。今天也老话重谈，Spy根据Rachel McCollin的《Design-Based Media Queries》所译，向大家介绍Compass Design网站如何实现响应式设计，希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/create-flexible-grids-using-sass.html",
            "title": "使用Sass创建弹性网格",
            "description": "\n在Web设计中，时常可以碰到一个网站中实现网格布局。这个过程可能非常痛苦，但保持视觉上和一个精心设计的网格一致性是非常值得的。但当你为一个响应式设计写样式的时候，你并不想在布局为为每个元素计算宽度。相反，您需要一个伸缩的解决方案，在你的网格中可以指定匹配的宽度。我们可以使用一个像960网格系统来解决这个问题，但是在我看来，框架有很多问题，不过我们可以使用Sass来解决这些问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/ecmascript-lesson-5.html",
            "title": "《献给你，我深爱的ECMAScript》之String篇",
            "description": "\n本文主要说说ECMAScript6中新引入的String的api\n\n\t第一个：startsWith\n从语义化上不难知道：是判定某个指定的字符串是否从某个子字符开始的。\n\n\n<!--//--><![CDATA[// ><!--\n\n<!--//--><![CDATA[// ><!--\n\n/*468*60，创建于2014-3-16*/\nvar cpro_id = \"u1490106\";\n\n//--><!]]]]><![CDATA[>\n\n//--><!]]>\n\n语法：\n\n  var startsWith = str.startsWith(searchString [,position]);  \n示例： "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-3d-transform.html",
            "title": "CSS3 3D Transform",
            "description": "\n早前2011年5月就在站上写了一篇《CSS3 Transform》介绍CSS3中Transform属性的简单应用。但这篇文章里的知识无法满足大家对Transform的一个全面认识，最近重新整理了一个Transform系列的文章，希望对初学者有所帮助。前几天介绍了《CSS3 Transform——transform-origin》、《Transform-style和Perspective属性》和《CSS3 2D Transform》。今天是这个系列的最后一篇——CSS3 3D Transform。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/CSS-preprocessors-and-parent-selectors.html",
            "title": "CSS预处理器和父选择器",
            "description": "\n在CSS中，我们在写样式的时候，对于父元素与子元素之间的关系，通过选择器来处理一般都是父元素在前，子元素在后。或者说祖先元素在前，后代元素在后。但往往我们很多时候希望能通过某种选择器，实现子元素与父元素之间的关系不在那么死板，我想通过子元素能和父元素有更多的方式搭配使用。这在CSS中是目前还无法实现的，但在CSS的预处理器中，有一种新的实现方式。如果你感兴趣，可以花几分钟阅读这篇短文，了解在CSS预处理器中父选择器还有何种方式能绑定。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/oocss-plus-sass-is-the-best-way-to-css.html",
            "title": "写CSS最好方法：OOCSS+Sass",
            "description": "\nOOCSS非常棒。但在HTML标签中有很多不具语义化的类名也并不可怕。而在HTML标签上的类名会改变就是一件很有趣的事情。如果你把OOCSS和Sass结合在一起，你会得到两个优势：CSS模块不臃肿和HTML维持不变。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/why-sass.html",
            "title": "为什么要使用Sass",
            "description": "\n为什么要用Sass？或许很多同学都会有此一句，同时也有很多同学在试问LESS（或者其他CSS预处理器语言）和Sass哪个更好，或许有很多同学在抵触使用Sass。认为能写CSS，为什么还要花时间，花成本去学习Sass。为什么要给自己增加额外的复杂性，自己给自己找麻烦。这是很多CSSer的常有的想法，但是Sass（以及其他css预处理程序）确实是一个强大的工具，它可以让任何形式的样式都能够方便的引入开发工作中去。虽然他会花费我一些时间去熟悉、适应，但是我依然很乐于这样做。究竟为何？大家要是感兴趣可以DAN CEDERHOLM的《Why Sass?》进一步了解，为什么要使用Sass。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/ecmascript-lesson-4.html",
            "title": "《献给你，我深爱的ECMAScript》之Number篇",
            "description": "\n本文主要说说ECMAScript6 Number中新引入的几个api：\n\n\t先来一个「题外问题」：请简短地说说你认识的NaN？\n \n思考了片刻，我先来说一下我的一些认知：\n\n\n<!--//--><![CDATA[// ><!--\n\n<!--//--><![CDATA[// ><!--\n\n/*468*60，创建于2014-3-16*/\nvar cpro_id = \"u1490106\";\n\n//--><!]]]]><![CDATA[>\n\n//--><!]]>\n\n   1. ECMAScript 1引入的\n   2. 全局对象的属性\n   3. 在高级浏览器是只读属性\n   4. 与任何值都不相等，包括自己\n那如何判定参数是否是NaN？ "
        },
        {
            "link": "https://www.w3cplus.com/css/what-you-should-know-about-html-email.html",
            "title": "HTML电子邮件应该知道的一些事",
            "description": "\n电子邮件是一个非常不错的媒体。它可以直接进入收件箱和ROI广泛的报到可达到4000%。它也是永远被误解和经常做得不好。最近智能手机的爆增，我们更常使用iPhone和Galaxy阅读我们的电子邮件，但不幸的是很多电子邮件营销却不能跟上。我认为这是一个大好机会，因为一个好的电子邮件可以轻松打开和取得巨大成功。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/understanding-bfc-and-margin-collapse.html",
            "title": "深入理解BFC和Margin Collapse",
            "description": "\nBFC其实没有那么神秘，BFC只是一个独立的布局环境，理解BFC对我们日常的布局设计上有着重要的帮助，并且BFC和Margin Collapse之间有着重要关联。另外文中还提到了clear float时候所产生'clearance'的计算。希望大家有所收获。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/oocss-sass.html",
            "title": "OOCSS+Sass",
            "description": "\nKrasimir Tsonev在《Starting to Write CSS》(中文版本，请点击这里)让你领略了CSS其实也是有思想的，也很有意思的。虽然介绍的各种思想都很强大，但始终没有离开CSS的层面，而CSS却又是非常的脆弱。那么有没有办法，能否结合文中多个思想在一起。你思考过吗？如果你还没有思考并不要紧，今天我们一起跟随Takeshi Takatsudo写的PPT来领略一下OOCSS与Sass的结合。\n在这篇文章，主要以两个按钮的制作，来探讨OOCSS的思想以及如何结合Sass更完美的实现。或者说，通过按钮的制作，一起探讨在Sass中如何使用OOCSS的思想。希望大家喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-other-function.html",
            "title": "Sass基础——Sass函数",
            "description": "\n在Sass中除了可以定义变量，具有@extend，%placeholders和Mixins等特性之外，还自备了一系列的函数功能。前面在《Sass基础——颜色函数》一文中主要向大家介绍了Sass函数中有关于颜色函数的功能以及使用。其实在Sass的函数功能中除了颜色函数之外，还具有字符串函数、数字函数、列表函数、Introspection函数以及三元函数等，当然大家还可以根据需求自定义函数。\n在这篇文章中，我们主要对Sass函数中的字符串函数、数字函数、列表函数、Introspection函数以及三元函数的功能能使用做一些简单的介绍，希望对初学Sass的同学略有帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/ecmascript-lesson-3.html",
            "title": "《献给你，我深爱的ECMAScript》之集合篇",
            "description": "\n本文主要说说ECMAScript6 集合中新引入的Map和Set\n以往我们用的比较多的就是Array或者Object来存取一些值\n\n\t那什么是Map?\n\n\n<!--//--><![CDATA[// ><!--\n\n<!--//--><![CDATA[// ><!--\n\n/*468*60，创建于2014-3-16*/\nvar cpro_id = \"u1490106\";\n\n//--><!]]]]><![CDATA[>\n\n//--><!]]>\n\n先看一段代码示例： "
        },
        {
            "link": "https://www.w3cplus.com/css/build-an-html-email-template-from-scratch.html",
            "title": "从头开始构建一个HTML电子邮件模板",
            "description": "\nEDM模板向来都是Web开发人员不想面对的事情，虽然在站上发布了一系列有关于EDM制作的教程，但很多人都只是略带而过，并没有亲手去实践。也就说都停留在理论的基础上，也并不知道这些理论是否正确。然后最好的理解方式就是自己动手，从头开始实战一回。如果你想实战，那么机会来了，今天我们一起跟随Nicole Merlin的《Build an HTML Email Template From Scratch》中的用例，一步一步，手把手的教你制作一个EDM模板。让你更好的理解EDM模板如何制作，希望大家喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/icon-fonts.html",
            "title": "为什么要用和如何使用字体图标",
            "description": "\n图片是有诸多优点的，然而目前在网站设计这行业面临各种各样的挑战。图片不但增加了总文件的大小，还增加了很多额外的\"http请求\"，这都会大大降低网页的性能的。图片还有一个缺点就是不能很好的进行“缩放”，因此，有时候在“响应式设计”中需要使用图像的最好解决方案就是不去使用图片。由于位图给Web制作带这诸多的不便，为了解决这些问题，CSS3给大家带来一个新的属性@font-face。\n使用@font-face制作图标已不是什么秘密，也不是什么新技术，在互联网上这样的教程铺天盖地。但是我们依然给大家介绍一篇@font-face制作图标的教程。这篇教程主要向大家阐述了”为什么要用和如何使用字体制作图标“，从教程中，你可以找到@font-face制作图标的优势与不足，同时也能找到要如何得到制作图标的字体。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/foundation-for-beginners-progress-alerts-tooltips-and-the-elusive-mega-drop.html",
            "title": "初学Foundation之Progress, Alerts, Tooltips和Elusive Mega Drop",
            "description": "\n让我们继续学习如何使用其他Foundation技术组件，如进度条、提醒框、提示工具和mega下拉功能，也看看Zurb如何应用在网站上的。我们将添加所有这些组件到上一篇教程的“自定义表单和开关”演示代码中，并且使用一个定制的jQuery，因此你会更加理解这些元素怎样才能运行在自己的工程上的，让我们开始吧！\n "
        },
        {
            "link": "https://www.w3cplus.com/css/setting-up-foundation-with-sass-and-compass.html",
            "title": "初学Foundation之使用Sass和Compass配置Foundation",
            "description": "\n总的来说，使用Sass是一种很好地加速前端开发的途径，在我的每一个项目中都会使用它。Sass(跟其他预编译器一样)是允许嵌套样式、函数编程和支持混合的。Foundation到目前为止出了几个版本，之前我们都是在使用最常见的HTML/CSS版本，现在我们将讨论如何使用Sass来创建一个版本。Foundation开发团队不但只是使用Sass来开发更加友好和动态的样式，而且还提供更多定制样式在Sass版本上而不是把HTML/CSS版本上。Sass更加适合一些这样的人，就拿我来说，设计第一，编码第二。学习HTML和CSS是很简单的，并且能够很快地实现你想要的效果，但是，要从这些学习衔接到更加高级的jQuery和JavaScript却是很困难的。前面提到，使用Sass允许你使用函数编程、支持变量和重用代码，就像使用高级的、动态语言一样。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/ecmascript-lesson-2.html",
            "title": "《献给你，我深爱的ECMAScript》之Object篇",
            "description": "\n本文主要想说说ECMAScript中的Object相关的东西，主要内容会定位在5和6。\n\n\t题外话：\n\n\n<!--//--><![CDATA[// ><!--\n\n<!--//--><![CDATA[// ><!--\n\n/*468*60，创建于2014-3-16*/\nvar cpro_id = \"u1490106\";\n\n//--><!]]]]><![CDATA[>\n\n//--><!]]>\n\n其实我自己博客一直维护着一个分类叫《js-object》，里面收录了一些框架关于Object扩展的业务api和ECMAScript已有以及新增相关. 本文中部分内容也来自这个分类，有兴趣的可以看看。\n我们先看一段代码： "
        },
        {
            "link": "https://www.w3cplus.com/tools/happy-coding-using-grunt.html",
            "title": "使用Grunt快乐编码",
            "description": "\n在平常的工作之中，我们都不断的在重复着做相同的事情，比如说将Sass编译成CSS，检测JavaScript语法，压缩CSS、JavaScript。特别在团队合作开发中，常常会为了各自的习惯而不断的发生麻烦，给开发带来极大的不便。而且前端开发人员在周而复始的做这些相同的，乏味的事情。很多时候我们想工作变得更有意义，更能专注于开发，就希望有一种工具能让我们不去做这些重复而乏味的工作。这就有了Grunt，而这个Grunt让我们编码变得更意义，更开心。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/emmet-cheat-sheet.html",
            "title": "前端开发必备！Emmet使用手册",
            "description": "\nEmmet (前身为 Zen Coding) 是一个能大幅度提高前端开发效率的一个工具，它能够让你在编辑器中书写CSS和HTML的缩写并且动态地拓展它，并且它还支持CSS3新属性和自动拓展各个浏览器的前缀，这对于开发者来说实在是一个福音！本文详细为你介绍了所有的HTML以及CSS的缩写方法，妈妈再也不用担心你HTML/CSS了！\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-brainfuck.html",
            "title": "Sass BRAINFUCK",
            "description": "\n如果您使用过Sass，你会疯狂的爱用他。虽然在Sass中有很多事情你并不想做，但有很多东西他是相当的有用，也是相当的正常，甚至可以说相当不可思议。这篇文章是Swan同学根据Hugo的《SASS BRAINFUCK》所译，带领我们一起领略Sass中的不一般。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/foundation-for-beginners-sticky-navigation-flexible-video-and-zepto.html",
            "title": "初学Foundation之固定导航,伸缩性视频和Zepto",
            "description": "\n在这一部分我们将学习一种样式不定的插件Magellan，这插件可以为你的网站创建出如粘性的导航栏。还会学习可见性class,从右到左的支持、按键、缩略图、灵活的视频功能和zepto的来龙去脉。我将详细解释用到的例子，并且讲解如何更好地在你的项目中实现这些特性。\n在此章节中，会涉及到Foundation前端框架大部分内容知识，而且我们依然还需要继续学习下去。现在，让我们来看看一些可以让你在项目快速实现的特性。先从Magellan插件开始，这个插件的主要作用就是添加、创建粘性的导航条（何为粘性？就如当你滚动网页时，一旦要抵触到导航条指定位置，该导航条就站在页面某个位置，一般在页面顶部，状态就如。）\n "
        },
        {
            "link": "https://www.w3cplus.com/css/responsive-email-design.html",
            "title": "Responsive Email设计",
            "description": "\n如果你使用一个可以上网的手机阅读你的电子邮件，你可能知道，这是一种很不爽的体验。虽然电子邮件在收件箱中看非常完美，当挤到一个小屏幕上，它绝对不能使用，小字体，窄的列和布局打乱是常见的问题。本指南中，我们将看看为什么设计移动端电子邮件成为必备的技能，里面涵盖了设计和构建移动端电子邮件的基础知识，而且还有些巧妙的技巧和技术。我们假设你知道一些关于HTML编写电子邮件的基础知识，如果没有，不用担心，我也提供了几个指南，引导您从头开始。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/foundation-for-beginners-getting-started.html",
            "title": "初学Foundation之入门篇",
            "description": "\n对于很多传统Web开发，每次从零开始开发一个工程项目都是必经之路；当每个工程项目都是不一样的时候，去创建一个可重用的代码库却是一件非常棘手的事情。许多有经验开发者可能更愿意花时间去创建一些前端框架，然而这却又是一件巨大的任务，更不用谈维持最新的框架及最佳实践。眼看每个程序员的需求，明显地，开发者是非常需要那些开源的、稳定的、可扩展性的和（最重要的）有齐全的文档说明的代码。关系到工程的大小，一个CSS网格系统可能已经满足（使用），如果你有选择地添加或者删除函数方法去满足你的需求岂不是更好吗？在本章中，我们将学习一个叫Foundation可自定义的前端框架。接下来这段时间，根据Matt Pilott的系列教程，向大家介绍Foundation框架的使用。希望对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/semantic-css-with-intelligent-selectors.html",
            "title": "结合智能选择器的语义化的CSS",
            "description": "\n或许很多前端开发人员都会困惑一个问题，在书写HTML和CSS的时候，结构更重要还是功能更重要？在一些热门的框架例如Twitter Bootstrap里面我们也会看到使用a标签来作为按钮的元素的例子，这样是否合理？一起来读一读这篇文章吧，或许能够解开你的疑惑。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/Sass-3-3-new-feature-at-root-bem.html",
            "title": "Sass ＠at-root",
            "description": "\n说到BEM，很多人并不很喜欢，看见那些特长的类名就烦了，而且在写样式的时候，选择器要那么长，更是让人感到烦感。那么告诉大家一个解决的好文案，就是使用CSS的预处理器。在SassConf大会上，给我们传递了Sass3.3的新特性。这些新特性有很多意义，特别是指令，这让你的代码会得更佳清洁。今天我们主要一起来了解Sass中的特性的使用规范。使用@at-root和BEM的结合，让你尽显BEM的优势。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/1742-Using-Regular-Expressions-In-Javascript-A-General-Overview.html",
            "title": "JavaScript中的正则表达式",
            "description": "\n我爱正则表达式。我发现几乎没有一天我不在使用它们解决一些问题。虽然我爱他们，但是，在使用中一直感觉到有点吃力。我认为这只是因为我没有对它有一个全面的深入了解。因此，我想我会花几分钟给自己（和有兴趣的其他人）一个简短的介绍。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/foundation-for-beginners-navigation.html",
            "title": "初学Foundation之导航栏",
            "description": "\n导航的制作是一个Web网站不可或缺的部分，一个站做得好与不好，导航就能体现出来。那么在一个优秀的前端框架里也是一样的，要看这个框架是否优秀，其中看该框架的导航栏是如何处理的。在Foundation框的系列教程中，继《初学Foundation之入门篇》、《初学Foundation之网格系统》之后，我们今天推出初学Foundation系列教程的第三篇——导航栏。在这篇文章中主要来学习Foundation框架中是如何制作导航栏。希望这个简单的教程，能帮助你制作导航的时候带来灵感。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/grunt-tutorial-start-grunt.html",
            "title": "Grunt教程——初涉Grunt",
            "description": "\n前端自动化，这样的一个名词听起来非常的有吸引力，向往力。当今时代，前端工程师需要维护的代码变得及为庞大和复杂，代码维护、打包、发布等流程也变得极为繁琐，同时浪费的时间和精力也越来越多，当然人为的错误也随着流程的增加而增加了更多的出错率。致使每一个团队都希望有一种工具，能帮助整个团队在开发中能精简流程、提高效率、减少错误率。随之讨论自动化部署也越来越多，并且国内很多大型团队也都有自己成熟的自动化部署工具。据我所知，百度有FIS,腾讯有Modjs，360有燕尾服，还有很多团队在使用Ant，Shell等，而现在讨论较多的是Grunt。出于对这方面的兴趣爱好，我也开始加入Grunt的使用大军，也开始在学习并尝试使用Grunt。那么从今天开始，我和大家将一起学习和使用Grunt。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-object-fit-and-object-position-properties.html",
            "title": "CSS3 Object-fit和Object-position",
            "description": "\nRWD设计中图片、视频、iframe元素的根据不同设备分辨的响应是令Web前端开发师最为头痛的问题，目前的种种解决方案都并不是一种完美的解决文案。另外很多时候在Web中，产品展示，发布的图片尺寸都不一定一致，致使我们需要通过一定的程序或者手工修改，以达到一种较为完美的展示方式。这些工作对于我们来说都是一种隐形的开发成本。不过，值得庆幸的是，CSS3提供了两个新的属性object-fit和object-position可以很好的帮我们实现图片的长宽比例，并且能快速响应。只不过到目前为止，支持的浏览器为数不多，但我们应该相信，技术是向前发展的，总有一天，这两个属性会广大的前端开发人员提供便利。如果您对他们感兴趣，不仿花点时间阅读一下。\n "
        },
        {
            "link": "https://www.w3cplus.com/css3/css3-flexbox-cheat-sheet.html",
            "title": "终极Flexbox属性查询列表",
            "description": "\nFlexbox是CSS3的一个新特性，这个特性可以帮助你实现很多以前实现起来困难的一些效果。比如会让你不会在为浮动感到困惑，不在为水平垂直居中烦恼，不在为自适应布局而感到凝惑。自从Flexbox出现，但也给前端开发人员带很语法版本的困惑，在整个发展过程中经历了三个不同的语法版本，造成前端开发人员不知道怎么使用，今天根据Sfioritto的《THE ULTIMATE FLEXBOX CHEAT SHEET》文章整理了一份Flexbox使用查询列表清单。希望对初学者有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/starting-css.html",
            "title": "开始编写CSS",
            "description": "\n你是否还在觉得CSS很简单，你是否还在学得CSSer不是程序员？如果你阅读了这篇文章，你就会觉得CSS不在简单，CSSer也不在是一个页面仔，他也可以算程序员。因为今天的CSS不在是昨天那样的CSS，他引进了很多设计思想，比如CSS预处理器、CSS对像（OOCSS）、SMACSS、Atomic设计和OrganicCSS等，你是不是从来没有听过这些名词，如果是那么我们一起跟随Krasimir Tsonev的《Starting to Write CSS》来做一个短暂的旅行，让我们重新认识一回CSS，让你知道CSSer也是非常有价值的，有思想的。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/writing-awesome-build-script-grunt.html",
            "title": "使用Grunt构建任务管理脚本",
            "description": "\nGrunt是构建Web开发的一个系统，但它创建比较困难。在这个指南中，你将学会如何配置Grunt创建一个现代的Web项目。当你完成教程中的配置之后，你的Gruntfile将具有：从源目录中向目标目录复制文件；删除构建文件；编译文件和给他们添加前缀；编译；压缩和文件；编译；当文件修改后自动构建源文件；运行开发者服务器 等。接下来的内容根据Landon Schropp的《Writing an Awesome Build Script with Grunt》所译，与大家一起学习Grunt如何构建一个Web开发系统，希望大家喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/how-to-customize-the-foundation-4-top-bar.html",
            "title": "如何定制Foundation4顶部工具栏",
            "description": "\nZurb开发的第4版本Foundation（简称为Foundation 4）使得顶部工具栏表现为非常突出，出色的顶部工具栏差不多成为一个由Foundation搭建起来网站的象征元素。今天我们将学习如何通过不同方式去实现它，把它放置在页面的其他地方，让你拥有自定义样式和响应式的水平导航菜单。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/foundation-for-beginners-custom-forms-and-switches.html",
            "title": "初学Foundation之自定义表单和开关",
            "description": "\n上节主要学习了Zurb Foundation的按钮制作，现在让我们看看自定义表单和表单开关制作。在本教程中我们主要以联系表单作为一个练习，您可以添加到您的项目或者只是拿来玩玩。一旦我们创建了这样的表单，我们将来可以直接搬到项目表单中使用。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/understanding-sass-list.html",
            "title": "理解Sass的list",
            "description": "\nSass中的List是一个让人可爱又可恨的东西。主要是他的语法太宽松，你几乎可以做任何你想做的事情。如果要想更好的使用好Sass语言中的List功能，我们就必须的深入了解他。Hugo写了几篇教程，其深入的培析了Sass的List功能，以及其使用方法。而在Sass的社区中对List的功能讨论也是相当的激烈。这些天我也一直在阅读这几篇文章，想让自己能更好的理解Sass中的List功能。今天根据这几篇文章，对List功能的介绍做了一些翻译与整理。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/ecmascript-lesson-1.html",
            "title": "《献给你，我深爱的ECMAScript》开篇",
            "description": "\n\n\t本系列之个人初衷：\n从有这个想法到真正一点一点开始写，再到这个beta版本上线，其实有很多心酸。 基本都是挤出的大部分的私人时间（有晚上的7-10点，有周六日和几个北京暴热的夏夜通宵等等），能够坚持下来，我自己很开心也很欣慰。\n也声明： 本文中代码均个人手敲，发布前也大致校正了一版，但是难免会有问题，希望大家可以在评论区留言，会第一时间修复。\n也承诺： 考虑到ECMAScript本身的特殊性，本文中列举的部分ECMAScript6标准还没有定稿，会一直保持更新状况。\n也欢迎： 欢迎对此感兴趣的同学加入进来，对系列内容进行补充。\n其实和我2012-09-20发布的 《个人呕心沥血之作-----js大脑图beta01版正式发布》，当然有心的人能看出那个大脑图不是市面上的一些简单地罗列原生属性和方法的图， "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-future-use-ampersand.html",
            "title": "Sass3.3新特性之连体符＆",
            "description": "\nHugo Giraudel在《Looking Into the Future of Sass》(译文Sass新特性)一文中向大家介绍了Sass的十大新特性。这些特性都将让你的工作变得更简单与方便。那么今天我主要想向大家介绍我自己对Sass3.3中几个新特性的理解与使用心得，希望对大家的学习有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/css-noise.html",
            "title": "使用CSS和DataURI来添加杂色滤镜效果",
            "description": "\n前几天在codewall上看到一篇“CSS Background Noise”的文章，用css+DataURI来实现给html元素添加杂色效果，可以在不增加http请求的情况下，实现不错的杂色效果。自己跟着实践了一下，在这里也就按照原文的步骤，自己翻译加整理实践，分享给大家。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/get-up-running-grunt.html",
            "title": "使用Grunt启动和运行",
            "description": "\n在本文中，我们将探讨如何使用Grunt在项目和你的网站更快。我们将简要的分析一下Grunt可以做什么，如何设置和使用各种插件来做举世瞩目的项目。我们将看看如何构建一个简单的表单验证器，使用Sass预处理器，如何使用和CssMin结合压缩我们的CSS，如何使用HTMLHint确保我们的HTML书写正确，如何在构建我们的压缩资产，也会看看使用UglifyJS减小我们JavaScript的大小和确保我们的网站使用尽可能的少的带宽。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/retina-icon-sprites.html",
            "title": "Sass Mixins——支持Retina的Icons Sprite",
            "description": "\nSprites(国内称之为雪碧图)，平常很多时候都是依赖于手工在制作软件中完成，或者依赖于第三方插件自动生成Sprites图。这样虽能实现雪碧图，但在来很多工作量。如果你开始使用Sass或者Compass，你可以发现他们有一个强大的功能，可能使用Sass的mixins自动生成雪碧图。特别是在Retina显屏的时代，使用Sass的mixins生成雪碧更让我们前端人员变得轻松。这篇Evanshajed的《Sass Mixins Icons Sprite with Retina Support》所译，在文章中详细介绍了如何使用Sass的Mixins自动生成普通显屏和Retina显屏的雪碧图。希望这篇文章对大家有所帮助。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/responsive-html-email-design.html",
            "title": "如何设计一个响应式的HTML电子邮件",
            "description": "\n在过去的几年中，移动端使用的飙升，使我们向网络用户提供内容的方法引起了一场进化或者革命。最终目标是流体的，适应移动端和device-agnostic　Web以及一个已成为受人青睐的学派：响应式设计。然而，虽然响应式设计思想高涨，而电子邮件设计和开发一直在努力跟上。在某种程度上，HTML电子邮件对开发者而言是一个异常复杂的介质，这是一个铁的事实。古老的电子邮件客户技术无法呈现现多的许多的规则，致使一些代码无效。但电子邮件仍然是一个关键的营销渠道，这非常的重要，不能让人忽视的是2012年上半年Litmus公布了一个在移动设备上打开电子邮件的报告，报告显示使用移动设备查阅电子邮件增加了80%。同年Campaign Monitor显示，第一次他们的移动电子邮件打开率实际上已经超过了桌面和Web邮箱。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/fun-with-icomoon-sass-and-font-icons.html",
            "title": "IcoMoon+@font-face+Sass制作Icons",
            "description": "\n自从CSS3的@font-face属性的出现，使用@font-face制作ICON变得越来越流行，使用的频率也越来越高，在很多网站上都能见到他们的影子。随着IcoMoon的在线生成工具的出现，可以使用IcoMoon制作自己你自己的ICON。今天阅读了jaydenseric写的《FUN WITH SASS & FONT ICONS》教程，介绍了如何使用Sass和结合制作字体图标。实在是强大而又有意思，自己动手操作了一回，准备向大家介绍一下，我自己是如何使用IcoMoon、@font-face和Sass三者结合在一起，制作出自己需要的字体图标。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/grunt-boilerplate.html",
            "title": "Grunt Boilerplate",
            "description": "\nGrunt是JavaScript创建的任务管理器。这意味着它将帮助你自动化运行任务，比手工运行任务节约更多时间。而且讨论和使用的人越来越多，做为前端的人员，我们很有必要学习和掌握Grunt的使用。因此我也脱不了这个俗，加入学习Grunt的阵营。今天根据Mark McDonnell的《Grunt Boilerplate》所译，以Grunt Boilerplate项目为例，向大家介绍了如何使用Grunt构建常用的任务管理器。如果你也感兴趣，那就继续往下阅读吧。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/use-ampersand-in-selector-name-with-Sass.html",
            "title": "Sass中连体符（&）的运用",
            "description": "\n在CSS中，要想给一个元素赋予一定的样式，我们必须得先取到这个元素。那么就得需要选择器，通过选择器来选择指定元素，然后赋予所需的样式。而CSS选择器有很多种，比如层次选择器中的后代选择器、兄弟选择器、通用兄弟选择器等。而这些选择器都通过元素与元素之间的关系来确定的，当然在CSS中仅仅不只这几种选择器方式，还有其他优秀的选择器帮助你做更多的事情。而在这篇文章中我们主要探讨的是连体符&在Sass中，是如何让你的选择器变得更加的灵活，更加的简单。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/future-sass.html",
            "title": "Sass的新特性",
            "description": "\nSass是CSS的预处理器，这也是现在最常见讨论的一个话题。Sass最早是2007年由Hampton Catlin提出。Sass到现在已经走了很长的路了，到现在也是最常见的CSS预处理程序。如果您还不知道什么是Sass，我强烈推荐您阅读一下David Walsh写的这文章和Chris Coyier写的文章。不管什么情况之下，我将假定您基本都了解Sass，你们当中有一些人甚至是Sass的铁杆粉丝！这些都不先考虑，如果有一篇博客介绍Sass的未来特性，那多好。今天根据Hugo Giraudel的《Looking Into the Future of Sass》所译，与大家分享Sass的一些新特性与功能。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/challenging-css-best-practices-atomic-approach.html",
            "title": "挑战最佳CSS实战",
            "description": "\n这篇文章介绍的技术特性在Yahoo通过实践以及有问题的技术代码到今天为止我们还在使用。你可能有兴趣阅读Jonathan Snook的《Decoupling HTML From CSS》、Tim Huegdon的《On HTML Elements Identifiers》和Robin Rendle的《Atomic Design With Sass》等等。请记住：一些提到的技术并不认为是最佳实践。根据Thierry Koblentz的《Challenging CSS Best Practices》所译,介绍作者是如何挑战最佳CSS实践，希望大家会喜欢。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-color-function.html",
            "title": "Sass基础——颜色函数",
            "description": "\n色彩是设计的一个美妙元素和一个至关重要的工具,同时他能帮助你更好的抓住您的客户。更为重要的是，色彩能帮你表达某些特定的情感，把用户视线带到特点的地方或者帮助你传达信息。在Web设计中，主要依靠颜色来表达你的色彩。\n如果你只是直接丢一堆颜色给用户，他们也不会集中注意力在你的设计上的。色彩很微妙，所以为了让色彩成为可被利用的工具我们必须正确使用它。像其他设计元素一样，色彩也要好好利用才能发挥它的魔力。\n但实际中，仅依靠CSS常用的颜色功能并不能迅速帮我们锁定需要的颜色。特别在很多时候，设计师在设计图中并没有明显标注某个控件其他状态颜色值时，我们不得不依靠设计工具，获取相近色。可这种方法并不是理想方法，很多时候让你的颜色（特别对颜色不感冒的同学）偏离你的产品，直接让你无法抓住你的客户。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/traveled-2013-years.html",
            "title": "走过的2013年",
            "description": "\n在新年将至的当中，大家都在思考，都在回味，都在总结，都在向往。我也同样不能脱俗，一直都在思考，为2013一年，为自己走过的这一年，为w3cplus这一年做一个总结，但一直不知道如何执笔开始。思来想去，有了下面的一些记录，只想让这些记录告诉我，2013看走过的一切，同时让我更好的迎接2014年，迎接新的一年，迎接新的人生。\n自从有了W3cplus之后，我热衷于前端技术，喜欢前端的活动，更爱上了前端的技术分享。在2013年当中，在众多朋友一起努力之下，总共发表博文279篇，其中技术博文216篇，CSS3教程61篇，CSS3案例25篇，收集前端各类在线工具近100个，整理jQuery插件近300个。还有前端较为新的技术，包括Sass教程47篇，Grunt教程近10篇，响应式设计近27篇。而且在今年在众多同学的帮助之下，组织翻译外国博文近115篇。看到这些数字，也让自己感觉到在2013年当中没有白混，让我自己更好的准备迎接2014年。\n "
        },
        {
            "link": "https://www.w3cplus.com/css/powerful-workflow-tips-tools-and-tricks-for-web-designers.html",
            "title": "利于网页设计师的强大工作流程小窍门、工具和技巧",
            "description": "\n设计和开发的工作是比较花耗时间的，尤其当该工程遇到一个新的挑战时，都把整个团队或者自由开发者陷进一个未知的领域。而且，时间是生产力的一个关键因素。有效地工作会提高我们工作竞争力，自我增值。\n然而，对每个工程来说，有一些操作步骤是重复的。为了拥有自由、空间去尝试新的解决方案，我们应该知道有一些操作步骤可以尽可能更快地完成。Spy根据Melanie Lang的《Powerful Workflow Tips, Tools And Tricks For Web Designers》所译,主要围绕“工具”、“小窍门和技巧”，将使得你的标准工作流程尽可能地使用得更快，因此你可以为工作中那令人激动的部分腾出更多的时间。\n "
        },
        {
            "link": "https://www.w3cplus.com/tools/using-emmet-speed-front-end-web-development.html",
            "title": "使用Emmet加速Web前端开发",
            "description": "\nEmmet插件以前被称作为Zen Coding，是一个文本编辑器的插件，它可以帮助您快速编写HTML和CSS代码，从而加速Web前端开发。早在2009年，Sergey Chikuyonok写过一篇文章，提出编写HTML和CSS的新方法。这一革命性的插件指的就是Zen Coding，经过很多开发者多年来的努力与帮助，现在已达到了一个新的水平。也就是今天所说的Emmet插件。\n "
        },
        {
            "link": "https://www.w3cplus.com/js/backbone-js-tips-patterns.html",
            "title": "Backbone.js的技巧和模式",
            "description": "\nBackbone.js是一个开源JavaScript“MV*”框架，在三年前它的第一次发布的时候就获得了显著的推动。尽管Backbone.js为Javascript应用程序提供了自己的结构，但它留下了大量根据开发者的需要而使用的设计模式和决策，并且当开发者们第一次使用Backbone.js开发的时候都会遇到许多共同的问题。\n因此，在这篇文章中，我们除了会探索各种各样你能够应用到你的Backbone.js应用中的设计模式外，我们也会关注一些困惑开发者的常见问题。\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-triangle-mixin.html",
            "title": "SASS基础——SASS Triangle Mixin",
            "description": "\n《SASS基础——十个常见的Mixins》一文中介绍了SASS中常见的十个，当然这些其实对应的就是CSS中常用到的公共样式，例如：设置行内块，水平居中，浮动，以及重置浮动，清除浮动以及图片替换文本和隐藏元素等等。事实上，SASS的不仅仅只做这些简单的工作，只要你原意去想，你会发现，你可以定制很多你熟悉的功能，甚至可以将某些在线样式生成器，定义成一个，实现所需效果。\n由在线生成三角工具出发做为思考，结合不同的Sass实现的。最终在Bourbon，sassCore和Migue Lmota三个基础实现一个全新的，在这个集合了众家之处。仅从代码层看，变得复杂化，但在实际使用上和生成三角的代码都无太多差异化。使用这个可以实现和等效果。\n\n\t \n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/sass-px-to-rem-with-mixin-and-function.html",
            "title": "Sass基础——Rem与Px的转换",
            "description": "\nrem是CSS3中新增加的一个单位值，他和em单位一样，都是一个相对单位。不同的是em是相对于元素的父元素的font-size进行计算；rem是相对于根元素html的font-size进行计算。这样一来rem就绕开了复杂的层级关系，实现了类似于em单位的功能。在《Sass基础——PX to EM Mixin和@function》一文中介绍了通过Sass的mixin和function实现px与em如何进行转换计算，今天在这篇文章向大家介绍Sass中px与rem单位互转的实现方法\n "
        },
        {
            "link": "https://www.w3cplus.com/preprocessor/ten-best-common-mixins.html",
            "title": "SASS基础——十个常见的Mixins",
            "description": "\n从W3cplus最近的更新都可以看出我的学习新动向。是的，自从开始学习SASS之后，我喜欢上了SASS。因为他能让我的工作效率更快，同时让我更加节约出时间去做一些我自己喜欢的事情。\n现在开始我开始使用SASS私下用在我喜欢的项目中，让我更加的对SASS喜欢与执着。在使用过程中，SASS中的Mixins让我觉得他的功能强大，使用方便——SASS的Mixins可以一次性定义功能模块，让你在任何地方调用，并且可以无限制的重用。\nCompass是一个SASS的库，里面包括了很多有用的功能模块，比如说和等。但很多时候，这些功能模块还无法满足我们所有项目的需求，但是大家可以根据自己的需求定义一些功能模块。接下来主要和大家一起探讨一些在实际项目中经常使用的。\n "
        },
        {
            "link": "https://www.w3cplus.com/performance/build-fast-loading-mobile-website.html",
            "title": "让你的网站在移动端健步如飞",
            "description": "\n最近一项 研究表明,80%的网民对移动端的浏览体验感到失望,同时,当体验提升时,他们会在智能手机上花费更多的时间。这不奇怪，因为64%的智能手机用户希望网站可以在4秒内加载完毕，但一半的网站花费了二倍以上的时间，达到了9秒。这篇文章会阐述一些可以使你的网站在移动端跑得更快的技术。99根据Johan Johansson的《How To Make Your Websites Faster On Mobile Devices》所译，向大家介绍如何让你的网站在移动端健步如飞。\n "
        }
    ]
}