{"list": [{"link": "https://www.w3cplus.com/javascript/intro-dom.html", "title": "JavaScript学习笔记：初识JavaScript的DOM", "description": "\nJavaScript知识一直都是自己的短板，近一年多来一直在致力于增加这方面的能力，也在W3cplus梳理了一些有关于自己学习JavaScript的笔记。加上最近学习Vue相关的技能，越发自己在JavaScript方面的能力还欠缺很多，所以这段时间一直在补习JavaScript中DOM相关的知识。希望对于初学者有所帮助。\n "}, {"link": "https://www.w3cplus.com/css/CSS-Houdini-starry-sky.html", "title": "用CSS Houdini画一片星空", "description": "\n要问2018最让人兴奋的CSS技术是什么，CSS Houdini当之无愧，甚至可以去掉2018这个限定。其实这个技术在2016年就出来了，但是在今年3月发布的Chrome 65才正式支持。CSS Houdini可以做些什么？谷歌开发者文档列了几个Demo，我们先来看一下这几个Demo。\n "}, {"link": "https://www.w3cplus.com/vue/methods-computed-and-watchers-in-vue-js.html", "title": "Vue中的方法，属性计算和观察者", "description": "\n我喜欢使用Vue的原因之一是，Vue中的methods、computed和watchers的使用是多么的有用。如果没有彻底的理解它们之间的区别，就很难充分利用Vue的功能。尽管如此，我看到的大多数人对这个框架感到困惑，他们也会其中的差异感到困惑，所以我们很有必要的去了解一下这方面的知。\n "}, {"link": "https://www.w3cplus.com/css/1-html-element-5-css-properties-magic.html", "title": "一个HTML元素和五个CSS属性的魔力", "description": "\n假设我告诉你，我可以使用一个HTML元素和五个CSS属性实现下图的效果。而且这个效果没有使用任何一行SVG代码，也没有使用图像（只是在html元素上使用了background设置了一个背景图片，只是为了表明这个元素有一些透明的部分），同样也没有使用JavaScript代码。你一定会觉得很神奇，对吧！有好奇之心，对于我们做前端的同学而言，应该一直都有，只有这样才能做出很多我们一直以为实现不了的效果，比如接下来要介绍的内容。\n "}, {"link": "https://www.w3cplus.com/vue/vue-render-function.html", "title": "Vue 2.0学习笔记：Vue的render函数", "description": "\n前几天想学学Vue中怎么编写可复用的组件，提到要对Vue的render函数有所了解。可仔细一想，对于Vue的render函数自己只是看了官方的一些介绍，并未深入一点去了解这方面的知识。为了更好的学习后续的知识，又折回来了解Vue中的render函数，这一切主要都是为了后续能更好的学习Vue的知识。\n "}, {"link": "https://www.w3cplus.com/vue/vue-extend.html", "title": "Vue 2.0学习笔记：Vue.extend构造器的延伸", "description": "\n前段时间花了不少的时间在学习和了解Vue的组件，虽然中间浅尝了Vue组件的基础，体验了其魅力，但还是有很多深层的东西未掌握，也还不能非常灵活的使用Vue的组件。但这一切并不重要，随着后面的学习，我想会对Vue越来越熟悉。这两天在看Vue中的Vue.extend构造器，今天简单的对这方面的东西做个笔记。\n "}, {"link": "https://www.w3cplus.com/css/scooped-corners.html", "title": "CSS如何实现内凹角效果", "description": "\n记得@Lea Verou的《CSS Secrets》一书和前几天@Chris Coyier刚发的帖子都介绍了CSS怎么实现元素斜切口的效果。我也尝试着借助Vue的能力，把这种效果构建成一个Vue组件。我把这种效果定义为外切口。而今天将要聊的是与其刚好相反的一个效果：CSS如何实现内凹角的效果。\n "}, {"link": "https://www.w3cplus.com/css/using-conic-gradients-css-variables-create-doughnut-chart-output-range-input.html", "title": "使用圆锥渐变和CSS自定义属性创建一个Range Input控制的环形图", "description": "\n最近我在 Codepen 上看到了一个例子，我的第一个想法是这个案例可以只用三个元素完成：一个容器，一个 range 类型的 input 和一个 output 。在 CSS 方面，涉及到使用一个把 CSS 自定义属性作为范围渲染参数的圆锥渐变函数 conic-gradient() 。\n "}, {"link": "https://www.w3cplus.com/javascript/7-tips-to-handle-undefined-in-javascript.html", "title": "使用JavaScript中undefined小技巧", "description": "\n在8年前，我刚开始学习JavaScript时，让我觉得有点奇怪的是，undefined和null同样代表空值。它们之间是否有明确的不同？它们看起来都定义为“空”，此外，比较null== undefined的结果是true。大多数的现代语言如Ruby, Python 或Java只有一个空值(nil或null)，而这，似乎才是合理的。在JavaScript中，当访问一个尚未初始化的变量或对象属性时，解释器会返回undefined。\n "}, {"link": "https://www.w3cplus.com/javascript/understanding-null-undefined-and-nan.html", "title": "理解JavaScript中null、undefined和NaN", "description": "\n当您开始学习JavaScript时，首先需要学习的是数据类型。只要我们讨论Number、String、Boolean和Object时，一旦涉及到null和undefined出现时，作为初学者要理解清楚他们就可能会有点混乱。\n "}, {"link": "https://www.w3cplus.com/javascript/trigonometry-you-must-know.html", "title": "三角函数在前端动画中的应用", "description": "\n我是个很懒的人，开发过程中经常有意无意地刻意避开数学相关的知识，你也知道解数学题非常枯燥无趣。平时写动画也尽量使用 CSS3 来实现，timing-function 随意选用，最多也就调一下 cubic-bezier，找到看着舒服的就行。但是怎样让动画更顺滑，写出更贴近自然的动画，说实话以前我没怎么考虑过。每次当动效设计师提出，能不能这样那样的时候，我会理所当然地予以否决。所以有很长一段时间，我非常羡慕那些能用 canvas 绘制很酷炫的动画的程序员。\n "}, {"link": "https://www.w3cplus.com/javascript/how-to-build-the-simple-camera-component.html", "title": "如何构建一个简单的摄像头组件", "description": "\n这篇文章主要跟着@David East的《HOW TO BUILD A SIMPLE CAMERA COMPONENT》 学习。学习如何使用MediaDevices API获取摄像头的访问权限，然后将相关的流通过video元素来播放。并且将视频流通过canvas元素转换为blob或base64格式的图片。并且依赖于自定义元素将这些功能封装成一个简单的摄像机组件。感兴趣的同学，请继续往下阅读。\n "}, {"link": "https://www.w3cplus.com/javacript/building-your-own-javascript-modal-plugin.html", "title": "如何使用JavaScript构建模态框插件", "description": "\n作为一位Web开发人员而言，模态框（Modal）并不会陌生。就我个人而言，我更为熟悉的是怎么通过CSS来编写一个模态框以及怎么通过CSS给模态框添加一些动效。正好最近工作中也和Modal框杠上了。另外想更好的设计一个模态框用来满足业务需求的普遍性和实用性，甚至是达到可配置性。所以一直在探究模态框相关的知识，同时正好看到了@Ken Wheeler的教程，对于我这样的菜鸟，能很好的了角如何使用原生的JavaScript来构建一个可用的模态框插件，另外为以后如何使用Vue构建更为灵活的模态框组件打下坚实的基础。如果你对该文章感兴趣，或者你也正在加强JavaScript的学习和实战，欢迎继续往下阅读，或许对你有所帮助。\n "}, {"link": "https://www.w3cplus.com/css/advanced-effects-with-css-background-blend-modes.html", "title": "CSS混合模式高级应用", "description": "\n首先要声明的是，我们在这篇文章中要了解的不是CSS混合模式如何使用，而是来一起探索CSS混合模式的一些高级运用以及它能做些什么，又会带来什么样的效果。操作过像Photoshop这样的图像处理软件的同学，对于图层混合模式一定不会感到陌生，但对于CSS中的混合模式，估计还是有不少的同学会感到陌生或者好奇。在这篇文章并不会介绍CSS的混合模式相关的属性怎么使用，而会探讨CSS的混合模式的一些高级运用，以及对应的效果。\n "}, {"link": "https://www.w3cplus.com/in-alibaba-three-years.html", "title": "我在阿里的三年", "description": "\n时光如梭，转眼一逝，已经在阿里呆了三年了。在阿里有句话 —— 一年香，三年醇，五年陈。另外还有一句话就是说在阿里，要呆完三年才算是阿里人。自己非常的荣幸，有幸在阿里成功的呆了三年，也有幸成人 —— 成为阿里人。借着这次，对自己在阿里过去的三年光阴做一个简单的整理与总结。就算是对过去三年的复盘吧。\n "}, {"link": "https://www.w3cplus.com/relearn-the-front-end-techniques.html", "title": "聊聊《重学前端》", "description": "\n这两天票圈被@Winter大大在极客时间平台推出的《重学前端》刷屏了，而且在微信群和知乎上都有相关讨论。讨论中各种声音都有，可算是热闹了。今天我也凑个热闹，来聊聊我对这个课程的看法。\n "}, {"link": "https://www.w3cplus.com/javascript/DOM-manipulation-tutorial-series.html", "title": "DOM系列：DOM操作小结", "description": "\nDOM是JavaScript的基础之一，自己学习DOM的操作也有一段时间了，到今天为止DOM系列的教程刚好有十篇了，这部分都主要是围绕DOM操作的笔记。主要围绕DOM元素的增、删、改、查，DOM节点的操作以及元素尺寸、位置获取和设置等知识。今天这篇文章主要是小结一下。希望对一些像我这样的初学者有所帮助。\n "}, {"link": "https://www.w3cplus.com/javascript/event-capturing-bubbling-javascript.html", "title": "DOM系列：DOM事件的传播", "description": "\n通过前面的DOM事件模型和事件绑定的姿势两节的学习，我们对JavaScript中的DOM事件有了一定的基础。但忽略了有关事件如何被触发的重要细节。\n "}, {"link": "https://www.w3cplus.com/css/css-values-and-units.html", "title": "图说 CSS：CSS 的值和单位", "description": "\nCSS 的值和单位是 CSS 另一个独立功能模块，到目前为止，该模块已到了 Level 4 阶段（CSS Values and Units Module Level 4）。今天我们就来聊聊这个模块里的内容。对于 CSSer 来说，对于 CSS 中的值和单位应该不会感到陌生，但大部分同学应该都会把精力集中于单位这一块，事实上也是如此，在这篇文章中，我们所涉及到的大部分内容也是聊单位这一块，对于值这一部分只会花一点点内容略为带过。\n "}, {"link": "https://www.w3cplus.com/vue/using-event-bus-to-share-props-between-vue-components.html", "title": "使用事件总线共享组件之间的Props", "description": "\n默认情况下，Vue组件之间的通讯是通过Props来完成的。Props是从父组件向子组件传递属性。Props总是从父组件向子组件传递。随着应用程序复杂度的增加，你会慢慢遇到所谓的Prop Drilling，这里有一篇文章介绍了这方面的东西，虽然是React方面的，但也适用于Vue。Prop Drilling是将props向下、向下、向下传递给子组件的想法 —— 正如你想象的那样，这通常是一个乏味的过程。因此，繁琐的Prop Drilling可能是一个复杂的潜在问题。另一个与不相关的组件之间的通讯有关。我们可以通过使用事件总线来解决这些问题。什么是事件总线？这个名字本身就是一个总结。这是一个组件将props从一个组件传递到另一个组件的一种运输方式，无论这些组件伴于树的哪个位置。\n "}, {"link": "https://www.w3cplus.com/css/where-lines-break-is-complicated-heres-all-the-related-css-and-html.html", "title": "CSS中最全的换行处理方式", "description": "\n在Web页面上常常可以看到某个元素内部有一个很长的单词，元素的宽度不足以容纳它。一个常见的现象就是有一个很长的URL。这会发生什么呢？这取决于CSS，那么CSS如何控制布局，以及CSS如何让文本更合理的方式展示。\n "}, {"link": "https://www.w3cplus.com/javascript/style-and-class.html", "title": "DOM系列：样式和类", "description": "\n对于任何一位Web开发者而言，处理CSS样式很多时候还是会借助JavaScript。简单的说，我们会碰到一些交互（或UI效果的变化）都会通过JavaScript来处理style或类。那么今天我们将要学习的是如何通过JavaScript来控制样式和类名，在深入讨论JavaScript处理样式和类的方法之前，我们需要知道在Web页面中元素的样式处理通常有两种方式。\n "}, {"link": "https://www.w3cplus.com/css/create-calculator-with-css-grid.html", "title": "构建一个计算器：UI界面设计", "description": "\n从这篇文章开始，将会花几篇文章的篇幅来介绍如何构建一个在线的计算器，将前面学习的一些知识串在一起，通过实战加强对理论知识的理解。实现计算器主要分为两个部分，一个是构建计算器的UI，另一个通过JavaScript实现计算器的功能。在完成这两个部分内容的学习，建议您需要对下面的几个知识点有所了解： 网格布局和 渐变。\n "}, {"link": "https://www.w3cplus.com/css/css-custom-properties-strategy-guide.html", "title": "CSS自定义属性使用指南", "description": "\nCSS自定义属性有很大的潜力可以改变我们编写和组织 CSS 的方式，并且在一定程度上改变 JavaScript 与 UI 组件的调用方式。我并不关心语法和它们的工作方式（为此，我建议你阅读“《是时候开始使用自定义属性》这篇文章。同时我想更深入地研究如何充分使用 CSS 自定义属性。\n "}, {"link": "https://www.w3cplus.com/css/fonts-module-level4-color-font.html", "title": "CSS 字体新玩法之彩色字体", "description": "\nCSS Fonts Module Level 4 工作草案中的一大新特性即为 Color Font 的支持，来了解一下吧!如果你们设计师想在某些特别的专题活动中使用下图的字体作为标题字体进行展现，怎么办呢？做成图片咯。然后你可能会遇到这几个问题：不同屏幕下的适配，要是只做一种尺寸的图，放大或缩小后的效果都不太好。直接做成 SVG？好像不能复制到 Word 里面加粗啊，也就是说，这种做法使得这些“文字”本身失去了真实文字该有的能力。\n "}, {"link": "https://www.w3cplus.com/css/css-border-radius-can-do-that.html", "title": "CSS border-radius 能做什么？", "description": "\n在CSS中，使用border-radius指定八个半径值时，可以创建不同的形状。先来看一个为该特性制定的工具。@Rachel Andrew今年在苏黎世的前端会议上谈到了CSS Grid布局的优势。在她演讲的最后，她提到了一个在我脑海中挥之不去的CSS 属性:通过border-radius可以使图像有良好的形状效果。听完这个演讲之后，我认为你肯定可以创造出更多的圆圈，并开始深入挖掘使用border-radius可以做什么？\n "}, {"link": "https://www.w3cplus.com/vue/vue-transition.html", "title": "Vue 2.0学习笔记：Vue的transition", "description": "\n动效在Web中一直是一个有争议的问题。动效做得好有助于在你的Web程序上锦上添花，甚至是留住你的用户，也可以具有较好的用户体验；反之，如果动效运用的不好，会给用户带来一种反感，让用户迅速地离开你的应用。怎么提供更友好的动效，并不是今天我们要讨论的重点，我们要讨论的是：在Vue应用程序中如何添加动效？在Vue中，提供了多种方法来给你的运用程序添加动效，比如CSS的transition和animation动效，以及在Vue的生命周期的钩子函数中操作DOM。甚至你还要以使用第三方动画库，比如GSAP或Velocity.js来制作动效。\n "}, {"link": "https://www.w3cplus.com/animation/how-you-can-use-simple-trigonometry-to-create-better-loaders.html", "title": "如何使用简单的三角函数创建Loading效果", "description": "\n在这篇文章中，将使用三角函数的基本概念，重新创建一个更平滑的Loading效果。我知道这听起来很奇怪，但请相信我，这里一定会很有趣。你会惊讶地发现，要编写的代码很少。当然，你可能会担心三角函数相关的知识，事实上是你不需要知道三角学或数学你能理解这篇文章。我将会解释这里的每个圆相关的事情。\n "}, {"link": "https://www.w3cplus.com/css/css-selectors-level-4.html", "title": "初探CSS 选择器Level 4", "description": "\n在开始聊CSS选择器Level 4（Selectors Level 4）之前，先要明确一个简单的概念。时至今日，在CSS的世界之中再不会有大版本的称谓，比如以前大家熟悉的CSS2.1、CSS3。现在的CSS都只会以CSS模块的版本来进行区分，比如我们今天要聊的CSS选择器，其最新版本就是：CSS Selectors Level 4。在CSS Selectors Level 4中为选择器增添了不少的新特性，当然这些新特性有的已得到浏览器的支持，有的只得到部分主流浏览器的支持。所以接下来，花点时间学习一下，以备后用。\n "}, {"link": "https://www.w3cplus.com/css/dry-switching-with-css-variables-the-difference-of-one-declaration.html", "title": "如何通过CSS自定义属性给CSS属性切换提供开关", "description": "\nCSS自定义属性相关的教程在互联网上可以说是铺天盖地，从简单的介绍，到使用指南的整理，以及相关的经验之谈等等。时至今天而言，CSS的自定义属性是一项很成熟的CSS特性，在很多方面都可以给前端开发者带来诸多的益处。而且在现代浏览器中也得到了较好的支持。当然，虽然CSS自定义属性已得到很好的支持，但很多同学还在担心其是否可以运用于生产环境，甚至也有不少的同学还在排斥该特性。虽然如此，我还是想花点时间再和大家聊聊今天的主题。这个主题来自于@Ana tudor大神在去年年底发布的两篇文章，可以说是把CSS自定义属性运用的淋漓尽致。\n "}, {"link": "https://www.w3cplus.com/css/practical-css-scroll-snapping.html", "title": "实战CSS Scroll Snapping", "description": "\n如果考虑周全，滚动捕捉可以是一个有用的设计工具。CSS Scroll Snap Points允许你连接到浏览器的本机滚动交互，因此你的界面感觉无缝且平滑。随着JavaScript API的出现，这些功能将变得更加强大。CSS Scroll Snap（CSS 滚动捕捉）允许你在用户完成滚动后多锁定特定的元素或位置。\n "}, {"link": "https://www.w3cplus.com/css/style-button-right-way.html", "title": "如何更好的控制按钮样式", "description": "\n在Web页面或应用程序中都可能会有按钮的出现，甚至很多时候链接的样式看起来也像个按钮。那么我们应该怎么来美化按钮的样式呢？在这篇文章中，我们一起来聊聊按钮样式应该怎么才能更好的控制。\n "}, {"link": "https://www.w3cplus.com/vue/how-to-create-data-driven-user-interfaces-in-vue.html", "title": "在Vue中如何用数据来驱动用户界面", "description": "\n虽然我们通常知道在应用程序中构建大多数视图（View）时需要哪些组件（Component），但很多时候我们并不知道这些组件在运行时是什么。这意味着我们需要基于应用程序状态、用户首选项或API的响应来构建一个页面。一个常见的情况是构建动态表单，其中需要整清楚的是：组件是由JSON对象配置的，还是基于用户的答案而更改的字段来构建。所有现代JavaScript框架（比如我们熟悉的Vue、React等）都有处理动态组件的方法。这篇文章将向您展示如何在Vue中实现它。JavaScript为上述场景提供了一个非常优雅和简单的解决方案。\n "}, {"link": "https://www.w3cplus.com/css/talk-attribute-selectors.html", "title": "再聊CSS的属性选择器", "description": "\n属性选择器是很强大很神奇的。很多时候可以帮助你摆脱一些棘手的问题，可以让你避免类名的添加，甚至还可以指出代码中的一些问题。属性选择器是复杂而又强大的，但不用担心，因为它也是易于学习和使用的。在本文中，将会学习到CSS属性选择器的强大功能以及如何在实际工作中运用它。并提供了一些关于如何使用属性选择器的一些个人想法。\n "}, {"link": "https://www.w3cplus.com/css/currentcolor-vs-custom-properties.html", "title": "currentColor与CSS自定义属性之间的差异", "description": "\n变量对于CSS而言是这两年大家关注的一个话题。对于变量而言，最早是出于CSS的一些处理器语言当中，比如Sass、LESS之类的。随着CSS的发展，变量的概念也被引入到CSS中。时至今日，在CSS中的变量不被称作变量，而被称为CSS自定义属性。该特性让我们维护CSS、编写CSS变得更易。而事实上呢？在CSS最早的变量之一是currentColor。该特性也可以更好的帮助我们编写CSS和扩展CSS。那么今天我们来开另一个话题，currentColor和CSS自定义属性又有何差异呢？接下来的内容，我们就来一起探讨这方面的细节。currentColor和自定义属性之间还是存在一些有趣的区别。这两个都是CSS中动态属性的例子，但是它们的解析方式在一些非常重要的方面还是有所不同的。至于为何不同，接下来的内容将向大家揭开。\n "}, {"link": "https://www.w3cplus.com/css/understanding-degrees-on-the-web.html", "title": "聊聊Web中的度数单位", "description": "\n说到度数，你可能已经从生活中了解了很多关于他们相关的知识。在学校里学习几何课，做基本的木工活，进入外层空间或在图像编辑器中旋转一个元素等，都会有角度相关的身影。在现实世界中，度数几乎是测量角度的单位。它在Web中同样是一个受欢迎的角色，也适用于我们将遇到的各种场景。幸运的是，在现实世界中的度数和虚拟世界中的度数有很多相似之处，所以在这篇文章中将来学习一些有关于度数相关的知识，然后深入了解一些细节。\n "}, {"link": "https://www.w3cplus.com/css/drawing-images-with-css-gradients.html", "title": "使用CSS渐变绘图", "description": "\n这里所说的绘制是指CSS图像，即使用HTML元素和CSS属性绘制的图像。它们看起来像是Adobe Illustrator绘制的svg，但它们是在浏览器中渲染出来的。我所见过的一些技巧是使用border、box-shadow和clip-path来绘制图像。如果你在Codepen搜索“daily css images”，你会发现有很多优秀的案例。我自己也画了一些，也做过一些极限挑战，就是在一个元素上使用background和尽量使用其他属性来绘制图像。\n "}, {"link": "https://www.w3cplus.com/javascript/lazy-loading-images-using-intersection-observer.html", "title": "使用 Intersection Observer 实现图片延迟加载", "description": "\n如果你还没有机会看过，@Paul Lewis 发布了一个精彩的视频系列，演示了如何构建一个媒体播放器以及渐进式 Web 应用（Progressive Web App）的一些重要功能。在 YouTube 上的这一系列视频 包括了他在建立网站时的各个部分。观看开发者展示他们工作的视频绝对是我最喜欢的学习新事物的方式！\n "}, {"link": "https://www.w3cplus.com/vue/scoped-styles-vs-css-modules.html", "title": "Vue中的作用域CSS和CSS模块的差异", "description": "\n现代Web开发中的CSS离完美还差得远，这并不奇怪。现在，项目通常是相当的复杂的，而CSS样式又是全局性的，所以到最后总是极容易地发生样式冲突：样式相互覆盖或隐式地级联到我们未考虑到的元素。为了减轻CSS存在的主要痛点，我们在项目中普遍采用BEM的方法来。不过这只能解决CSS问题中的一小部分。对我们来说是幸运的，社区已经开发出了可以帮助我们更彻底地解决问题的解决方案。你可能已经听说过CSS Modules、Styled Componetns、Glamorous或JSS。这些只是我们今天可以添加到项目中的一些最流行的工具。如果你对这个话题感兴趣，你可以查看这篇文章：@Indrek Lasn详细介绍了CSS in JS的全部思想。\n "}, {"link": "https://www.w3cplus.com/javascript/modifying-document.html", "title": "DOM系列：修改DOM", "description": "\n通过前面的学习，我们都知道，DOM并不一定要由存在于HTML中的元素组成。我们仅需要使用几行JavaScript代码就可以将HTML元素添加到你的DOM中。而且你也有能力移动周围的元素，甚至删除它们。除了这一切之外，我们还可以动态地创建和修改DOM中的元素，而且这一DOM操作也是很重要的一个特性，同时也能满足Web网站或应用程序的一些操作。在今天的教程中，我们将继续学习DOM中的一些基础知识。在今天中，我们将研究如何创建元素、删除元素和克隆元素等。简单的说，今天的内容涉及到一些DOM的修改。\n "}, {"link": "https://www.w3cplus.com/javascript/DOM-event-binding.html", "title": "DOM系列：事件绑定的姿势", "description": "\n在上一节中，学习和了解了DOM事件模型，了解到JavaScript中每种事件模型都有其自己独具的特性。不同的事件模型中，绑定DOM事件的姿势也将略有差异，在这一节中，我们一起来学习JavaScript中DOM事件是如何绑定的。在JavaScript中，给DOM元素绑定事件主要分为两大类：HTML中直接绑定和JavaScript中绑定。\n "}, {"link": "https://www.w3cplus.com/javascript/viewport-device-scroll-document-size.html", "title": "DOM系列：视窗、设备、滚动条和文档尺寸", "description": "\n在上一节中，学习了JavaScript如何获取和设置元素位置和尺寸相关的方法，另外在JavaScript的学习笔记当中也学习了视窗宽度、位置与滚动高度相关的JavaScript方法与属性。今天继续来学习DOM中相关的知识，这篇文章将学习视窗、设备、滚动条和文档等相关的尺寸。其实在前两篇文章中都有涉及这些知识，为了让DOM系列相关的知识更完善，所以再花点时间整理一些这方面的技术点，加强印象。\n "}, {"link": "https://www.w3cplus.com/css/empty-vs-blank.html", "title": "CSS伪选择器：:empty vs :blank", "description": "\n前段时间@Zell Liew的博客深入的介绍了CSS中伪选择器:empty和:blank相关的知识。那么:empty和:blank究竟有什么作用，又在什么场景下使用呢？今天我们来一起看看，它们怎么使用，更应该应用在哪个场景之下呢？\n "}, {"link": "https://www.w3cplus.com/vue/event-bus.html", "title": "Vue 2.0学习笔记：事件总线（EventBus）", "description": "\n许多现代JavaScript框架和库的核心概念是能够将数据和UI封装在模块化、可重用的组件中。这对于开发人员可以在开发整个应用程序时避免使用编写大量重复的代码。虽然这样做非常有用，但也涉及到组件之间的数据通讯。在Vue中同样有这样的概念存在。通过前面一段时间的学习，Vue组件数据通讯常常会有父子组件，兄弟组件之间的数据通讯。也就是说在Vue中组件通讯有一定的原则。\n "}, {"link": "https://www.w3cplus.com/javascript/dom-attributes-and-properties.html", "title": "DOM系列：Attribute和Property", "description": "\n这两天一直在看DOM元素的attribute和property，简单让人晕。从直译上，我一开始都理解为“属性”，而且对于我这样的新手，将两者混淆在一起，傻傻的分不清楚。后来经过大大们的指点，知道两者是不同的东西，但两者之间又有紧密的联系。为了能更清晰的整明白两者的关系与不同，所以把自己理解和搜集的资料理了一下，希望对新手有所帮助。\n "}, {"link": "https://www.w3cplus.com/javascript/different-types-of-observers-supported-by-modern-browsers.html", "title": "现代浏览器支持的不同类型的观察者", "description": "\n观察者（Observer）是一个观察或注意事物的程序。观察者可以观察浏览器中发生的某些活动并做出相应的响应。观察者类似于狗，观察某些活动，并提醒我们发生了一些不寻常的事情。一旦我们为某些活动获取到狗发出的警告时，我们有责任采取相应的行动。现代浏览器支持的四种不同类型的观察者。\n "}, {"link": "https://www.w3cplus.com/mobile/taobao-bar-design.html", "title": "手淘Web页面Bar和纵向适配的设计", "description": "\n记得在去年双11的互动页面中，我们折腾了一波iPhone8、iPhone8 plus和iPhone X的适配，特别是iPhone X刘海区域的适配。针对这方面的页面适配，沉淀出相应的适配方案。而今年的双11期间，苹果又推出了iPhone XS、iPhone XR和iPhone XR Max以及众多的安卓刘海设备。言外之意，前端在这方面的适配变得越来越复杂。面对众多场景，我们应该怎么去面对呢？接下来聊聊我在今年双11的主互动玩法中是怎么处理的。\n "}, {"link": "https://www.w3cplus.com/vue/component-communication.html", "title": "Vue组件通讯", "description": "\n使用Vue构建组件容易，但对于初学者要掌握Vue组件中的通讯还是有一定的难度。比如说，父组件如何向子组件通讯？子组件又是如何向父组件通讯？兄弟组件又是怎么通讯？这些方面都是有关于组件通讯相关的知识。而且掌握Vue组件之间的通讯方式还是掌握Vue组件的另一种能力。\n "}, {"link": "https://www.w3cplus.com/javascript/node-properties-type-tag-and-contents.html", "title": "DOM系列：DOM节点属性", "description": "\n经过前几篇文章的学习，对DOM有一定的了解。但这仅仅是DOM一些基础性的知识，如果要对DOM更了解，需要更深入地了解DOM节点。在这一节中，咱们将围绕DOM的节点属性、标签和内容来展开。这样我们就可以更进一步的了解它们是什么？以及它们最常的属性。\n "}, {"link": "https://www.w3cplus.com/javascript/get-element-position-and-size-using-javascript.html", "title": "DOM系列：获取元素位置和尺寸", "description": "\n对于每一位Web开发的同学而言，在CSS的世界当中，每一个元素都是一个盒子，都有描述盒子大小和位置的相关属性。比如CSS的盒模型相关的属性和position相关属性。不过今天我们学习和聊的不是CSS的世界，而是来学习和聊JavaScript中怎么获取元素尺寸和位置。\n "}, {"link": "https://www.w3cplus.com/javascript/animating-layouts-with-the-flip-technique.html", "title": "FLIP技术给Web布局带来的变化", "description": "\n用户界面是最直观的呈现给用户，而其中动画在这方面又扮演着重要的角色。正如@Nick Babich所说:动画将用户界面带入生活。而且，UI动画在用户体验方面也是重要的一环。特别是移动端开发的同学更清楚这一点。移动应用中的UI动画是体验的核心部分之一，而不是事后的想法。可是呢？事实上我们经常遇到的Web运用程序或App只是从一个视图跳到另一个视图，并没有给用户足够多的时间来处理当前环境中刚刚发生的事情。同时，很多同学都认为，动画通常在用户体验方面仅仅是锦上添花，并且被认为是不必要的、过渡的或太复杂的，无法实现的，也是因为这些原因，UI动画在很多Web应用中被忽略了。更糟糕的是，缺乏意义的动画会给自己产品体验方面带来损害。\n "}, {"link": "https://www.w3cplus.com/css/Illustrated-CSS-details-and-cases-chr2-cascade-and-inherit.html", "title": "图解CSS：CSS层叠和继承", "description": "\nCSS中有三个概念是学习CSS必须要掌握的：层叠、继承和权重。今天我们主要来了解CSS中的层叠和继承，对于CSS权重这一部分将放到CSS的选择器中来介绍，因为这一部分和CSS的选择器耦合的更为紧密。不管是初学者还是有一定工作经验的同学，花点时间阅读这篇文章都是很有必要的，这样有利于你对CSS更清楚的了解和理解。感兴趣的同学请继续往下阅读。\n "}, {"link": "https://www.w3cplus.com/css/the-state-of-changing-gradients-with-css-transitions-and-animations.html", "title": "使用CSS transition和animation改变渐变状态", "description": "\n到目前为止，CSS的渐变属性linear-gradient和radial-gradient已经是很成熟的CSS特性了，而且repeating-linear-gradient和conic-gradient也越来越成熟。CSS渐变特性对于我们的帮助已经非常强大了，它们可以帮助我们绘图、创建图片占位符、制作环形进度条等等。另外还可以通过transition和animation让渐变动起来。\n "}, {"link": "https://www.w3cplus.com/vue/managing-state-in-vue-js.html", "title": "Vue中的状态管理", "description": "\nVue中管理应用程序的状态有多种不同的方法，了解状态管理也是学习Vue知识的基础部分，也是很重要的一部分。从这篇文章开始，我们来开始学习Vue应用程序中的状态管理。在这篇文章中会先简单的介绍Vue应用程序中状态管理的大多数方法。希望对Vue的学习者有所帮助。\n "}, {"link": "https://www.w3cplus.com/javascript/searching-elements-dom.html", "title": "DOM系列：getElement* 和 querySelector*", "description": "\n在上一节中，我们学习了DOM树和遍历DOM相关的知识。可以通过firstChild（或firstElementChild）、lastChild（或lastElementChild）、parentNode(或parentElement)、children、previousSibling（或previousElementSibling）、nextSibling(或nextElementSibling)获取到你想要的DOM元素。如果你够仔细的话，可以看到他们之前都是存在相互关系的，要么是兄弟关系，要么是父子关系。\n "}, {"link": "https://www.w3cplus.com/mobile/mobile-design-and-adapter.html", "title": "移动端上的设计和适配", "description": "\n面对于不同移动设备，特别是针对于屏幕高度的设计和适配，一直是困扰着视觉和前端。特别是设计师和前端开发人员之间的协调，沟通的成本也随着增加。那么这篇文档，主要是用于移动端设计和适配（针对屏幕高度方面），希望通过文档的形式能减少设计师和开发人员之间的一些沟通成本，同时让前端开发人员用最低的时间成本来完成终端设备的UI适配工作。\n "}, {"link": "https://www.w3cplus.com/javascript/cssom-css-typed-om.html", "title": " 初探CSS对象模型（CSSOM）", "description": "\n今年花了不少的时间在学习DOM相关的知识，经过这段时间的学习，可以通过一些JavaScript的API操作和处理Web页面上的HTML元素。在Web中除了DOM之外还有另外一个对象模型：CSS对象模型（即CSSOM）。或许你已经在项目中已经用过了，只不过没有意识到这一点而以。今天这篇文章中，我们主要来一起探讨有关于CSSOM相关的特性。\n "}, {"link": "https://www.w3cplus.com/css/understanding-logical-properties-values.html", "title": "理解CSS的逻辑属性和值", "description": "\n2017年5月18日，W3C的 CSS工作组（CSS Working Group） 发布了 CSS逻辑属性和值（CSS Logical Properties and Values Level 1） 的首份工作草案（First Public Working Draft）。不同的书写模式（writing mode）中，可以抽取出共性的抽象概念（如开始位置，或行），这些逻辑抽象概念需要在不同书写模式下映射到左或右、上或下等物理的概念上。一些CSS布局可能依赖这些共性的逻辑概念。该 CSS 模块给出了用于通过逻辑方式（而不是基于物理坐标、书写方向和维映射等）控制布局的逻辑属性和取值（logical properties and values）。这个模块来源于CSS21中关于逻辑属性和值的特性。\n "}, {"link": "https://www.w3cplus.com/css/icon-align-to-text.html", "title": " Icon和文本对齐方式的探索", "description": "\n在Web中很多场景中都会使用到Icon，那么就会面临Icon和文本对齐的处理。而这个对齐效果的处理又不是一件轻易的事情，特别是面又众多不同移动终端的情形之下。那么今天这篇文章就来和大家一起探讨一下这方面的话题。\n "}, {"link": "https://www.w3cplus.com/javascript/debouncing-throttling-explained-examples.html", "title": "实例解析防抖动和节流阀", "description": "\n防抖（Debounce）和节流（Throttle）都是用来控制某个函数在一定时间内执行多少次的技巧，两者相似而又不同。当我们给 DOM 绑定事件的时候，加了防抖和节流的函数变得特别有用。为什么呢？因为我们在事件和函数执行之间加了一个控制层。记住，我们是无法控制 DOM 事件触发频率的。\n "}, {"link": "https://www.w3cplus.com/javascript/add-rules-stylesheets.html", "title": "DOM系列：动态添加CSS样式规则", "description": "\n在上一节中学习了如何通过JavaScript来修改CSS样式。简单地说：查询CSS样式（即计算样式），设置单个样式（设置的是行内样式），设置多个样式（通过类来设置样式）。事实上我们还可以通过脚本化CSS这种技术来控制样式。这种方式，可以让我们的页面更加的快速和高效。那就是直接通过JavaScript动态地添加和删除样式表中的某些样式，用来取代不断地查询DOM元素，并应用各种样式。接下来咱们就来学习脚本化样式表相关的知识。\n "}, {"link": "https://www.w3cplus.com/mobile/the-trick-to-viewport-units-on-mobile.html", "title": "视窗单位在移动端上的使用技巧", "description": "\n视窗单位一直都存在争议，部分原因是因为移动端浏览器对如何实现视窗单位有着自己的看法，这样就让本来简单的事情变得更加复杂化。一个典型的示例是：vw的计算是否要包含浏览器的滚动条？那么网站的导航或页面控件呢？这些应该算在计算中吗？还有一些设备本身的物理属性（比如iPhone X的刘海）是不容忽视的。\n "}, {"link": "https://www.w3cplus.com/vue/vue-plugins.html", "title": "Vue 2.0学习笔记：如何创建Vue插件", "description": "\nVue插件是向应用程序添加全局特性的一种强大而又简单的方法。它有多种用途，从分发应用程序范围的组件到向应用程序添加路由和不可变数据存储等附加功能。从概念上讲，Vue插件是非常简单。它实际上只是一个带有install函数的对象，它接受两个参数：全局的Vue对象和一个包含用户定义选项的对象。然而，一个像这样简单的Vue插件仍然可以得到相当大的效果。\n "}, {"link": "https://www.w3cplus.com/javascript/dom-tree-and-traversals.html", "title": "DOM系列：DOM树和遍历DOM", "description": "\n上一节，咱们整理了DOM系列中的第一篇，主要介绍浏览器与DOM相关的知识。从标题中我们可以看出来，今天所要学的东西包含两个部分，第一部分是DOM树，第二部分是遍历DOM。如果你和我一样对于DOM树和遍历DOM是初次接触，那个人建议您花点时间好好看看这两部分的知识。\n "}, {"link": "https://www.w3cplus.com/css/what-s-new-in-css.html", "title": "有关于CSS的一些新东西", "description": "\n上个月2018年TPAC会议刚结束没多久，@Rachel Andrew在Smashing Magazine上面就发表了一篇文章《The CSS Working Group At TPAC: What’s New In CSS?》介绍了CSS中将会有的一些新东西，同时我们国内@安佳 大大也发了一篇有关于参加该会议的总结。就在这个月，@Rachel Andrew在瑞典.马尔默举办的2018年Øredev 开发者大会上分享了一个话题就是有关于CSS的一些新东西，同时她还分享了另一个话题《2019年布局有哪些工具包》。我阅读了@Rachel Andrew在该会议上分享的两个话题，但今天主要想根据@Rachel Andrew分享的第一个话题做一些总结：CSS有哪些新东西。希望对大家有所帮助。\n "}, {"link": "https://www.w3cplus.com/css/create-patterns-with-css-doodle.html", "title": "一个制作Web图案的组件：css-doodle", "description": "\nWeb中使用一些图案做为背景图案是一种时常可见的，早期一般都是通过图片来完成。直至CSS一些新特性更趋成熟和稳定的时候，会通过CSS的相关技术，比如CSS的渐变属性配合background-size之类的来做一些复杂而又美观的Web图案，运用于background-image之中。随着前端技术不断的革新，不久前看到一个生成Web图片的组件：<css-doodle /> —— 使用CSS绘制图案的Web组件！\n "}, {"link": "https://www.w3cplus.com/css/new-scroll-features-that-change-the-user-experience.html", "title": "改变用户体验的滚动新特性", "description": "\n@evilmartians的《滚动的特性》一文介绍了目前有关于滚动相关的特性。今天我想花点时间重新整理一下，时至今日，CSS中为浏览器滚动提供的相关新特性究竟能给用户带来哪些新的体验。\n "}, {"link": "https://www.w3cplus.com/vue/practical-use-of-components-and-mixins-in-vue-js.html", "title": "实战Vue组件和Mixins", "description": "\n这篇文章主要帮助我们深入的学习Vue的组件和mixins，它们帮助你扩展基本的HTML元素，用来封装可重用的代码。在较高的层次上，组件是定制的元素，Vue的编译器附加了行为，而mixins为你提供了一个保持代码可重用性的方式，从而使你的代码保持干净和易于维护。\n "}, {"link": "https://www.w3cplus.com/javascript/browser-and-the-dom.html", "title": "DOM系列：浏览器与DOM", "description": "\n最近回过头来在学习JavaScript中的DOM知识，随着学习进度的向前推移，越发感觉DOM知识点较多。为了能更好的系统了解清楚DOM相关的知识，我打算重新将DOM的学习划入到DOM系列当中。那么今天将是这个系列的第一篇。你将了解到DOM是什么，为什么它有用，以及如何与将来在教程中所做的一切联系起来。\n "}, {"link": "https://www.w3cplus.com/css/new-box-model-width-logical-properties.html", "title": "CSS的逻辑属性对盒模型带来的变化", "description": "\n在《理解CSS的逻辑属性和值》一文中，我们对CSS逻辑属性和值（CSS Logical Properties and Values Level 1）有所了解。事实上对于广大前端开发者而言，自从Web诞生以来，就习惯了使用用物理CSS属性。比如上、右、下和左，映射到CSS的盒模型就是margin、padding和border的top、right、bottom和left设置元素。但随着CSS的书写模式特性的出现，上、右、下和左的概念在某种程度上已经失去了其意义。\n "}, {"link": "https://www.w3cplus.com/animation/loading-animation-component.html", "title": " 制作Loading组件", "description": "\n最近项目中使用到一个Loading效果，其实是一个很简单的效果，主要是因为这个Loading出现在不同的场景之中，而且大小也不一致。对于这样的效果，往往都会想通过组件的方式来处理，其出发点就是更易维护，易扩展。当然，这对于前端的同学而言并没有什么复杂性，也没有多少技术含量。不过我还是希望把这个过程记录下来。\n "}, {"link": "https://www.w3cplus.com/css/understand-css-stacking-context-order-z-index.html", "title": "聊聊CSS中的层叠相关概念", "description": "\n最近在纠结程序语言和设计语言中的一些概念，整到层叠上下文和图层相关的事情，然后发现自己对于CSS中的层叠相关的知识并没有自己想象中那样理解的透彻。因此花了一段时间重新梳理了一下相关的知识。如果想要理解清楚CSS中的层叠相关的知识点，我们就很有必要先了解一些重要的概念：文档流（Normal Flow）、格式化上下文（Formatting Context）、层叠上下文（Stacking Context）、层叠水平（Stacking Level） 和 层叠顺序（Stacking Order）。\n "}, {"link": "https://www.w3cplus.com/vue/vue-mixins.html", "title": "Vue2.0学习笔记：Vue中的Mixins", "description": "\n在项目开发的时候，常会碰到这样的一种现象：有两个组件非常相似，比如较为熟悉的Modal、Tooltip和Popover，它们都具有同样的基本函数，而且它们之前也有足够的不同。很多时候，就让人很难做出选择：是把它们拆会成多个不同的组件呢？还是只使用一个组件，创建足够的属性来改变不同的情况。在Vue中，对于这样的场景，官方提供了一种叫混入（mixins）的特性。使用mixins允许你封装一块在应用的其他组件中都可以使用的函数。如果被正确的使用，他们不会改变函数作用域外部的任何东西，所以多次执行，只要是同样的输入，总是能得到一样的值。既然Vue的mixins这么优秀，那应该怎么使用呢？今天我们的目的就是学习如何在Vue的项目中使用mixins。\n "}, {"link": "https://www.w3cplus.com/javascript/understanding-the-dom.html", "title": "理解DOM", "description": "\nDOM是Document Object Model的简称，是网站具有交互性的重要组成部分。它是一个接口，允许编程语言操作网站的内容、结构和样式。JavaScript是浏览器中连接到DOM的客户端脚本语言。欲要更好的操作好Web网站，我们就很有必要的理解DOM。而且这也是学习JavaScript很重要的部分之一。接下来我们将从以下几个部分来展开对DOM的理解和学习。\n "}, {"link": "https://www.w3cplus.com/css/how-to-use-web-image.html", "title": "探索Web上图片使用方式", "description": "\n图片在Web上的使用占比已经非常的高，特别是在手淘互动这样的环境之下，我们每一个项目的图片使用量都非常的大。如果能把图片用好，的确是件不容易的事情，而且面对的挑战也不小。经常会碰到有关于图片如何加载，如何适配，如何优化等等。另外在移动端开发中，很多同学在Web上使用图片的方法一般都是通过<img>标签和CSS的background-image属性来处理。也正因如此，很多同学却忘记了这两者应该如何？怎么使用又是最优的。甚至有很多前端同学都已经忘记了这两者的差异是什么？加上Web的技术不断革新，事实上除了前面提到的加载图片的方式之外，还有其他的方式，比如HTML5的<picture>（虽然这个元素标签曾经一度废弃过，但后来又添加回来了）。就算还是使用img标签，也有了新的优化，比如img的srcset属性。那么面对这么多的变化，以及使用的场景，我们应该怎么来选择，才是最优的选择。今天这篇文章，我们就来一起探讨一下这些东西，希望大家会喜欢。\n "}, {"link": "https://www.w3cplus.com/css/5-hot-new-css-features-and-how-to-use-them.html", "title": "五个最新的CSS特性以及如何使用它们", "description": "\n虽然CSS简单，但CSS是一门非常有意思的语言，CSS每年都有变化，而且都有不同的博主都在不同的时间段总结一些CSS的新特性。虽然这些新特性无法立刻得到众多浏览器的支持，但总是随着时间的发展，这些特性都会得到浏览器的支持。哪怕未得到支持，也有一些方法让浏览器支持，比如最为出外的cssnext，就可以让很多未来的CSS特性就立马使用，并且不用花太多时间来考虑浏览器的兼容性。今天这篇文章,@Daniel Crisp就当下的CSS的新特性做了一个简单的总结 —— 五个最新的CSS特性（事实上这些特性，对我而言并不是新特性），并且用示例告诉大家怎么使用这些特性。那么接下来，咱们看看这五个新特性是什么？以及怎么使用。如果您感兴趣，欢迎继续往下阅读。\n "}, {"link": "https://www.w3cplus.com/javascript/ResizeObserver-api.html", "title": "JavaScript中的ResizeObserver", "description": "\n这几天看@Anton Kosykh写的使用ResizeObserver实现响应式Vue的组件，让我刷新了对响应式组件的认识，也在这里第一次接触到ResizeObserver这个词。个人有一个习惯，对于任何新东西，我都充满好奇，有一股探知欲，要了解其中的原委。今天这篇文章就是自己对ResizeObserver的探知。\n "}, {"link": "https://www.w3cplus.com/javascript/scroll-to-the-future-modern-javascript-css-scrolling-implementations.html", "title": "滚动的特性", "description": "\n一些（网站）滚动的效果是如此令人着迷但你却不知该如何实现，本文将为你揭开它们的神秘面纱。我们将基于最新的技术与规范为你介绍最新的 JavaScript 与 CSS 特性，将使你的页面滚动更平滑、美观且性能更好。大多数Web页面不适合单屏显示，所以Web页面出现滚动条被所有用户认为是理所当然的。对于前端开发人员和视觉设计来说，跨浏览器提供良好的滚动体验，同时符合设计，无疑是一个挑战。尽管 Web 标准的发展速度远超从前，但代码的实现往往是落后的。下文将为你介绍一些常见的关于滚动的案例，检查一下你所用的解决方案是否被更优雅的方案所代替。\n "}, {"link": "https://www.w3cplus.com/css/combining-the-powers-of-sem-and-bio-for-improving-css.html", "title": "结合SEM和BIO来改进CSS", "description": "\n有人可能会说，CSS很简单，但是“容易”会导致代码混乱。在大家的眼里，使用像Sass或LESS这样的处理器会让事情变得更为简单。但事实上并不一定如此，如果你使用的不小心，你的CSS将变得更难处理，而不是更易处理。Sass？困难吗？Sass的嵌套就展示了这一点，使用不当，Sass的嵌套就是地狱。如果你的Sass代码看起来像这样的，那么你肯定可以使用SEM和BIO来改进你的代码。接下来我就将向你介绍这方面的CSS技术。\n "}, {"link": "https://www.w3cplus.com/canvas/adding-particle-effects-to-dom-elements-with-canvas.html", "title": "使用Canvas给DOM元素添加粒子效果", "description": "\n让我们来看看如何将<canvas>的自由度与HTML元素结合起来，使Web页面在视觉上有更好的效果。具体地说，我们将创建一个基于HTML-to-particle的效果，但同样的技术也可以用于实现很多类型的效果。在开始之前，可以通过Repo获取源代码。\n "}, {"link": "https://www.w3cplus.com/css/flex-item-calculate.html", "title": "聊聊Flexbox布局中的flex的演算法", "description": "\n到目前为止，Flexbox布局应该是目前最流行的布局方式之一了。而Flexbox布局的最大特性就是让Flex项目可伸缩，也就是让Flex项目的宽度和高度可以自动填充Flex容器剩余的空间或者缩小Flex项目适配Flex容器不足的宽度。而这一切都是依赖于Flexbox属性中的flex属性来完成。一个Flex容器会等比的按照各Flex项目的扩展比率分配Flex容器剩余空间，也会按照收缩比率来缩小各Flex项目，以免Flex项目溢出Flex容器。但其中Flex项目又是如何计算呢？他和扩展比率或收缩比率之间又存在什么关系呢？在这篇文章中我们将一起来探来。\n "}, {"link": "https://www.w3cplus.com/javascript/querySelectorAll-vs-getElementsByTagName.html", "title": "JavaScript学习笔记：querySelectorAll 和 getElementsByTagName区别", "description": "\n在《DOM的操作》一节中知道querySelectorAll()和getElementsByTagName()两个方法都是用来查找DOM元素的。通过上一节的学习，知道querySelectorAll()方法将获取到NodeList对象，getElementsByTagName()方法获取到的是HTMLCollection对象。虽然他们获取的都是DOM动态集合，但两者还是略有差异的。今天我们就来看这两者之间的区别。\n "}, {"link": "https://www.w3cplus.com/vue/vue-animation.html", "title": "Vue 2.0学习笔记：Vue的animation", "description": "\n上一节我们学习了Vue 2.0中的<transition>实现元素从状态A到状态B的过渡效果。对于元素过渡的效果是通过CSS的transition来完成，具体什么时候执行是由Vue来控制的。而transition的效果毕竟有所限制，对于一些复杂的动效，还是需要通过别的方式来完成。在Vue中除了transition之外还可以完成animation的效果。也就是可以将CSS的animation运用到Vue中来，实现一些动画效果。今天这篇文章我们就来学习如何在Vue运用CSS的animation。\n "}, {"link": "https://www.w3cplus.com/javascript/dom-model.html", "title": "DOM系列：DOM事件模型", "description": "\n通过上一节的学习，对DOM事件有了一个简单的了解。但这只是学习DOM事件相关知识的起步点。在JavaScript中常见的事件模型有：DOM基本事件模型、DOM Level 2事件模型、IE事件模型、DOM Level 3事件模型 和 自定义事件模型。每种事件模型都有其自己独具的特性。只有了解了DOM事件模型之后，才可以为后续的DOM事件打下一个基础。今天来了解一下DOM事件的模型。\n "}, {"link": "https://www.w3cplus.com/css/techniques-for-using-CSS-in-the-double-11-project.html", "title": "聊聊双11互动主动法中前端技术亮点", "description": "\n在上一篇《手淘Web页面Bar和纵向适配的设计》中聊了互动项目中Bar的工业化标准设计以及对刘海设备带来的变化。我把这一点称为标准化Bar设计给适配带来的优势。今天这篇文章中主要想再花点时间聊聊今年手淘“PK赢能量”互动项目中前端有哪些技术亮点和尝鲜。当然文章涉及到的技术点估计有很多同学都有接触或者使用过。毕竟CSS仅仅是一门表现层语言。废话不多说，直接进入主题吧！\n "}, {"link": "https://www.w3cplus.com/javascript/dom-dynamic-collection.html", "title": "JavaScript学习笔记：动态集合", "description": "\nDOM是JavaScript中重要部分之一，在DOM中有一个动态集合。这个动态集合包含节点的集合（NodeList）、元素属性的集合（NamedNodeMap）和HTML元素的集合（HTMLCollection）。这三个对象都是类数组（Array-like），具有像数组一样的特性。更为重要的是，它们都是动态的，是有有生命有呼吸的对象，会实时更新查询DOM结构。今天我们学习的目标就是深究这三个动态集合之间的用法和联系以及区别。\n "}, {"link": "https://www.w3cplus.com/vue/build-an-infinite-scroll-component-using-intersection-observer-api.html", "title": "使用Intersection Observer API构建无限滚动组件", "description": "\n在开发过程中，经常会遇到要处理大量数据的情况，比如列表、搜索记录等，因此你需要一种方法让用户以块状显示这些数据，以便保持应用程序性能和数据的有序性。你可能会使用分页组件来处理，它可以轻松跳转，甚至一次跳转几个页面。当然，元素滚动是分页组件的另一种替代方案，它可以提供更好的用户体验，特别是在移动端和可触摸设备上。当用记在页面上滚动时，它提供了一个透明的分页，给人一种没有结尾列表的感觉。自从Intersection Observer API出现之后，构建无限滚动组件变得更简单。让我们看看如何通过这个API来构建无限滚动组件。\n "}, {"link": "https://www.w3cplus.com/javascript/operate-dom.html", "title": "JavaScript学习笔记：DOM的操作", "description": "\n通过上一节的学习，对JavaScript中的DOM有了一定的认识。虽然对DOM中相关的知识点有一定的概念，但还是缺乏对DOM的实际操作。如果你仔细阅读过上一篇文章的话，你应该会发现，当时也提到了一些DOM操作相关的东西，比如，DOM的增、删、改和查等。那么今天我们就来看看这些方面的东西。\n "}, {"link": "https://www.w3cplus.com/css/flexbox-vs-grid-basic-concepts-and-related-attributes.html", "title": " Flexbox vs Grid：基本概念", "description": "\n整个Web在不断的演进，那么为Web服务的理念与技术等等也在不断的进行演化。那么我们今天要聊的话题，Web布局中最为优秀的两种布局方式：Flexbox布局和CSS Grid布局。有关于这两方面的知识，其实在W3cplus上已经有很多相关的内容。由于这两种布局方式对Web布局带来了很多改变，而且两者都有其自身的优势。正因为如此，很多同学总是会类似的一个问题：应该使用Flexbox还是Grid来进行布局？那么我们从这篇文章开始，将会分几篇文章一起来介绍Flexbox布局和CSS Grid布局两者的差异性？我们又应该如何的选择，才能更适合我们项目的布局？希望接下来的内容对大家有所帮助。\n "}, {"link": "https://www.w3cplus.com/vue/async-vuejs-components.html", "title": "Vue中的异步组件", "description": "\n随着应用程序越来越大，你开始考虑优化应用程序，使其变得更快。在此过程中，你可能使用了拆分代码和延迟加载这两种方法，它们通过将代码块的加截推迟到需要的时候加载，从而使应用程序的初始包变得更小。延迟加载对于应用程序路由有很大的意义，并且有很大的影响，因为每个路由都是应用程序的不同部分。延迟加载有意义的另一种情况是组件延迟渲染。这些组件可以是tooltips、popover、modal等，当然这些组件也可以使用异步组件。让我们来看看如何在Vue中构建延迟加载异步组件。\n "}, {"link": "https://www.w3cplus.com/css/css-grid-fr-unit.html", "title": "CSS Grid带来的新单位：分数单位fr", "description": "\nCSS Grid经过这么多年的发展已经越来越受人青眯了，到目前为止支持率得到近88%的比例。经过这么多年的跟踪和学习，对CSS Grid的特性也是略有所知，但还未达到完全的融汇贯通。因为它有很多的特性，而且这些特性对于CSSer来说很多都是新的概念，比如我们今天要说的分数单位fr就是一个新东东。那么这篇文章，咱们就来一起看看这个特性有什么特性，给我们又能带来什么好处。感兴趣的同学，请继续往下阅读。\n "}, {"link": "https://www.w3cplus.com/css/9-biggest-mistakes-with-css-grid.html", "title": "使用CSS Grid的九大误区", "description": "\n如果你和我一样一直在关注CSS Grid布局的话，你应该知道@Rachel Andrew和@Jen Simmons都是CSS Grid 布局的布道师。两位女士一直都在推进Grid的特性和完善相关的特性。这几天看到@Jen Simmons录了一个视频，聊了一下CSS Grid布局相关的误区。\n "}, {"link": "https://www.w3cplus.com/vue/reusing-logic-in-vue-components.html", "title": " 重用Vue组件中的逻辑", "description": "\n当你开始使用Vue创建应用程序时，你可以开始先创建组件，来构建应用程序的不同部分。你应该可以感受到Vue和Web组件结构体系的良好开发体验。随着项目的进行，你开始以某种方式构造应用程序组件，可能是按页面和组件。但随着项目的不断发展，你开始要在多个组件之间执行重复的逻辑。我们常常说不要做重复的事情（DRY）和让一切保持它的简单。这两个原则利于我们编写和维护应用程序。也许你已经知道一些有助于遵循这些原则的模式、库和技术。Vuex将帮助你从组件中提取状态逻辑，Vue路由器将对路由逻辑做同样的工作，但是组件呢？我们经常遇到这样的情况，需要重用属于组件的一些UI功能。例如，除了被锚定和定位到元素之外，弹出窗（Popover）和提示框（Tooltip）都可以在某个事件触发时共享打开和关闭的功能。\n "}, {"link": "https://www.w3cplus.com/css/img-and-picture-load-correct-image.html", "title": " 给Web页面提供正确图像的姿势", "description": "\n在《探索Web上图片使用方式》一文中介绍了Web上图片的各种使用方式，从引入图片、图片效果处理、图片适配、图片加载以及图片优化几个方面介绍Web的图片使用方式。其中有一个值得我们去探讨的话题，那就是如何根据用户的设备为其提供正确的图片。那在这篇文章中我们就一起来聊聊这方面的技术。\n "}, {"link": "https://www.w3cplus.com/css/css-functions.html", "title": "CSS中的函数", "description": "\n大家都知道，CSS只是一个声明式的语言，主要为标记语言服务。很多程序员鄙视它，有一部分原因是CSS并不像其他程序语言一样，具有一些逻辑能力以及函数功能等特性。随着CSS的不断变革，其慢慢地也变得越来越强大。时至今日，CSS中也有具有函数和运算相关的能力。比如我们今天要聊的CSS函数。在CSS Values and Units Module Level 4中把函数标记（Functional Natations）单独提取出来做为该规范的一部分。而这部分主要介绍了一些具有数学计算能力相关的属性值，比如大家熟悉的calc()和不怎么熟悉的min()和max()。而我们今天要聊的是CSS中的函数，其中就包括这些部分。如果大家感兴趣，欢迎继续往下阅读。\n "}, {"link": "https://www.w3cplus.com/css/Illustrated-CSS-details-and-cases-chr1.html", "title": "图解CSS：揭开CSS的面纱", "description": "\n如果您对前端方面有所关注，那么对CSS一定不会陌生，你也肯定听说过一些CSS的新特性。在使用CSS新特性之前，你应该对这个新一代样式表语言的来龙去脉有个基本了解。在本章节中，你将知道一个CSS属性的制定将会经历哪些过程，为什么会有浏览器的私有前缀以及如何更好的处理这些私有前缀，在文章最后简单的介绍了开发人员如何对CSS新特性做一些渐进增强，优雅降级的处理，给你的用户有一个更好的，更佳的体验。\n "}, {"link": "https://www.w3cplus.com/css/the-complete-css-flex-box-tutorial.html", "title": "图解CSS Flexbox布局", "description": "\n@js_tut的新书《CSS Visual Dictionary》里面的插画非常有意思。他在Medium上把盒模型、Flexbox、Grid三个部分放了一些出来。我觉得他提供的插画非常形象的阐述了这几个部分的知识点。今天把 Flexbox部分的插图直接拿来使用了，通过这些插图再次向大家阐述CSS Flexbox相关的知识。\n "}, {"link": "https://www.w3cplus.com/css/the-css-paint-api.html", "title": "CSS Paint API", "description": "\nCSS Paint API是一个令人非常兴奋的东西，也是令人激动人心的时刻，它将开启CSS新的旅程。接下来让我们一起来看看它是什么，为什么会有它以及如何开始使用它。\n "}, {"link": "https://www.w3cplus.com/javascript/dom-event-intro.html", "title": "DOM系列：DOM事件简介", "description": "\n如果你浏览过早期的Web网站，或许你已经发现了这些Web站点除了能提供查阅信息之外，无其他作用可言。这样的Web站点其实是非常无聊的。那是因为Web站点没有提供人与机器的互动行为。激不起用户的兴趣。造成这种现象的原因很简单。Web应用程序或者Web站点存应该是为了响应用户对它们所做的事情。好比，我们每天一大早起床时就想好了一天要做些什么，这样每天都有动力，也变得充实。那么在Web应用或Web网站上其实也是类似的，Web网站之后做的事情很大程度上取决于你告诉他们做什么。这样一来，Web网站会变得有趣的多。\n "}, {"link": "https://www.w3cplus.com/css/guide-css-layout.html", "title": "CSS布局指南", "description": "\n在过去几年中，CSS布局已经发生了巨大的变化，现在我们开发网站的方式也发生了巨大变化。现在我们有需要可选的CSS布局方式来开发我们的网站，这也就要求我们对这些方式能作出正确而双合适的选择。在这篇文章中，将会介绍各种CSS布局的基本使用方式以及使用的目的。\n "}]}